{
  "openapi": "3.0.0",
  "x-tagGroups": [
    {
      "name": "API",
      "tags": [
        "Labels",
        "Connections",
        "Assets",
        "Label Suggestion",
        "Incidents",
        "Policy Rules",
        "Policy Revisions",
        "DNS Security",
        "Saved Maps",
        "Reveal Flows",
        "Worksites",
        "User Groups",
        "BloodHound"
      ]
    },
    {
      "name": "Models",
      "tags": [
        "label",
        "asset",
        "policy_rule",
        "map",
        "dns_blocklist",
        "connection",
        "saved_map",
        "reveal_flow",
        "user_group",
        "bloodhound_status",
        "bloodhound_history"
      ]
    }
  ],
  "tags": [
    {
      "name": "label",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/LabelObject\" />",
      "x-displayName": "Label"
    },
    {
      "name": "asset",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/AssetObject\" />",
      "x-displayName": "Asset"
    },
    {
      "name": "policy_rule",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/ExtendedPolicyRuleScheme\" />",
      "x-displayName": "Policy Rule"
    },
    {
      "name": "map",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/MapDetailsObject\" />",
      "x-displayName": "Map"
    },
    {
      "name": "dns_blocklist",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DnsBlocklistObject\" />",
      "x-displayName": "DNS Blocklist"
    },
    {
      "name": "connection",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/ConnectionObject\" />",
      "x-displayName": "Connection"
    },
    {
      "name": "saved_map",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/SavedMapObject\" />",
      "x-displayName": "Saved Map"
    },
    {
      "name": "reveal_flow",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/VisibilityGraphResponse\" />",
      "x-displayName": "Reveal Flow"
    },
    {
      "name": "bloodhound_status",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/BloodHoundStatusObject\" />",
      "x-displayName": "BloodHound Status"
    },
    {
      "name": "bloodhound_history",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/BloodHoundHistoryObject\" />",
      "x-displayName": "BloodHound History"
    }
  ],
  "info": {
    "x-logo": {
      "url": "/assets/images/logo.png"
    },
    "description": "\n# Introduction\nThis is the new version of our API.\n\nThe API is now formalized and stable, and includes a significant subset of the entire feature set of the system.\n\nWe expect the new API to grow until it covers all of the functionality of the previous version. Also, keep in mind that we support older versions of our API for a period of time, and continue to provide backward compatibility.\n\n\n## Overview\nThis document describes the Guardicore Centra REST API. The API complements the UI offering and provides programmatic access to all Centra functionality.\n\nUsers can build applications that read flow visibility data or security incident details, change the active segmentation policy and more.\n\nAll examples in this document assume an installed Guardicore Management server in `https://{management_server}`\n\n\n## General\nAll POST methods assume an HTTP header: `Content-Type: application/json`\n\nAll timestamps are specified in milliseconds since epoch, UTC time.\n\nAsset IDs are assigned (as UUIDs) by the Guardicore platform.\n\nSome replies are paginated. You can browse the results by specifying start_at and max_results URL parameters. For example, to get objects 40-59 of the Assets list, query:\n`https://{management_server}/api/v3.0/assets?start_at=40&max_results=20`\n\n\n## Authentication\nAuthentication with REST API is done using JWT.\n\nObtain a token by sending a POST request to `/api/v3.0/authenticate`, with the following body:\n`{\"username\": \"<username>\", \"password\": \"<password>\"}`\n\nThe response will be `access_token: <token>`\n\nUse the returned token in subsequent requests in one of the following methods:\n- You can include it as an HTTP URI argument, by appending `?token=<token>` to your request\n- You can include an HTTP header in your request: `Authorization: bearer <token>`\n",
    "title": "Guardicore Centra™ Web API",
    "version": "v1"
  },
  "paths": {
    "/api/v4.0/labels/{label_id}": {
      "put": {
        "tags": [
          "Labels"
        ],
        "responses": {
          "200": {
            "description": "Label id",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LabelObjectId"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Label 'id' not found"
          }
        },
        "description": "Edit specific label",
        "parameters": [
          {
            "in": "query",
            "name": "append",
            "required": false,
            "description": "Append criteria, else override the label",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "label_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LabelEditObject"
        }
      },
      "delete": {
        "tags": [
          "Labels"
        ],
        "responses": {
          "200": {
            "description": "Label id",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LabelObjectId"
                }
              }
            }
          },
          "400": {
            "description": "Could not complete the operation due to a server a error. See error for more details"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Label 'id' not found"
          }
        },
        "description": "Delete specific label",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "label_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "Labels"
        ],
        "responses": {
          "200": {
            "description": "Label object",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LabelGet"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Label 'id' not found"
          }
        },
        "description": "Get details of a specific label",
        "parameters": [
          {
            "in": "query",
            "name": "expand",
            "required": false,
            "description": "A comma-separated list of field names to expand",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "static_assets",
                  "dynamic_assets"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "description": "A comma-separated list of field names to return",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "key",
                  "value",
                  "static_criteria",
                  "static_criteria_counter",
                  "static_assets",
                  "static_assets_counter",
                  "dynamic_criteria",
                  "dynamic_criteria_counter",
                  "dynamic_assets",
                  "dynamic_assets_counter",
                  "implicit_criteria",
                  "rules_with_label"
                ]
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "label_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/labels": {
      "post": {
        "tags": [
          "Labels"
        ],
        "responses": {
          "200": {
            "description": "Label id",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LabelObjectId"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "description": "Create label",
        "parameters": [
          {
            "in": "query",
            "name": "append",
            "required": false,
            "description": "Append criteria, else override the label",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "override",
            "required": false,
            "description": "If true, allow updating an existing label with the provided key and value. If false, the action will fail if a label with the provided key and value already exists",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "move_key",
            "required": false,
            "description": "Remove existing labels with the same key from assets that match the new label by IP address or ID. Use when creating a new label (not extending or overriding an existing one)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LabelEditObject"
        }
      },
      "get": {
        "tags": [
          "Labels"
        ],
        "responses": {
          "200": {
            "description": "List of label objects",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LabelListGet"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "description": "Get a list of labels",
        "parameters": [
          {
            "in": "query",
            "name": "expand",
            "required": false,
            "description": "A comma-separated list of field names to expand",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "static_assets",
                  "dynamic_assets"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "description": "A comma-separated list of field names to return",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "key",
                  "value",
                  "static_criteria",
                  "static_criteria_counter",
                  "static_assets",
                  "static_assets_counter",
                  "dynamic_criteria",
                  "dynamic_criteria_counter",
                  "dynamic_assets",
                  "dynamic_assets_counter",
                  "implicit_criteria",
                  "rules_with_label"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "start_at",
            "required": false,
            "description": "Offset to start list from",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "max_results",
            "required": false,
            "description": "Maximum number of results to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1024
            }
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "description": "Fields to sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order_direction",
            "required": false,
            "description": "Order ascending or descending of the field sorting",
            "schema": {
              "type": "string",
              "enum": [
                "up",
                "down"
              ]
            }
          },
          {
            "in": "query",
            "name": "criteria_limit",
            "required": false,
            "description": "Maximum number of criteria",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "assets_limit",
            "required": false,
            "description": "Maximum number of matched/added assets per label per label. Limited to 1024. Use GET LABEL to get all assets",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1024
            }
          },
          {
            "in": "query",
            "name": "ids",
            "required": false,
            "description": "Filter by label UUID",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "key",
            "required": false,
            "description": "Filter by label key",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "value",
            "required": false,
            "description": "Filter by label value",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "rules_with_label",
            "required": false,
            "description": "Filter only labels used in rules",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/labels/bulk": {
      "post": {
        "responses": {
          "200": {
            "description": "List of created label ids",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BulkObjectCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "description": "Create multiple labels",
        "response": {
          "400": {
            "description": "Illegal value provided for 'Label name'"
          }
        },
        "tags": [
          "Labels"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "override",
            "required": false,
            "description": "If true, allow updating an existing label with the provided key and value. If false, the action will fail if a label with the provided key and value already exists",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "append",
            "required": false,
            "description": "Append criteria, else override the label",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "fail_if_failed",
            "required": false,
            "description": "Whether to return a bad request reply and stop processing the request in case the edit operation failed on one of the objects.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "move_key",
            "required": false,
            "description": "Remove existing labels with the same key from assets that match the new label by IP address or ID. Use when creating a new label (not extending or overriding an existing one)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LabelEditObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4.0/labels/bulk_delete": {
      "post": {
        "tags": [
          "Labels"
        ],
        "responses": {
          "200": {
            "description": "List of deleted label ids",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BulkObjectModifyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "description": "Delete multiple labels",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LabelObjectId"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4.0/labels/{label_key}/{label_value}/assets": {
      "post": {
        "tags": [
          "Labels"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Assets 'ids' not found"
          }
        },
        "description": "Add assets to label",
        "parameters": [
          {
            "in": "query",
            "name": "use_unique_key",
            "required": false,
            "description": "Remove the assets from existing labels with the same key (default: False)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "label_key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "label_value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AssetObjectIdArray"
        }
      }
    },
    "/api/v4.0/labels/{label_key}/{label_value}/assets/remove": {
      "post": {
        "tags": [
          "Labels"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Assets 'ids' not found"
          }
        },
        "description": "Remove assets from label",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "label_key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "label_value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LabelRemoveAsset"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4.0/labels/{label_key}/{label_value}/subnets": {
      "post": {
        "tags": [
          "Labels"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Label 'id' not found"
          }
        },
        "description": "Add subnets to label",
        "parameters": [
          {
            "in": "query",
            "name": "use_unique_key",
            "required": false,
            "description": "Remove the subnets from existing labels with the same key (default: False)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "label_key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "label_value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SubnetObjectArray"
        }
      }
    },
    "/api/v4.0/labels/{label_key}/{label_value}/subnets/remove": {
      "post": {
        "tags": [
          "Labels"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "description": "Remove subnets from label",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "label_key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "label_value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SubnetObjectArray"
        }
      }
    },
    "/api/v4.0/provider/connections/bulk": {
      "post": {
        "responses": {
          "200": {
            "description": "Bulk push Connections Events response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionApiResponseObject"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionApiResponseObject"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "413": {
            "description": "Connection batch is too large",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionApiResponseObject"
                }
              }
            }
          },
          "429": {
            "description": "Connection request is throttled",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionApiResponseObject"
                }
              }
            }
          },
          "503": {
            "description": "The server is currently unable to handle the request due to a temporary overloading",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionApiResponseObject"
                }
              }
            }
          }
        },
        "summary": "Push connection events from external provider",
        "description": "Bulk push Provider Connections Events to Centra",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConnectionObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4.0/assets/": {
      "post": {
        "tags": [
          "Assets"
        ],
        "responses": {
          "200": {
            "description": "asset_id of the created asset",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AssetObjectId"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          }
        },
        "description": "Create asset",
        "parameters": [
          {
            "in": "query",
            "name": "edit_if_existing",
            "required": false,
            "description": "Whether to update asset if it already exist instead of returning error",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetCreateObject"
              }
            }
          }
        }
      }
    },
    "/api/v4.0/assets/{asset_id}": {
      "put": {
        "tags": [
          "Assets"
        ],
        "responses": {
          "200": {
            "description": "asset_id of the edited asset",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AssetObjectId"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          }
        },
        "description": "Edit asset",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetEditableFields"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "responses": {
          "200": {
            "description": "asset_id of the deactivated asset",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AssetObjectId"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          }
        },
        "description": "Deactivate asset",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "Assets"
        ],
        "responses": {
          "200": {
            "description": "Asset object",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AssetGet"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Asset 'id' not found"
          }
        },
        "description": "Get details of a specific asset",
        "parameters": [
          {
            "in": "query",
            "name": "expand",
            "required": false,
            "x-nullable": true,
            "description": "A comma-separated list of field names to expand",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "agent",
                  "labels"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "x-nullable": true,
            "description": "A comma-separated list of field names to return",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "name",
                  "status",
                  "first_seen",
                  "last_seen",
                  "nics",
                  "bios_uuid",
                  "agent",
                  "labels",
                  "label_groups",
                  "comments",
                  "orchestration_metadata",
                  "orchestration_details",
                  "mssp_tenant_name",
                  "os_info",
                  "scoping_details"
                ]
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "responses": {
          "200": {
            "description": "List of asset objects",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AssetList"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Asset 'id' not found"
          }
        },
        "description": "Get a list of assets",
        "parameters": [
          {
            "in": "query",
            "name": "expand",
            "required": false,
            "x-nullable": true,
            "description": "A comma-separated list of field names to expand",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "agent",
                  "labels"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "x-nullable": true,
            "description": "A comma-separated list of field names to return",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id",
                  "name",
                  "status",
                  "first_seen",
                  "last_seen",
                  "nics",
                  "bios_uuid",
                  "agent",
                  "labels",
                  "label_groups",
                  "comments",
                  "orchestration_metadata",
                  "orchestration_details",
                  "mssp_tenant_name",
                  "os_info",
                  "scoping_details"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "id",
            "required": false,
            "description": "Filter by asset id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "description": "Filter by asset name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ip",
            "required": false,
            "description": "Filter by asset ip",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "labels",
            "required": false,
            "description": "Filter by asset label id",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "label_groups",
            "required": false,
            "description": "Filter by asset label group ids",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "description": "Filter by asset status (on/off/deleted)",
            "schema": {
              "type": "string",
              "enum": [
                "on",
                "off",
                "deleted"
              ]
            }
          },
          {
            "in": "query",
            "name": "worksite",
            "required": false,
            "description": "Filter by asset worksite ids",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "orchestration_obj_id",
            "required": false,
            "description": "Filter by orchestration_obj_id",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "first_seen",
            "required": false,
            "description": "Filter by first seen, expected two time values separated by comma. The time values in milliseconds since the UNIX epoch (January 1, 1970 00:00:00 UTC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "start_at",
            "required": false,
            "description": "Offset to start list from",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "max_results",
            "required": false,
            "description": "Maximum number of results to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1024
            }
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "x-nullable": true,
            "description": "Fields to sort by",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "id"
              ]
            }
          },
          {
            "in": "query",
            "name": "order_direction",
            "required": false,
            "description": "Order ascending or descending of the field sorting",
            "schema": {
              "type": "string",
              "enum": [
                "up",
                "down"
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/assets/bulk": {
      "post": {
        "tags": [
          "Assets"
        ],
        "responses": {
          "200": {
            "description": "List of created assets",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AssetBulkCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          }
        },
        "description": "Create multiple assets",
        "parameters": [
          {
            "in": "query",
            "name": "edit_if_existing",
            "required": false,
            "description": "Whether to update asset if it already exist instead of returning error",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssetCreateObject"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Assets"
        ],
        "responses": {
          "200": {
            "description": "Number of edited assets",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AssetBulkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          }
        },
        "description": "Edit multiple assets",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssetBulkEditObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4.0/assets/bulk/deactivate": {
      "post": {
        "tags": [
          "Assets"
        ],
        "responses": {
          "200": {
            "description": "Number of deactivated assets",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AssetBulkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          }
        },
        "description": "Deactivate multiple assets",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AssetObjectIdArray"
        }
      }
    },
    "/api/v4.0/assets/types": {
      "get": {
        "tags": [
          "Assets"
        ],
        "responses": {
          "200": {
            "description": "Asset ids of the desired type",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AssetObjectIdList"
                }
              }
            }
          }
        },
        "description": "Get asset ids of a specific type",
        "parameters": [
          {
            "in": "query",
            "name": "asset_type",
            "required": true,
            "example": "workstation",
            "description": "A type of asset",
            "schema": {
              "type": "string",
              "enum": [
                "workstation",
                "server",
                "k8s"
              ]
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": true,
            "example": "on",
            "description": "Current asset status (on/off/deleted), on by default",
            "schema": {
              "type": "string",
              "enum": [
                "on",
                "off",
                "deleted"
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/assets/type/set": {
      "post": {
        "tags": [
          "Assets"
        ],
        "responses": {
          "200": {
            "description": "Asset ids to set",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AssetObjectIdList"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "404": {
            "description": "Asset 'ids' not found"
          }
        },
        "description": "Set assets type field",
        "parameters": [
          {
            "in": "query",
            "name": "asset_type",
            "required": true,
            "example": "workstation",
            "description": "A type of asset",
            "schema": {
              "type": "string",
              "enum": [
                "workstation",
                "server",
                "k8s"
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AssetObjectIdList"
        }
      }
    },
    "/api/v4.0/assets/type/unset": {
      "post": {
        "tags": [
          "Assets"
        ],
        "responses": {
          "200": {
            "description": "Asset ids to unset",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AssetObjectIdList"
                }
              }
            }
          },
          "404": {
            "description": "Asset 'ids' not found"
          }
        },
        "description": "Unset assets type field",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AssetObjectIdList"
        }
      }
    },
    "/api/v4.0/visibility/label-suggestion-log": {
      "get": {
        "tags": [
          "Label Suggestion"
        ],
        "responses": {
          "200": {
            "description": "Label suggestion log object",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LabelSuggestionLogGetScheme"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "description": "Get all label suggestion logs",
        "parameters": [
          {
            "in": "query",
            "name": "from_time",
            "required": false,
            "description": "Start time of logs",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "to_time",
            "required": false,
            "description": "End time of logs",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "action",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "suggestion_received",
                "suggestion_accepted",
                "suggestion_updated",
                "suggestion_dissociated"
              ]
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Maximum number of logs",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/daily_assets_processes": {
      "get": {
        "responses": {
          "200": {
            "description": "List of daily assets processes objects",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DailyAssetsProcessesGetResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "index_day",
            "required": true,
            "example": "2023-05-06",
            "description": "Filter by day",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "example": "10",
            "description": "offset to start list from",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "max_results",
            "required": false,
            "example": "10",
            "description": "maximum number of results to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000,
              "default": 1000
            }
          },
          {
            "in": "query",
            "name": "scroll_id",
            "required": false,
            "example": "FGluY2x1ZGVfY29udGV4dF91                  dWlkDXF1ZXJ5QW5kRmV0Y2gBFlBndHMzX05L                  UVc2d1EzSGZZZ0FuR0EAAAAAAAAANxZHVjRR                  WG44NVJ4R29IeGdISzZ5VWZB",
            "description": "Scroll Id",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/incidents": {
      "post": {
        "responses": {
          "200": {
            "description": "Id of the created incident",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateIncidentResponseObject"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "406": {
            "description": "Not Acceptable"
          }
        },
        "summary": "Create incident",
        "description": "Create incident (from external provider) in Centra",
        "tags": [
          "Incidents"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncidentObject"
              }
            }
          }
        }
      }
    },
    "/api/v4.0/incidents/bulk/create": {
      "post": {
        "responses": {
          "200": {
            "description": "Ids of the created incidents",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateIncidentBulkResponseObject"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          }
        },
        "summary": "Create incident (bulk)",
        "description": "Create multiple incident (from external provider) in Centra",
        "tags": [
          "Incidents"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncidentBulkObject"
              }
            }
          }
        }
      }
    },
    "/api/v4.0/visibility/policy/rules": {
      "post": {
        "responses": {
          "200": {
            "description": "Created policy rule",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RuleId"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "summary": "Create a policy rule",
        "description": "Create a segmentation policy rule",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyRuleCreationScheme"
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "List of policy rules objects",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRulesGetResponse"
                }
              }
            }
          }
        },
        "summary": "List policy rules",
        "description": "\nList all segmentation policy rules\n<br><br>\nThe following filters are `any_side` filters for the `source` and `destination` of the rule.<br>\nOnly one of them can be used in a time:\n* **assets:**\n<br>format: `assets=<vm_id>`\n<br>example: `assets=461bf3a5-22b0-4693-8e8e-fc89807f39cc`\n* **subnets:**\n<br>format: `subnets=<subnet_or_ip>`\n<br>example: `subnets=10.0.10.0/24`\n* **Internet/NonInternet:**\n<br>format: `address_classification=<Internet|Private>`\n<br>example: `address_classification=Private`\n* **labels:**\n<br>format: `labels=<label_id>`\n<br>example: `labels=1219d8a5-6902-4c48-a2d4-82f1806605cc`\n* **label groups:**\n<br>format: `label_groups=<label_group_id>`\n<br>example: `label_groups=1219d8a5-6902-4c48-a2d4-82f1806605cc`\n* **user groups:**\n<br>format: `user_groups=<user_group_id>`\n<br>example: `user_groups=1219d8a5-6902-4c48-a2d4-82f1806605cc`\n* **processes:**\n<br>format: `processes=<process_name>`\n<br>example: `processes=apt-get`\n* **domains:**\n<br>format: `domains=<domain(s), can start with \"*.\">`\n<br>example: `domains=*.github.com`\n</ul>\nAny of the filters (except for `address_classification`) can also accept a list of terms, separated by `|`, \nwhich implies an \"or\" condition between the items.\nAny of the terms in the `label` filter can additionally be given as a list of sub-terms, separated by `>`,\nwhich implies an \"and\" condition between the sub-terms.\n<br><br>\nExamples:<br>\n* Find all rules from / to internet to one of two labels:\n<br>`?address_classification=Internet`\n* Find all rules from / to two \"or\" labels:\n <br>`?labels=2afc02e5-a3f0-45b0-a161-9db753d14900|8464e957-e082-4eb4-94fd-c9888c62f739`\n* Find all rules from / to three \"or\" and \"and\" labels:\n <br>`?labels=2afc02e5-a3f0-45b0-a161-9db753d14900|550623e8-bd2a-490c-bfaa-96b602f9a52c>8464e957-e082-4eb4-94fd-c9888c62f739`\n",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "description": "A comma-separated list (without spaces) of fields to return",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "port_ranges",
                  "last_hit",
                  "ip_protocols",
                  "state",
                  "hit_count_reset_time",
                  "icmp_matches",
                  "exclude_port_ranges",
                  "comments",
                  "scope",
                  "hit_count",
                  "author",
                  "ports",
                  "network_profile",
                  "exclude_ports",
                  "read_only",
                  "source",
                  "last_change_time",
                  "section_position",
                  "id",
                  "enabled",
                  "creation_time",
                  "attributes",
                  "destination",
                  "ruleset_name",
                  "action"
                ]
              },
              "default": ""
            }
          },
          {
            "in": "query",
            "name": "start_at",
            "required": false,
            "description": "Offset to start list from",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "max_results",
            "required": false,
            "description": "Maximum number of results to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1024,
              "default": 128
            }
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "x-nullable": true,
            "example": "creation_time,hit_count",
            "description": "A comma-separated list of fields to sort by (limited to 3 fields)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "creation_time",
                  "last_change_time",
                  "section_position",
                  "hit_count",
                  "hit_count_reset_time"
                ]
              },
              "maxItems": 3,
              "default": "section_position"
            }
          },
          {
            "in": "query",
            "name": "order_direction",
            "required": false,
            "x-nullable": true,
            "example": "up,down",
            "description": "A comma-separated list of ascending or descending order in correlation with the fields that are sent in the \"order\" parameter. Therefore, these two lists must have the same length",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "up",
                  "down"
                ]
              },
              "maxItems": 3,
              "default": "down"
            }
          },
          {
            "in": "query",
            "name": "section_position",
            "required": false,
            "description": "A comma-separated list (without spaces) of section positions to filter by",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "OVERRIDE_ALLOW",
                  "OVERRIDE_ALERT",
                  "OVERRIDE_BLOCK",
                  "ALLOW",
                  "ALERT",
                  "BLOCK"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "rule_id",
            "required": false,
            "description": "A comma-separated list (without spaces) of rule ids to filter by",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "in": "query",
            "name": "state",
            "required": false,
            "description": "A comma-separated list (without spaces) of states to filter by",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "UNCHANGED",
                  "CREATED",
                  "MODIFIED",
                  "DELETED"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "ruleset",
            "required": false,
            "description": "A comma-separated list (without spaces) of rulesets names to filter by",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "worksite",
            "required": false,
            "description": "A comma-separated list (without spaces) of worksites ids to filter by",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "assets",
            "required": false,
            "description": "Filter by assets ids, separated by '|', <br>applies to any side of the rules,<br>can use only one rule side filter at a time",
            "style": "pipeDelimited",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "in": "query",
            "name": "subnets",
            "required": false,
            "description": "Filter by subnets, separated by '|', <br>applies to any side of the rules,<br>can use only one rule side filter at a time",
            "style": "pipeDelimited",
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "in": "query",
            "name": "address_classification",
            "required": false,
            "description": "Filter by address classifications\napplies to any side of the rules,\ncan use only one rule side filter at a time",
            "schema": {
              "type": "string",
              "enum": [
                "Private",
                "Internet"
              ]
            }
          },
          {
            "in": "query",
            "name": "labels",
            "required": false,
            "description": "Filter by labels ids. or labels are separated by '|', and labels are separated by '>', <br>applies to any side of the rules,<br>can use only one rule side filter at a time",
            "style": "pipeDelimited",
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "in": "query",
            "name": "label_groups",
            "required": false,
            "description": "Filter by label groups ids, separated by '|', <br>applies to any side of the rules,<br>can use only one rule side filter at a time",
            "style": "pipeDelimited",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "in": "query",
            "name": "user_groups",
            "required": false,
            "description": "Filter by user groups ids, separated by '|', <br>applies to any side of the rules,<br>can use only one rule side filter at a time",
            "style": "pipeDelimited",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "in": "query",
            "name": "processes",
            "required": false,
            "description": "Filter by process names, separated by '|', <br>applies to any side of the rules,<br>can use only one rule side filter at a time",
            "style": "pipeDelimited",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "domains",
            "required": false,
            "description": "Filter by domain names, separated by '|', <br>applies to any side of the rules,<br>can use only one rule side filter at a time",
            "style": "pipeDelimited",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "port",
            "required": false,
            "description": "A comma-separated list of ports and port ranges to filter by.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "port__not",
            "required": false,
            "description": "A comma-separated list of ports and port ranges to exclude rules.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/visibility/policy/rules/{rule_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "policy rule object",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRuleGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "404": {
            "description": "Rule 'id' not found"
          }
        },
        "summary": "Get a policy rule",
        "description": "Get a segmentation policy rule",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "description": "A comma-separated list (without spaces) of fields to return",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "port_ranges",
                  "last_hit",
                  "ip_protocols",
                  "state",
                  "hit_count_reset_time",
                  "icmp_matches",
                  "exclude_port_ranges",
                  "comments",
                  "scope",
                  "hit_count",
                  "author",
                  "ports",
                  "network_profile",
                  "exclude_ports",
                  "read_only",
                  "source",
                  "last_change_time",
                  "section_position",
                  "id",
                  "enabled",
                  "creation_time",
                  "attributes",
                  "destination",
                  "ruleset_name",
                  "action"
                ]
              },
              "default": ""
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "Updated policy rule",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPolicyRuleScheme"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Rule 'id' not found"
          }
        },
        "summary": "Edit a policy rule",
        "description": "Edit a segmentation policy rule",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyRuleEditScheme"
              }
            }
          },
          "description": "Note: Unmodified fields should be included with their current values, otherwise they will be overridden by empty value"
        }
      }
    },
    "/api/v4.0/visibility/policy/rules/bulk": {
      "post": {
        "responses": {
          "200": {
            "description": "Created policy rules",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRulesBulkCreate"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "summary": "Create multiple policy rules",
        "description": "Create multiple segmentation policy rules",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyRuleCreationScheme"
                }
              }
            }
          }
        }
      },
      "put": {
        "responses": {
          "200": {
            "description": "Updated policy rules",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRulesBulkModify"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "500": {
            "description": "Could not complete the operation due to a server a error. See error for more details"
          }
        },
        "summary": "Edit multiple policy rules",
        "description": "Edit multiple segmentation policy rules",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyRulesBulkEditingScheme"
                }
              }
            }
          },
          "description": "Note: Unmodified fields should be included with their current values, otherwise they will be overridden by empty value"
        }
      }
    },
    "/api/v4.0/visibility/policy/rules/delete/{rule_id}": {
      "post": {
        "responses": {
          "200": {
            "description": "Deleted policy rule",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RuleId"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Rule 'id' not found"
          }
        },
        "summary": "Delete a policy rule",
        "description": "Delete a segmentation policy rule",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/visibility/policy/rules/delete/bulk": {
      "post": {
        "responses": {
          "200": {
            "description": "Delete policy rules bulk results",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRulesBulkModify"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "summary": "Delete multiple policy rules",
        "description": "Delete multiple segmentation policy rules",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyRulesBulkChangeStateSchemeArray"
        }
      }
    },
    "/api/v4.0/visibility/policy/rules/undelete/{rule_id}": {
      "post": {
        "responses": {
          "200": {
            "description": "Undeleted policy rule",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RuleId"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Rule 'id' not found"
          }
        },
        "summary": "Undelete a policy rule",
        "description": "Undelete a segmentation policy rule",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/visibility/policy/rules/undelete/bulk": {
      "post": {
        "responses": {
          "200": {
            "description": "Undelete policy rules bulk results",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRulesBulkModify"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "summary": "Undelete multiple policy rules",
        "description": "Undelete multiple segmentation policy rules",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyRulesBulkChangeStateSchemeArray"
        }
      }
    },
    "/api/v4.0/visibility/policy/rules/enable/{rule_id}": {
      "post": {
        "responses": {
          "200": {
            "description": "Enabled policy rule",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RuleId"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Rule 'id' not found"
          }
        },
        "summary": "Enable  a policy rule",
        "description": "Enable a segmentation policy rule",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/visibility/policy/rules/enable/bulk": {
      "post": {
        "responses": {
          "200": {
            "description": "Enable policy rules bulk results",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRulesBulkModify"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "summary": "Enable multiple policy rules",
        "description": "Enable multiple segmentation policy rules",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyRulesBulkChangeStateSchemeArray"
        }
      }
    },
    "/api/v4.0/visibility/policy/rules/disable/{rule_id}": {
      "post": {
        "responses": {
          "200": {
            "description": "Disabled policy rule",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RuleId"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Rule 'id' not found"
          }
        },
        "summary": "Disable a policy rule",
        "description": "Disable a segmentation policy rule",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/visibility/policy/rules/disable/bulk": {
      "post": {
        "responses": {
          "200": {
            "description": "Disable policy rules bulk results",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRulesBulkModify"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "summary": "Disable multiple policy rules",
        "description": "Disable multiple segmentation policy rules",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyRulesBulkChangeStateSchemeArray"
        }
      }
    },
    "/api/v4.0/visibility/policy/rules/revert/{rule_id}": {
      "post": {
        "responses": {
          "200": {
            "description": "Reverted policy rule",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RuleId"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Rule 'id' not found"
          },
          "406": {
            "description": "Not Acceptable"
          }
        },
        "summary": " Revert a policy rule",
        "description": "Revert changes to a segmentation policy rule",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/visibility/policy/rules/revert/bulk": {
      "post": {
        "responses": {
          "200": {
            "description": "Revert policy rules bulk results",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRulesBulkModify"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "summary": "Revert multiple policy rules",
        "description": "Revert changes to multiple segmentation policy rules",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyRulesBulkChangeStateSchemeArray"
        }
      }
    },
    "/api/v4.0/visibility/policy/rules/verdict": {
      "get": {
        "responses": {
          "200": {
            "description": "Verdict for a policy rule",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyRuleGetVerdictResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          }
        },
        "summary": "Verdict for a policy rule",
        "description": "Returns a verdict and the rule id",
        "tags": [
          "Policy Rules"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "src_ip",
            "required": true,
            "description": "Source IP address",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dst_ip",
            "required": true,
            "description": "Destination IP address",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "port",
            "required": true,
            "description": "Rule port",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535
            }
          },
          {
            "in": "query",
            "name": "protocol",
            "required": true,
            "description": "Rule protocol",
            "schema": {
              "type": "string",
              "enum": [
                "Tcp",
                "Udp"
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/visibility/policy/revisions": {
      "post": {
        "responses": {
          "200": {
            "description": "Published revision",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RevisionResponse"
                }
              }
            }
          },
          "400": {
            "description": "No rule has been changed since last published revision"
          },
          "500": {
            "description": "Could not complete the operation due to a server a error. See error for more details"
          },
          "504": {
            "description": "Request timeout"
          }
        },
        "summary": "Publish segmentation policy changes",
        "description": "Publish segmentation policy changes",
        "tags": [
          "Policy Revisions"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevisionPostRequest"
              }
            }
          }
        }
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Discarded segmentation policy changes"
          },
          "400": {
            "description": "No rule has been changed since last published revision"
          },
          "500": {
            "description": "Could not complete the operation due to a server a error. See error for more details"
          }
        },
        "summary": "Discard segmentation policy changes",
        "description": "Discards all currently suggested segmentation policy changes",
        "tags": [
          "Policy Revisions"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/visibility/policy/revisions/revert": {
      "post": {
        "responses": {
          "200": {
            "description": "Revert to revision",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RevisionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "500": {
            "description": "Could not complete the operation due to a server a error. See error for more details"
          },
          "504": {
            "description": "Request timeout"
          }
        },
        "summary": "Revert segmentation policy",
        "description": "Revert to a specific segmentation policy revision",
        "tags": [
          "Policy Revisions"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevertToRevisionPostRequest"
              }
            }
          }
        }
      }
    },
    "/api/v4.0/dns_security": {
      "post": {
        "tags": [
          "DNS Security"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistIdObject"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          }
        },
        "description": "Create a DNS blocklist",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDnsBlocklistObject"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "DNS Security"
        ],
        "responses": {
          "200": {
            "description": "List of DNS blocklist objects",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DnsBlocklistList"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          }
        },
        "description": "List DNS blocklists",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "required": false,
            "x-nullable": true,
            "description": "Search blocklists with given IDs. Format: comma-separated list of IDs",
            "example": null,
            "schema": {
              "type": "string",
              "default": []
            }
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "x-nullable": true,
            "description": "Search blocklists of given types. Format: comma-separated list of blocklist types. Possible type values: GC_BLOCKLIST,CUSTOM_BLOCKLIST,EXCLUSION_LIST",
            "example": null,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "x-nullable": true,
            "description": "Case-insensitive search blocklists whose names contain the given filter",
            "example": null,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "in": "query",
            "name": "domain",
            "required": false,
            "x-nullable": true,
            "description": "Search blocklists whose domains contain the given filter",
            "example": null,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "in": "query",
            "name": "start_at",
            "required": false,
            "x-nullable": true,
            "description": "Offset to start list from",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "max_results",
            "required": false,
            "x-nullable": true,
            "description": "Maximum number of results",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 128
            }
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "x-nullable": true,
            "description": "Fields to sort by",
            "example": null,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "in": "query",
            "name": "order_direction",
            "required": false,
            "x-nullable": true,
            "description": "Order ascending or descending of the field sorting",
            "example": null,
            "schema": {
              "type": "string",
              "default": "down"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "x-nullable": true,
            "description": "A comma-separated list of field names to return",
            "example": null,
            "schema": {
              "type": "string",
              "default": []
            }
          },
          {
            "in": "query",
            "name": "domains_limit",
            "required": false,
            "x-nullable": true,
            "description": "Specifies the max number of fetched domains. if -1, all the domains are fetched",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 128
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/dns_security/{list_id}": {
      "patch": {
        "tags": [
          "DNS Security"
        ],
        "responses": {
          "200": {
            "description": "DNS blocklist ID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistIdObject"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "blocklist 'id' not found"
          }
        },
        "description": "Edit a DNS blocklist",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "list_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditDnsBlocklistObject"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DNS Security"
        ],
        "responses": {
          "200": {
            "description": "DNS blocklist ID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistIdObject"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "blocklist 'id' not found"
          }
        },
        "description": "Delete a DNS blocklist",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "list_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "DNS Security"
        ],
        "responses": {
          "200": {
            "description": "DNS blocklist objects",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DnsBlocklistObject"
                }
              }
            }
          },
          "404": {
            "description": "blocklist 'id' not found"
          }
        },
        "description": "Get a DNS blocklist details",
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "x-nullable": true,
            "description": "A comma-separated list of field names to return",
            "example": null,
            "schema": {
              "type": "string",
              "default": []
            }
          },
          {
            "in": "query",
            "name": "domains_limit",
            "required": false,
            "x-nullable": true,
            "description": "Specifies the max number of fetched domains. if -1, all the domains are fetched",
            "example": null,
            "schema": {
              "type": "integer",
              "default": 128
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "list_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/dns_security/bulk": {
      "post": {
        "tags": [
          "DNS Security"
        ],
        "responses": {
          "200": {
            "description": "DNS blocklist ID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BulkCreateDnsBlocklistResponseObject"
                }
              }
            }
          }
        },
        "description": "Bulk create of DNS blocklists",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreateDnsBlocklistObject"
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DNS Security"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BulkEditDnsBlocklistResponse"
                }
              }
            }
          }
        },
        "description": "Bulk edit of DNS blocklists",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkEditDnsBlocklistRequestObject"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DNS Security"
        ],
        "responses": {
          "200": {
            "description": "DNS blocklist ID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BulkEditDnsBlocklistResponse"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "description": "Bulk delete of DNS blocklists",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "required": false,
            "x-nullable": true,
            "description": "A comma-separated list of field names to return",
            "example": null,
            "schema": {
              "type": "string",
              "default": []
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/dns_security/{list_id}/hits": {
      "delete": {
        "tags": [
          "DNS Security"
        ],
        "responses": {
          "200": {
            "description": "DNS blocklist ID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistIdObject"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "blocklist 'id' not found"
          }
        },
        "description": "Reset DNS blocklist hits counter",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "list_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/dns_security/hits/bulk": {
      "delete": {
        "tags": [
          "DNS Security"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BulkEditDnsBlocklistResponse"
                }
              }
            }
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "description": "Bulk reset of DNS blocklist hit counters",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "required": false,
            "x-nullable": true,
            "description": "A comma-separated list of field names to return",
            "example": null,
            "schema": {
              "type": "string",
              "default": []
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/saved-maps": {
      "post": {
        "tags": [
          "Saved Maps"
        ],
        "responses": {
          "200": {
            "description": "Saved map id",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SavedMapObjectId"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "500": {
            "description": "Could not complete the operation due to a server a error. See error for more details"
          }
        },
        "description": "Create saved map",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavedMapCreateObject"
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "List of saved map objects",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SavedMapsGetResponse"
                }
              }
            }
          }
        },
        "summary": "List saved maps",
        "description": "Get a list of saved maps",
        "tags": [
          "Saved Maps"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_at",
            "required": false,
            "example": 1,
            "description": "Offset to start list from",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "max_results",
            "required": false,
            "example": 100,
            "description": "Maximum number of results to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1024,
              "default": 128
            }
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "x-nullable": true,
            "example": "id,name",
            "description": "A comma-separated list of fields to sort by (limited to 3 fields)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "error",
                  "map_size",
                  "map_type",
                  "time_resolution",
                  "state",
                  "start_time_filter",
                  "id",
                  "map_scope",
                  "name",
                  "creation_time",
                  "last_access_time",
                  "include_incident_marks",
                  "storage_size_bytes",
                  "end_time_filter",
                  "author",
                  "filters",
                  "include_flow_hit_count",
                  "email_on_progress"
                ]
              },
              "maxItems": 3,
              "default": "creation_time"
            }
          },
          {
            "in": "query",
            "name": "order_direction",
            "required": false,
            "x-nullable": true,
            "example": "up,down",
            "description": "A comma-separated list of ascending or descending order in correlation with the fields that are sent in the \"order\" parameter. Therefore, these two lists must have the same length",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "up",
                  "down"
                ]
              },
              "maxItems": 3,
              "default": "down"
            }
          },
          {
            "in": "query",
            "name": "author_id",
            "required": false,
            "example": "640503251a488a7c4de7b3a8",
            "description": "Filter by author id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "search",
            "required": false,
            "example": "Custom map name",
            "description": "Filter by partial name or id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "state",
            "required": false,
            "example": "READY",
            "description": "Filter by map state",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "READY",
                  "IN_PROGRESS",
                  "QUEUED",
                  "CANCELED",
                  "FAILED",
                  "EMPTY",
                  "PREQUEUED",
                  "IN_DELETION"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "features",
            "required": false,
            "example": "time_resolution",
            "description": "Filter by map features (Exact Connection Times, Connection Occurrences Count, Highlight Incident Flows)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "include_flow_hit_count",
                  "time_resolution",
                  "include_incident_marks"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "included_label_ids",
            "required": false,
            "example": "1f458402-401e-4f5b-b867-7f7b4bcd3c12,a4eb4b1b-c348-4d06-8553-8e5b16a72059",
            "description": "Filter saved map by map's filtered labels",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "in": "query",
            "name": "time_range_filter",
            "required": false,
            "example": "1521898020000,1524492059999",
            "description": "Filter by a time range of start time and end time, expected two time values separated by comma. Supported date formats: UNIX epoch - `1521898020000`, RFC-3339 - `2022-04-14T12:34:56.789012Z`, ISO-8601 - `2022-04-14T12:34:56.789012`, ISO-8601 without milliseconds - `2022-05-01T14:30:00`",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              },
              "minItems": 2,
              "maxItems": 2
            }
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "x-nullable": true,
            "example": "id,name",
            "description": "A comma-separated list of field names to return",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "error",
                  "map_size",
                  "map_type",
                  "time_resolution",
                  "state",
                  "start_time_filter",
                  "id",
                  "map_scope",
                  "name",
                  "creation_time",
                  "last_access_time",
                  "include_incident_marks",
                  "storage_size_bytes",
                  "end_time_filter",
                  "author",
                  "filters",
                  "include_flow_hit_count",
                  "email_on_progress"
                ]
              },
              "default": ""
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/saved-maps/{saved_map_id}": {
      "delete": {
        "tags": [
          "Saved Maps"
        ],
        "responses": {
          "200": {
            "description": "Result successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Could not complete the operation due to a server a error. See error for more details"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Saved Map 'id' not found"
          }
        },
        "description": "Delete specific saved map",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "saved_map_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/saved-maps/{saved_map_id}/cancel": {
      "post": {
        "tags": [
          "Saved Maps"
        ],
        "responses": {
          "200": {
            "description": "Result successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Could not complete the operation due to a server a error. See error for more details"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "Saved Map 'id' not found"
          }
        },
        "description": "Cancel saved map creation",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "saved_map_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/daily_connections/task": {
      "post": {
        "summary": "Start a task for collection of daily connections per a requested day",
        "tags": [
          "Daily Connections Task"
        ],
        "responses": {
          "200": {
            "description": "Started New task for querying daily connections",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DailyConnectionTaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "DailyConnectionsPG 'id' not found"
          },
          "503": {
            "description": "Could not complete the operation due to a server a error. See error for more details"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DailyConnectionTaskCreate"
              }
            }
          }
        }
      }
    },
    "/api/v4.0/daily_connections/task/{task_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Get status of a running task",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DailyConnectionTaskStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "DailyConnectionsTask 'id' not found"
          }
        },
        "summary": "Get status of a daily connection query task",
        "description": "Get status of a daily connection query task started with POST daily_connections task API",
        "tags": [
          "Daily Connections Task"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "task_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/daily_connections/task/{task_id}/download": {
      "get": {
        "responses": {
          "404": {
            "description": "DailyConnectionsTask.file_name 'id' not found"
          }
        },
        "summary": "Download file from a DONE task",
        "description": "Download the gzip file output of a daily connection query task started with POST daily_connections task API",
        "tags": [
          "Daily Connections Task"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "task_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/worksites": {
      "post": {
        "responses": {
          "200": {
            "description": "Worksite create response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWorksiteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "500": {
            "description": "Unknown error"
          }
        },
        "summary": "Create a Worksite",
        "description": "Create a Worksite in Centra or by external provider",
        "tags": [
          "Worksites"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorksiteRequest"
              }
            }
          }
        }
      },
      "put": {
        "responses": {
          "200": {
            "description": "Empty response",
            "content": {
              "*/*": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "500": {
            "description": "Unknown error"
          }
        },
        "summary": "Comment added/ edited in Worksite",
        "description": "Comment added/ edited in Worksite in Centra or by external provider",
        "tags": [
          "Worksites"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorksiteRequestPayload"
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Worksites objects",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveWorksiteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "500": {
            "description": "Unknown error"
          }
        },
        "summary": "Retrieve Worksites",
        "description": "Retrieve Worksites in Centra or by external provider",
        "tags": [
          "Worksites"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "modified",
            "required": false,
            "example": "1691442000000,1691787540000",
            "description": "Pair of Epoch values indicating the beginning and the end of the time range, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "author_id",
            "required": false,
            "example": "5442a92e54d2a4c433ed55a,334242a92e54d2a4c4525523",
            "description": "Author IDs separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "kubernetes_cluster",
            "required": false,
            "example": "63aaba92e54d2a4c433ed55a,63aaba92e54d2a4c433ed55a",
            "description": "Filter by K8s clusters, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "agent",
            "required": false,
            "example": "b3eb26fb-84e0-4c3a-a756-89998dd469e9,28fd13a2-8d75-4e04-8a5b-7a21a15c59a9",
            "description": "Filter by Agents, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "rule",
            "required": false,
            "example": "assigned,unassigned",
            "description": "Filter by assigned or unassigned rules",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "asset",
            "required": false,
            "example": "78fd13a3-84e0-4c3a-a756-89998dd469e9,a4eb46fb-8d75-4e04-8a5b-7a21a15c59a9",
            "description": "Filter by Assets, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "gc_filter",
            "required": false,
            "example": "name of filter",
            "description": "The filter is used as free text",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "example": 0,
            "description": "The offset of the results that will return in the request",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "example": 20,
            "description": "The limit of the results that will return in the request",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "is_sync",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "x-nullable": true,
            "example": "name",
            "description": "A field to order results by (limited to 1 field)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "name",
                  "agents",
                  "assets",
                  "rules",
                  "author_id",
                  "modified_time"
                ]
              },
              "maxItems": 1
            }
          },
          {
            "in": "query",
            "name": "order_direction",
            "required": false,
            "x-nullable": true,
            "example": "up,down",
            "description": "A field of ascending or descending order in correlation with the fields that are sent in the \"order\" parameter. (limited to 1 field)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "up",
                  "down"
                ]
              },
              "maxItems": 1
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/worksites/export": {
      "get": {
        "responses": {
          "200": {
            "description": "Export Task ID",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/WorksitesExportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "500": {
            "description": "Unknown error"
          }
        },
        "summary": "Export Worksites",
        "description": "Export Worksites in Centra",
        "tags": [
          "Worksites"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "modified",
            "required": false,
            "example": "1691442000000,1691787540000",
            "description": "Pair of Epoch values indicating the beginning and the end of the time range, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "author_id",
            "required": false,
            "example": "5442a92e54d2a4c433ed55a,334242a92e54d2a4c4525523",
            "description": "Author IDs separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "kubernetes_cluster",
            "required": false,
            "example": "63aaba92e54d2a4c433ed55a,63aaba92e54d2a4c433ed55a",
            "description": "Filter by K8s clusters, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "agent",
            "required": false,
            "example": "b3eb26fb-84e0-4c3a-a756-89998dd469e9,28fd13a2-8d75-4e04-8a5b-7a21a15c59a9",
            "description": "Filter by Agents, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "rule",
            "required": false,
            "example": "assigned,unassigned",
            "description": "Filter by assigned or unassigned rules",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "asset",
            "required": false,
            "example": "78fd13a3-84e0-4c3a-a756-89998dd469e9,a4eb46fb-8d75-4e04-8a5b-7a21a15c59a9",
            "description": "Filter by Assets, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "gc_filter",
            "required": false,
            "example": "name of filter",
            "description": "The filter is used as free text",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "example": 0,
            "description": "The offset of the results that will return in the request",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "example": 20,
            "description": "The limit of the results that will return in the request",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "is_sync",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/worksites/delete_worksites": {
      "post": {
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteWorksitesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "500": {
            "description": "Unknown error"
          }
        },
        "summary": "Bulk delete Worksites",
        "description": "Delete Worksites in bulk in Centra or by external provider",
        "tags": [
          "Worksites"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteWorksitesRequest"
              }
            }
          }
        }
      }
    },
    "/api/v4.0/worksites/filter-options": {
      "get": {
        "summary": "Retrieve Worksites filter options",
        "responses": {
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "description": "Retrieve Worksites filter options in Centra or by external provider",
        "parameters": [
          {
            "in": "query",
            "name": "modified",
            "required": false,
            "example": "1691442000000,1691787540000",
            "description": "Pair of Epoch values indicating the beginning and the end of the time range, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "author_id",
            "required": false,
            "example": "5442a92e54d2a4c433ed55a,334242a92e54d2a4c4525523",
            "description": "Author IDs separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "kubernetes_cluster",
            "required": false,
            "example": "63aaba92e54d2a4c433ed55a,63aaba92e54d2a4c433ed55a",
            "description": "Filter by K8s clusters, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "agent",
            "required": false,
            "example": "b3eb26fb-84e0-4c3a-a756-89998dd469e9,28fd13a2-8d75-4e04-8a5b-7a21a15c59a9",
            "description": "Filter by Agents, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "rule",
            "required": false,
            "example": "assigned,unassigned",
            "description": "Filter by assigned or unassigned rules",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "asset",
            "required": false,
            "example": "78fd13a3-84e0-4c3a-a756-89998dd469e9,a4eb46fb-8d75-4e04-8a5b-7a21a15c59a9",
            "description": "Filter by Assets, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "gc_filter",
            "required": false,
            "example": "name of filter",
            "description": "The filter is used as free text",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "example": 0,
            "description": "The offset of the results that will return in the request",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "example": 20,
            "description": "The limit of the results that will return in the request",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filter_name",
            "required": true,
            "description": "Name of the filter",
            "example": "asset",
            "schema": {
              "type": "string",
              "enum": [
                "author_id",
                "asset",
                "agent",
                "rule",
                "kubernetes_cluster",
                "modified"
              ]
            }
          },
          {
            "in": "query",
            "name": "filter_value",
            "required": false,
            "description": "Filter value that will filter results",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/worksites/filter-options-resolve": {
      "get": {
        "summary": "Retrieve Worksites filter options resolve",
        "responses": {
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "description": "Retrieve Worksites filter options resolve in Centra or by external provider",
        "parameters": [
          {
            "in": "query",
            "name": "modified",
            "required": false,
            "example": "1691442000000,1691787540000",
            "description": "Pair of Epoch values indicating the beginning and the end of the time range, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "author_id",
            "required": false,
            "example": "5442a92e54d2a4c433ed55a,334242a92e54d2a4c4525523",
            "description": "Author IDs separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "kubernetes_cluster",
            "required": false,
            "example": "63aaba92e54d2a4c433ed55a,63aaba92e54d2a4c433ed55a",
            "description": "Filter by K8s clusters, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "agent",
            "required": false,
            "example": "b3eb26fb-84e0-4c3a-a756-89998dd469e9,28fd13a2-8d75-4e04-8a5b-7a21a15c59a9",
            "description": "Filter by Agents, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "rule",
            "required": false,
            "example": "assigned,unassigned",
            "description": "Filter by assigned or unassigned rules",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "asset",
            "required": false,
            "example": "78fd13a3-84e0-4c3a-a756-89998dd469e9,a4eb46fb-8d75-4e04-8a5b-7a21a15c59a9",
            "description": "Filter by Assets, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "gc_filter",
            "required": false,
            "example": "name of filter",
            "description": "The filter is used as free text",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "example": 0,
            "description": "The offset of the results that will return in the request",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "example": 20,
            "description": "The limit of the results that will return in the request",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "x-nullable": true,
            "example": "name",
            "description": "A field to order results by (limited to 1 field)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "name",
                  "agents",
                  "assets",
                  "rules",
                  "author_id",
                  "modified_time"
                ]
              },
              "maxItems": 1
            }
          },
          {
            "in": "query",
            "name": "order_direction",
            "required": false,
            "x-nullable": true,
            "example": "up,down",
            "description": "A field of ascending or descending order in correlation with the fields that are sent in the \"order\" parameter. (limited to 1 field)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "up",
                  "down"
                ]
              },
              "maxItems": 1
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/agents": {
      "get": {
        "responses": {
          "200": {
            "description": "List of Agents objects",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AgentsGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "500": {
            "description": "Could not complete the operation due to a server a error. See error for more details"
          }
        },
        "summary": "List Agents",
        "description": "Get a list of Agents",
        "tags": [
          "Agents"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "example": 1,
            "description": "The offset from which to begin the list",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "example": 100,
            "description": "Maximum number of results to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1024,
              "default": 128
            }
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "x-nullable": true,
            "example": "agent_version,first_seen",
            "description": "A comma-separated list of fields by which to sort (limited to 3 fields)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "agent_version",
                  "first_seen",
                  "last_seen",
                  "display_name"
                ]
              },
              "maxItems": 3,
              "default": "display_name"
            }
          },
          {
            "in": "query",
            "name": "order_direction",
            "required": false,
            "x-nullable": true,
            "example": "up,down",
            "description": "A comma-separated list of ascending or descending order in correlation with the fields that are sent in the \"order\" parameter. Therefore, these two lists must have the same length",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "up",
                  "down"
                ]
              },
              "maxItems": 3,
              "default": "down"
            }
          },
          {
            "in": "query",
            "name": "activity",
            "required": false,
            "example": "LAST_MONTH",
            "description": "A comma-separated list of Agent activity by which to filter by",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "LAST_MONTH",
                  "LAST_WEEK",
                  "LAST_12_HOURS",
                  "LAST_24_HOURS",
                  "NOT_ACTIVE"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "agent_version",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "5.49.23182.28537",
                "description": "A comma-separated list of Agent versions by which to filter"
              }
            }
          },
          {
            "in": "query",
            "name": "centra_instance",
            "required": false,
            "example": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
            "description": "Filter by Centra instance ID. Note: only available in Centra Cluster Management",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "enforcement_mode",
            "required": false,
            "example": "ENFORCING",
            "description": "A comma-separated list of Enforcement modes by which to filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "DISABLED",
                  "ENFORCING",
                  "STOPPED",
                  "NOT_INSTALLED",
                  "ERROR",
                  "MONITORING",
                  "REVEAL_ONLY"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "x-nullable": true,
            "example": "id,display_name",
            "description": "A comma-separated list of field names to return",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "admin_lock_state",
                  "encryption_status",
                  "agent_id",
                  "agent_version",
                  "asset_id",
                  "configuration",
                  "display_name",
                  "distribution",
                  "first_seen",
                  "health",
                  "hostname",
                  "install_date",
                  "installation_profile",
                  "installed_modules",
                  "ip_addresses",
                  "kernel",
                  "kernel_config_hash",
                  "labels",
                  "label_groups",
                  "last_seen",
                  "last_upgrade_error",
                  "last_upgrade_status",
                  "last_upgrade_time",
                  "modules_supported_features",
                  "os",
                  "supported_features",
                  "status_flags"
                ]
              },
              "default": ""
            }
          },
          {
            "in": "query",
            "name": "first_seen",
            "required": false,
            "example": "0,1524492059999",
            "description": "Filter by the time range when the Agent was first seen. Provides two timestamp values separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              },
              "minItems": 2,
              "maxItems": 2
            }
          },
          {
            "in": "query",
            "name": "install_date",
            "required": false,
            "example": "0,1524492059999",
            "description": "Filter by the beginning and end of the Agent installation. Provides two timestamp values separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              },
              "minItems": 2,
              "maxItems": 2
            }
          },
          {
            "in": "query",
            "name": "kernel",
            "required": false,
            "example": "6.2",
            "description": "Agent kernel version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "label_groups",
            "required": false,
            "example": "7dd77960-f8ca-49c3-8580-b6c330c3059d,60-f8ca-49c3-8580-b6c330c3059d7dd779",
            "description": "Filter by Label group IDs separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "in": "query",
            "name": "labels",
            "required": false,
            "example": "7dd77960-f8ca-49c3-8580-b6c330c3059d>60-f8ca-49c3-8580-b6c330c3059d7dd779",
            "description": "Filter by labels IDs. \"OR\" labels are separated by a comma (“,”), \"AND\" labels are separated by (\"'>'\")",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "in": "query",
            "name": "last_seen",
            "required": false,
            "example": "0,1524492059999",
            "description": "Filter by the time range when the Agent was last seen. Provides two timestamp values separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              },
              "minItems": 2,
              "maxItems": 2
            }
          },
          {
            "in": "query",
            "name": "module_status_deception",
            "required": false,
            "example": "RUNNING,DISABLED",
            "description": "Filter by module status",
            "schema": {
              "type": "string",
              "enum": [
                "NOT_INSTALLED",
                "DISABLED",
                "UNKNOWN",
                "INITIALIZING",
                "RUNNING",
                "STOPPED",
                "ERROR",
                "STOPPING",
                "ASSETSHUTDOWN"
              ]
            }
          },
          {
            "in": "query",
            "name": "module_status_detection",
            "required": false,
            "example": "RUNNING,DISABLED",
            "description": "Filter by module status",
            "schema": {
              "type": "string",
              "enum": [
                "NOT_INSTALLED",
                "DISABLED",
                "UNKNOWN",
                "INITIALIZING",
                "RUNNING",
                "STOPPED",
                "ERROR",
                "STOPPING",
                "ASSETSHUTDOWN"
              ]
            }
          },
          {
            "in": "query",
            "name": "module_status_enforcement",
            "required": false,
            "example": "RUNNING,DISABLED",
            "description": "Filter by module status",
            "schema": {
              "type": "string",
              "enum": [
                "NOT_INSTALLED",
                "DISABLED",
                "UNKNOWN",
                "INITIALIZING",
                "RUNNING",
                "STOPPED",
                "ERROR",
                "STOPPING",
                "ASSETSHUTDOWN"
              ]
            }
          },
          {
            "in": "query",
            "name": "module_status_reveal",
            "required": false,
            "example": "RUNNING,DISABLED",
            "description": "Filter by module status",
            "schema": {
              "type": "string",
              "enum": [
                "NOT_INSTALLED",
                "DISABLED",
                "UNKNOWN",
                "INITIALIZING",
                "RUNNING",
                "STOPPED",
                "ERROR",
                "STOPPING",
                "ASSETSHUTDOWN"
              ]
            }
          },
          {
            "in": "query",
            "name": "os",
            "required": false,
            "example": "WINDOWS,LINUX",
            "description": "A comma-separated list of Agent Operating Systems by which to filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "UNKNOWN",
                  "WINDOWS",
                  "LINUX",
                  "HTTP",
                  "SMBLURE",
                  "SOLARIS",
                  "HPUX",
                  "AIX",
                  "F5",
                  "FREEBSD",
                  "LPAR",
                  "MACOS"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "search",
            "required": false,
            "example": "WindowsAgent",
            "description": "Filter Agent by partial name, ID or IP",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "example": "ONLINE",
            "description": "Filter by Agent status",
            "schema": {
              "type": "string",
              "enum": [
                "ONLINE",
                "OFFLINE"
              ]
            }
          },
          {
            "in": "query",
            "name": "alerts",
            "required": false,
            "example": "LimitedPolicy",
            "description": "A comma-separated list of Agent severity flags in 'alert' status by which to filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "PollingMode",
                  "OutdatedPolicy",
                  "OutdatedConfiguration",
                  "NoRevealReceived",
                  "HighDropRate",
                  "AgentMissing",
                  "PartialPolicy",
                  "EnforcementPaused",
                  "NoRevealReported",
                  "RevealOffline",
                  "EnforcementOffline",
                  "RevealModuleError",
                  "EnforcementModuleError",
                  "DetectionModuleError",
                  "DeceptionModuleError",
                  "ControllerModuleError",
                  "NoResourceLimits",
                  "MemoryLimitReached",
                  "RevealMemoryLimitReached",
                  "EnforcementMemoryLimitReached",
                  "DetectionMemoryLimitReached",
                  "DeceptionMemoryLimitReached",
                  "ControllerMemoryLimitReached",
                  "LimitedPolicy",
                  "EnforcementModeRevealOnly",
                  "EnforcementModeMonitoring",
                  "ConfigurationPartiallyApplied",
                  "EnforcementMissingKO",
                  "DeceptionMissingKO",
                  "DeprecatedAgentFlagUsed",
                  "DeceptionRedirectionChannelError",
                  "DeceptionLimitedCapabilities",
                  "SecuritySoftwareDetected",
                  "PartiallySupportedInstallation",
                  "DNSSecurityOutdated",
                  "OrchestrationError",
                  "HighPerformanceHWProperties",
                  "PartialRevealReported",
                  "EnforcementMetricsOnlyMode",
                  "SyslogServerRestartFailure",
                  "RevealDisabled",
                  "OperationRequestFailed",
                  "RevealAgentWarning",
                  "RevealAgentError",
                  "K8sCniNotSupported",
                  "K8sEnforcementDisabled",
                  "ConflictingNetworkInterfaceDetected",
                  "CertificateAboutToExpire",
                  "K8sEnforcementOffline",
                  "AgentUninstalled",
                  "AssetShutdown",
                  "AgentStopped",
                  "CloudAppNoConnectivity",
                  "CloudAppOnBoardingFailed",
                  "OutdatedUserIdentityPolicy",
                  "AccessModuleError",
                  "AccessMemoryLimitReached",
                  "AccessModuleBrokerDisconnected",
                  "ApiVersionMismatch",
                  "EncryptionError",
                  "EncryptionSetupError",
                  "EncryptionUpdateError"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "info",
            "required": false,
            "example": "LimitedPolicy",
            "description": "A comma-separated list of Agent severity flags in 'info' status which to filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "PollingMode",
                  "OutdatedPolicy",
                  "OutdatedConfiguration",
                  "NoRevealReceived",
                  "HighDropRate",
                  "AgentMissing",
                  "PartialPolicy",
                  "EnforcementPaused",
                  "NoRevealReported",
                  "RevealOffline",
                  "EnforcementOffline",
                  "RevealModuleError",
                  "EnforcementModuleError",
                  "DetectionModuleError",
                  "DeceptionModuleError",
                  "ControllerModuleError",
                  "NoResourceLimits",
                  "MemoryLimitReached",
                  "RevealMemoryLimitReached",
                  "EnforcementMemoryLimitReached",
                  "DetectionMemoryLimitReached",
                  "DeceptionMemoryLimitReached",
                  "ControllerMemoryLimitReached",
                  "LimitedPolicy",
                  "EnforcementModeRevealOnly",
                  "EnforcementModeMonitoring",
                  "ConfigurationPartiallyApplied",
                  "EnforcementMissingKO",
                  "DeceptionMissingKO",
                  "DeprecatedAgentFlagUsed",
                  "DeceptionRedirectionChannelError",
                  "DeceptionLimitedCapabilities",
                  "SecuritySoftwareDetected",
                  "PartiallySupportedInstallation",
                  "DNSSecurityOutdated",
                  "OrchestrationError",
                  "HighPerformanceHWProperties",
                  "PartialRevealReported",
                  "EnforcementMetricsOnlyMode",
                  "SyslogServerRestartFailure",
                  "RevealDisabled",
                  "OperationRequestFailed",
                  "RevealAgentWarning",
                  "RevealAgentError",
                  "K8sCniNotSupported",
                  "K8sEnforcementDisabled",
                  "ConflictingNetworkInterfaceDetected",
                  "CertificateAboutToExpire",
                  "K8sEnforcementOffline",
                  "AgentUninstalled",
                  "AssetShutdown",
                  "AgentStopped",
                  "CloudAppNoConnectivity",
                  "CloudAppOnBoardingFailed",
                  "OutdatedUserIdentityPolicy",
                  "AccessModuleError",
                  "AccessMemoryLimitReached",
                  "AccessModuleBrokerDisconnected",
                  "ApiVersionMismatch",
                  "EncryptionError",
                  "EncryptionSetupError",
                  "EncryptionUpdateError"
                ]
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/visibility/graph": {
      "post": {
        "responses": {
          "200": {
            "description": "Visibility Flows",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VisibilityGraphResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "500": {
            "description": "Could not complete the operation due to a server a error. See error for more details"
          },
          "504": {
            "description": "Request timeout"
          }
        },
        "summary": "List visibility flows",
        "description": "Get flows and nodes from a saved map , filtered and grouped by a number of criteria",
        "tags": [
          "Reveal Flows"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisibilityGraphRequestObject"
              }
            }
          }
        }
      }
    },
    "/api/v4.0/visibility/user-groups": {
      "post": {
        "responses": {
          "200": {
            "description": "User Groups objects",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          }
        },
        "summary": "Create a User Group",
        "description": "Create a User Group",
        "tags": [
          "User Groups"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserGroupCreationRequest"
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "List of User Groups objects",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupsGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          }
        },
        "summary": "List User Groups",
        "description": "Get a list of User Groups",
        "tags": [
          "User Groups"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "example": 0,
            "description": "The offset from which to begin the list",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "example": 100,
            "description": "The maximum number of results to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1024,
              "default": 128
            }
          },
          {
            "in": "query",
            "name": "orchestration",
            "required": false,
            "example": "34238-5a58-4aeb-b05c-91366dd66bc9",
            "description": "A comma-separated list of orchestration IDS by which to filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "active_directory_group",
            "required": false,
            "example": "34238-5a58-4aeb-b05c-91366dd66bc9",
            "description": "A comma-separated list of active directory group IDS by which to filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "search",
            "required": false,
            "example": "34238-5a58-4aeb-b05c-91366dd66bc9",
            "description": "User group title or ID by which to filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "x-nullable": true,
            "example": "id,display_name",
            "description": "A comma-separated list of field names to return",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "groups_by_domain_name",
                  "state",
                  "id",
                  "creation_time",
                  "title",
                  "last_change_time",
                  "author"
                ]
              },
              "default": ""
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/visibility/user-groups/{user_group_id}": {
      "put": {
        "responses": {
          "200": {
            "description": "User Group object",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupsObject"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "User Group 'ids' not found"
          }
        },
        "summary": "Edit a User Group",
        "description": "Edit a User Group",
        "tags": [
          "User Groups"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "user_group_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UserGroupCreationRequest"
        }
      },
      "delete": {
        "responses": {
          "200": {
            "description": "User Group Object",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "404": {
            "description": "User Group 'ids' not found"
          }
        },
        "summary": "Delete a User Group",
        "description": "Delete a User Group",
        "tags": [
          "User Groups"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "user_group_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/worksites/selected": {
      "get": {
        "summary": "Get list of selected worksites",
        "responses": {
          "200": {
            "description": "Worksites id, name pairs",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorksiteItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "500": {
            "description": "Unknown error"
          }
        },
        "description": "Get list of selected worksites",
        "parameters": [
          {
            "in": "query",
            "name": "modified",
            "required": false,
            "example": "1691442000000,1691787540000",
            "description": "Pair of Epoch values indicating the beginning and the end of the time range, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "in": "query",
            "name": "author_id",
            "required": false,
            "example": "5442a92e54d2a4c433ed55a,334242a92e54d2a4c4525523",
            "description": "Author IDs separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "kubernetes_cluster",
            "required": false,
            "example": "63aaba92e54d2a4c433ed55a,63aaba92e54d2a4c433ed55a",
            "description": "Filter by K8s clusters, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "agent",
            "required": false,
            "example": "b3eb26fb-84e0-4c3a-a756-89998dd469e9,28fd13a2-8d75-4e04-8a5b-7a21a15c59a9",
            "description": "Filter by Agents, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "rule",
            "required": false,
            "example": "assigned,unassigned",
            "description": "Filter by assigned or unassigned rules",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "asset",
            "required": false,
            "example": "78fd13a3-84e0-4c3a-a756-89998dd469e9,a4eb46fb-8d75-4e04-8a5b-7a21a15c59a9",
            "description": "Filter by Assets, separated by a comma (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "gc_filter",
            "required": false,
            "example": "name of filter",
            "description": "The filter is used as free text",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "example": 0,
            "description": "The offset of the results that will return in the request",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "example": 20,
            "description": "The limit of the results that will return in the request",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "is_sync",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "unselected",
            "required": false,
            "example": "78fd13a3-84e0-4c3a-a756-89998dd469e9,a4eb46fb-8d75-4e04-8a5b-7a21a15c59a9",
            "description": "Filter out unselected Worksite IDs (“,”)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "x-nullable": true,
            "example": "name",
            "description": "A field to order results by (limited to 1 field)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "name",
                  "agents",
                  "assets",
                  "rules",
                  "author_id",
                  "modified_time"
                ]
              },
              "maxItems": 1
            }
          },
          {
            "in": "query",
            "name": "order_direction",
            "required": false,
            "x-nullable": true,
            "example": "up,down",
            "description": "A field of ascending or descending order in correlation with the fields that are sent in the \"order\" parameter. (limited to 1 field)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "up",
                  "down"
                ]
              },
              "maxItems": 1
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/worksites/assign": {
      "post": {
        "responses": {
          "200": {
            "description": "Worksites id, name pairs",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/WorksiteAssignResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "500": {
            "description": "Unknown error"
          }
        },
        "summary": "Assign Worksite",
        "description": "Assign Worksite",
        "tags": [
          "Worksites"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorksiteAssignRequest"
              }
            }
          }
        }
      },
      "get": {
        "responses": {
          "200": {
            "description": "Worksites id, name pairs",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FilterOptionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "500": {
            "description": "Unknown error"
          }
        },
        "summary": "Get Worksite assign options",
        "description": "Get Worksite assign options",
        "tags": [
          "Worksites"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "example": 0,
            "description": "The offset from which to begin the list",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "example": 100,
            "description": "The maximum number of results to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1024,
              "default": 128
            }
          },
          {
            "in": "query",
            "name": "search",
            "required": false,
            "example": "Boston",
            "description": "The filter is used as free text",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter_name",
            "required": false,
            "example": "search",
            "description": "Use filter_value as search for backward compatibility",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter_value",
            "required": false,
            "example": "Boston",
            "description": "The filter is used as free text",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/labels/assets/bulk": {
      "post": {
        "tags": [
          "Labels"
        ],
        "responses": {
          "200": {
            "description": "List of created label ids",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BulkObjectCreateResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "override",
            "required": false,
            "description": "If true, allow updating an existing label with the provided key and value. If false, the action will fail if a label with the provided key and value already exists",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateStaticLabelsForAssets"
                }
              }
            }
          }
        }
      }
    },
    "/api/v4.0/exported_csv_files/{file_id}": {
      "get": {
        "responses": {},
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/export_csv_task_status/{task_id}": {
      "post": {
        "responses": {},
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "task_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/export_csv_task_status/max-records-num": {
      "get": {
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MaxRecordsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/export_csv_task_status": {
      "get": {
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExportCsvTaskStatusResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "view_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "task_id",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/exported_csv_files/{file_id}/graph/export": {
      "get": {
        "responses": {},
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/v4.0/bloodhound/configured_domains": {
      "get": {
        "tags": [
          "BloodHound"
        ],
        "responses": {
          "200": {
            "description": "Active Directory configured domains",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BloodHoundConfiguredDomainsObject"
                }
              }
            }
          }
        },
        "description": "Get Active Directory configured domains",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/bloodhound/scan": {
      "post": {
        "tags": [
          "BloodHound"
        ],
        "responses": {
          "200": {
            "description": "Active directory domains",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BloodHoundRunObject"
                }
              }
            }
          },
          "400": {
            "description": "Another operation is currently running"
          },
          "500": {
            "description": "Could not complete the operation due to a server a error. See error for more details"
          }
        },
        "description": "Run BloodHound scan on specified domains",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BloodHoundStartRunObject"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BloodHound"
        ],
        "responses": {
          "200": {
            "description": "Status of BloodHound stop",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BloodHoundStopObject"
                }
              }
            }
          },
          "400": {
            "description": "No active tasks"
          },
          "403": {
            "description": "Operation is not permitted"
          },
          "500": {
            "description": "Could not complete the operation due to a server a error. See error for more details"
          }
        },
        "description": "Stop BloodHound",
        "parameters": [
          {
            "in": "query",
            "name": "force_abort",
            "required": false,
            "example": false,
            "description": "Force bloodhound task abortion",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "BloodHound"
        ],
        "responses": {
          "200": {
            "description": "BloodHound status",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BloodHoundStatusObject"
                }
              }
            }
          },
          "400": {
            "description": "No active tasks"
          }
        },
        "description": "Get BloodHound status for last run",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/bloodhound/history": {
      "get": {
        "tags": [
          "BloodHound"
        ],
        "responses": {
          "200": {
            "description": "BloodHound runs history",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BloodHoundHistoryGet"
                }
              }
            }
          }
        },
        "description": "Get BloodHound runs history",
        "parameters": [
          {
            "in": "query",
            "name": "max_results",
            "required": false,
            "description": "Maximum number of results to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1024
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      }
    },
    "/api/v4.0/bloodhound/gcp_configuration": {
      "get": {
        "tags": [
          "BloodHound"
        ],
        "responses": {
          "200": {
            "description": "BloodHound GCP configuration",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BloodHoundGCPConfigurationObject"
                }
              }
            }
          }
        },
        "description": "Get BloodHound GCP configuration",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "BloodHound"
        ],
        "responses": {
          "200": {
            "description": "BloodHound GCP configuration status",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReplaceBloodHoundGCPConfigurationObject"
                }
              }
            }
          },
          "500": {
            "description": "Could not complete the operation due to a server a error. See error for more details"
          }
        },
        "description": "Replace BloodHound GCP configuration",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Bearer <token>"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BloodHoundGCPConfigurationObject"
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://policycontrol.test.cce.af.mil"
    }
  ],
  "components": {
    "requestBodies": {
      "SubnetObjectArray": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SubnetObject"
              }
            }
          }
        }
      },
      "UserGroupCreationRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserGroupCreationRequest"
            }
          }
        }
      },
      "LabelEditObject": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LabelEditObject"
            }
          }
        }
      },
      "AssetObjectIdArray": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AssetObjectId"
              }
            }
          }
        }
      },
      "AssetObjectIdList": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AssetObjectIdList"
            }
          }
        }
      },
      "PolicyRulesBulkChangeStateSchemeArray": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PolicyRulesBulkChangeStateScheme"
              }
            }
          }
        }
      }
    },
    "schemas": {
      "LabelCriteria": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "example": "name",
            "description": "Field that criteria applies to"
          },
          "op": {
            "type": "string",
            "enum": [
              "EQUALS",
              "STARTSWITH",
              "ENDSWITH",
              "CONTAINS",
              "WILDCARDS",
              "SUBNET",
              "REGEX",
              "RANGE"
            ],
            "example": "EQUALS",
            "description": "Criteria operand. Available operands: "
          },
          "argument": {
            "type": "string",
            "example": "OracleDB",
            "description": "Criteria argument value"
          }
        }
      },
      "LabelEditObject": {
        "type": "object",
        "properties": {
          "criteria": {
            "type": "array",
            "example": [
              {
                "field": "name",
                "op": "EQUALS",
                "argument": "OracleDB"
              }
            ],
            "description": "List of criteria",
            "items": {
              "$ref": "#/components/schemas/LabelCriteria"
            }
          },
          "key": {
            "type": "string",
            "example": "Role",
            "description": "Label key"
          },
          "value": {
            "type": "string",
            "example": "Server",
            "description": "Label value"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "LabelObjectId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
            "description": "Label UUID"
          }
        }
      },
      "LabelAsset": {
        "type": "object",
        "properties": {
          "bios_uuid": {
            "type": "string",
            "description": "BIOS UUID"
          },
          "ip_addresses": {
            "type": "array",
            "description": "Asset IP addresses",
            "items": {}
          },
          "id": {
            "type": "string",
            "description": "Asset id"
          },
          "name": {
            "type": "string",
            "description": "Asset name"
          },
          "guest_agent_details": {
            "type": "object",
            "description": "Agent details"
          },
          "orchestration_details": {
            "type": "array",
            "description": "List of asset orchestration details",
            "items": {
              "type": "object"
            }
          },
          "nics": {
            "type": "array",
            "description": "Asset network interfaces",
            "items": {
              "type": "object"
            }
          },
          "metadata": {
            "type": "object"
          },
          "hw_uuid": {
            "type": "string",
            "description": "Hardware UUID"
          },
          "label_groups": {
            "type": "array",
            "description": "Asset label groups",
            "items": {
              "type": "string"
            }
          },
          "labels": {
            "type": "array",
            "description": "Asset labels",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LabelCriteria1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Criteria id"
          },
          "field": {
            "type": "string",
            "example": "name",
            "description": "Field that criteria applies to"
          },
          "label_id": {
            "type": "string",
            "description": "Label id"
          },
          "source": {
            "type": "string",
            "enum": [
              "User",
              "Orchestration",
              "Agent"
            ],
            "description": "Criteria source"
          },
          "op": {
            "type": "string",
            "enum": [
              "EQUALS",
              "STARTSWITH",
              "ENDSWITH",
              "CONTAINS",
              "WILDCARDS",
              "SUBNET",
              "REGEX",
              "RANGE"
            ],
            "example": "EQUALS",
            "description": "Criteria operand. Available operands: "
          },
          "argument": {
            "type": "string",
            "example": "OracleDB",
            "description": "Criteria argument value"
          }
        }
      },
      "LabelObject": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "example": "Server",
            "description": "Label value"
          },
          "static_assets": {
            "type": "array",
            "example": {
              "id": "047f32b6-8e97-4cc6-8a0d-8438863d9e43",
              "name": "BW_MS_DC_01-backup",
              "ip_addresses": [
                "192.168.2.1",
                "10.0.1.171"
              ]
            },
            "description": "Assets that match to equal criterias",
            "items": {
              "$ref": "#/components/schemas/LabelAsset"
            }
          },
          "static_criteria": {
            "type": "array",
            "example": {
              "label_id": "273ee591-7b49-469c-b9ab-da93c52da414",
              "source": "User",
              "field": "id",
              "op": "EQUALS",
              "argument": "00d3f448-bcc6-4712-b298-0d6fefc64d4f",
              "id": "7f938ab7-574f-4bc9-afa6-de27bd52f793"
            },
            "description": "List of equal criteria",
            "items": {
              "$ref": "#/components/schemas/LabelCriteria1"
            }
          },
          "id": {
            "type": "string",
            "example": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
            "description": "Label UUID"
          },
          "static_criteria_counter": {
            "type": "integer",
            "description": "Counter of static criteria"
          },
          "dynamic_criteria_counter": {
            "type": "integer",
            "description": "Counter of dynamic criteria"
          },
          "implicit_criteria": {
            "type": "array",
            "example": {
              "label_id": "273ee591-7b49-469c-b9ab-da93c52da414",
              "source": "User",
              "field": "id",
              "op": "EQUALS",
              "argument": "00d3f448-bcc6-4712-b298-0d6fefc64d4f",
              "id": "7f938ab7-574f-4bc9-afa6-de27bd52f793"
            },
            "description": "List of implicit criteria",
            "items": {
              "$ref": "#/components/schemas/LabelCriteria1"
            }
          },
          "key": {
            "type": "string",
            "example": "Role",
            "description": "Label key"
          },
          "dynamic_criteria": {
            "type": "array",
            "example": {
              "label_id": "273ee591-7b49-469c-b9ab-da93c52da414",
              "source": "User",
              "field": "id",
              "op": "EQUALS",
              "argument": "00d3f448-bcc6-4712-b298-0d6fefc64d4f",
              "id": "7f938ab7-574f-4bc9-afa6-de27bd52f793"
            },
            "description": "List of dynamic criteria",
            "items": {
              "$ref": "#/components/schemas/LabelCriteria1"
            }
          },
          "static_assets_counter": {
            "type": "integer",
            "description": "Counter of statically matched assets"
          },
          "rules_with_label": {
            "type": "integer",
            "description": "Number of rules using this label"
          },
          "dynamic_assets_counter": {
            "type": "integer",
            "description": "Counter of dynamically matched assets"
          },
          "dynamic_assets": {
            "type": "array",
            "example": {
              "id": "047f32b6-8e97-4cc6-8a0d-8438863d9e43",
              "name": "BW_MS_DC_01-backup",
              "ip_addresses": [
                "192.168.2.1",
                "10.0.1.171"
              ]
            },
            "description": "Assets that match to the dynamic criteria",
            "items": {
              "$ref": "#/components/schemas/LabelAsset"
            }
          }
        }
      },
      "LabelGet": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "description": "The fields read"
          },
          "objects": {
            "type": "array",
            "description": "List of label objects",
            "items": {
              "$ref": "#/components/schemas/LabelObject"
            }
          },
          "expand": {
            "type": "string",
            "description": "Expanded fields"
          }
        }
      },
      "LabelListGet": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "description": "The fields read"
          },
          "filter": {
            "type": "string",
            "description": "The filters used"
          },
          "offset": {
            "type": "string",
            "description": "Starting position"
          },
          "total": {
            "type": "integer",
            "description": "Number of results"
          },
          "objects": {
            "type": "array",
            "description": "List of label objects",
            "items": {
              "$ref": "#/components/schemas/LabelObject"
            }
          },
          "expand": {
            "type": "string",
            "description": "Expanded fields"
          }
        }
      },
      "BulkObjectCreateResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Custom result message"
          },
          "succeeded": {
            "type": "array",
            "description": "List of successfully created objects ids",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "BulkObjectModifyResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Custom result message"
          },
          "succeeded": {
            "type": "array",
            "description": "List of successfully created objects ids",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "missing": {
            "type": "array",
            "description": "List of missing objects ids",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "failed": {
            "type": "array",
            "description": "List of failed to modify objects ids",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "AssetObjectId": {
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "string",
            "example": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
            "description": "Asset UUID"
          }
        }
      },
      "ResultSuccess": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Result successful"
          }
        }
      },
      "LabelRemoveAsset": {
        "type": "object",
        "properties": {
          "label_key": {
            "type": "string",
            "minLength": 1,
            "example": "App/ex",
            "description": "Label key <br> NOTE: Label name which contains special characters must be passed both in request body schema AND in path parameters"
          },
          "asset_id": {
            "type": "string",
            "example": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
            "description": "Asset UUID"
          },
          "label_value": {
            "type": "string",
            "minLength": 1,
            "example": "dev/vm",
            "description": "Label value <br> NOTE: Label name which contains special characters must be passed both in request body schema AND in path parameters"
          }
        },
        "required": [
          "asset_id"
        ]
      },
      "SubnetObject": {
        "type": "object",
        "properties": {
          "subnet": {
            "type": "string",
            "example": "192.168.1.0/24",
            "description": "Subnet"
          }
        }
      },
      "PolicyInfoObject": {
        "type": "object",
        "properties": {
          "provider_rule_id": {
            "type": "string",
            "description": "Provider policy rule"
          },
          "verdict": {
            "type": "string",
            "enum": [
              "allow",
              "block",
              "alert"
            ],
            "description": "Policy verdict"
          },
          "rule_id": {
            "type": "string",
            "format": "uuid",
            "description": "Guardicore policy rule"
          },
          "revision": {
            "type": "integer",
            "description": "Guardicore policy revision"
          }
        }
      },
      "ProcessInfoObject": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User name"
          },
          "full_path": {
            "type": "string",
            "maxLength": 256,
            "description": "Process full path"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "Process name"
          }
        }
      },
      "ConnectionSrcSideObject": {
        "type": "object",
        "properties": {
          "process_info": {
            "description": "Process information",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessInfoObject"
              }
            ]
          },
          "ip_address": {
            "type": "string",
            "description": "IP address"
          },
          "asset_id": {
            "type": "string",
            "description": "Asset ID"
          }
        }
      },
      "ConnectionDstSideObject": {
        "type": "object",
        "properties": {
          "process_info": {
            "description": "Process information",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProcessInfoObject"
              }
            ]
          },
          "port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535,
            "description": "Destination port"
          },
          "ip_address": {
            "type": "string",
            "description": "IP address"
          },
          "asset_id": {
            "type": "string",
            "description": "Asset ID"
          }
        },
        "required": [
          "port"
        ]
      },
      "ConnectionObject": {
        "type": "object",
        "properties": {
          "ip_protocol": {
            "description": "Transport protocol"
          },
          "count": {
            "type": "integer",
            "description": "Number of times the connection was seen"
          },
          "provider": {
            "type": "string",
            "description": "Provider name"
          },
          "timestamp": {
            "type": "integer",
            "description": "Connection aggregation timestamp (milliseconds)"
          },
          "policy_info": {
            "description": "Policy information",
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyInfoObject"
              }
            ]
          },
          "direction": {
            "type": "string",
            "enum": [
              "outgoing",
              "incoming",
              "matched"
            ],
            "description": "Connection direction"
          },
          "source": {
            "description": "Source details of the connection",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectionSrcSideObject"
              }
            ]
          },
          "raw": {
            "type": "string"
          },
          "connection_type": {
            "type": "string",
            "enum": [
              "SUCCESSFUL",
              "FAILED"
            ],
            "description": "Connection status"
          },
          "destination": {
            "description": "Destination details of the connection",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectionDstSideObject"
              }
            ]
          }
        },
        "required": [
          "connection_type",
          "count",
          "ip_protocol",
          "provider",
          "timestamp"
        ]
      },
      "ConnectionApiErrorObject": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error description"
          },
          "count": {
            "type": "integer",
            "description": "Number of failed connections"
          }
        },
        "required": [
          "count",
          "error"
        ]
      },
      "ConnectionApiResponseObject": {
        "type": "object",
        "properties": {
          "succeeded": {
            "type": "integer",
            "description": "Number of submitted connections"
          },
          "failed": {
            "description": "Failure details",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectionApiErrorObject"
              }
            ]
          }
        },
        "required": [
          "failed",
          "succeeded"
        ]
      },
      "AssetNic": {
        "type": "object",
        "properties": {
          "network_name": {
            "type": "string",
            "description": "Network name"
          },
          "vif_id": {
            "type": "string",
            "description": "Virtual interface Id"
          },
          "ip_addresses": {
            "type": "array",
            "minItems": 1,
            "description": "NIC IP addresses",
            "items": {
              "type": "string"
            }
          },
          "network_id": {
            "type": "string",
            "description": "Network id"
          },
          "switch_id": {
            "type": "string",
            "description": "Switch id"
          },
          "mac_address": {
            "type": "string",
            "pattern": "^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$",
            "description": "Mac address)"
          },
          "is_cloud_public": {
            "type": "boolean",
            "description": "Cloud network",
            "nullable": true
          }
        },
        "required": [
          "ip_addresses",
          "mac_address",
          "vif_id"
        ]
      },
      "AssetOrchestrationMetadata": {
        "type": "object",
        "properties": {
          "asset_type": {
            "type": "string",
            "description": "Must be one of the following values: F5"
          },
          "f5_device_hostname": {
            "type": "string",
            "description": "Hostname of the F5 BigIP device (Required for F5, case sensitive field)"
          },
          "partition": {
            "type": "string",
            "description": "Partition where F5 Virtual Server is created (Required for F5, case sensitive field)"
          },
          "vs_name": {
            "type": "string",
            "description": "Name of the F5 Virtual Server (Required for F5, case sensitive field)"
          }
        },
        "additionalProperties": true
      },
      "AssetLabel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Label key"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Label id"
          },
          "value": {
            "type": "string",
            "description": "Label value"
          }
        }
      },
      "AssetCreateObject": {
        "type": "object",
        "properties": {
          "worksite": {
            "type": "string",
            "default": null,
            "description": "Worksite name",
            "nullable": true
          },
          "bios_uuid": {
            "type": "string",
            "description": "BIOS UUID"
          },
          "comments": {
            "type": "string",
            "description": "Additional asset comments",
            "nullable": true
          },
          "orchestration_obj_id": {
            "type": "string",
            "description": "PK of the asset from db/playbood on customer side"
          },
          "instance_id": {
            "type": "string",
            "description": "Instance id generated by AWS/Azure/GCP"
          },
          "name": {
            "type": "string",
            "description": "Asset name"
          },
          "nics": {
            "type": "array",
            "description": "List of assets network interfaces details",
            "items": {
              "$ref": "#/components/schemas/AssetNic"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "on",
              "off",
              "deleted"
            ],
            "description": "Current asset status (on/off/deleted)"
          },
          "hw_uuid": {
            "type": "string",
            "description": "Hardware UUID"
          },
          "orchestration_metadata": {
            "description": "Additional asset metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetOrchestrationMetadata"
              }
            ]
          },
          "labels": {
            "type": "array",
            "description": "Asset labels",
            "items": {
              "$ref": "#/components/schemas/AssetLabel"
            },
            "nullable": true
          }
        },
        "required": [
          "name",
          "nics",
          "orchestration_obj_id"
        ]
      },
      "AssetEditableFields": {
        "type": "object",
        "properties": {
          "worksite": {
            "type": "string",
            "default": null,
            "description": "Worksite name",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "description": "Additional asset comments",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Asset name"
          },
          "nics": {
            "type": "array",
            "description": "List of assets network interfaces details",
            "items": {
              "$ref": "#/components/schemas/AssetNic"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "on",
              "off",
              "deleted"
            ],
            "description": "Current asset status (on/off/deleted)"
          },
          "orchestration_metadata": {
            "description": "Additional asset metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetOrchestrationMetadata"
              }
            ]
          },
          "labels": {
            "type": "array",
            "description": "Asset labels",
            "items": {
              "$ref": "#/components/schemas/AssetLabel"
            },
            "nullable": true
          }
        }
      },
      "AssetLabelGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Label group id"
          },
          "name": {
            "type": "string",
            "description": "Label group name"
          }
        }
      },
      "WorksiteDetails": {
        "type": "object",
        "properties": {
          "modified": {
            "type": "integer",
            "example": 1694506663180,
            "description": "Timestamp when Worksite was assigned"
          },
          "id": {
            "type": "string",
            "example": "123",
            "description": "Worksite ID"
          },
          "name": {
            "type": "string",
            "example": "Boston Site",
            "description": "Worksite name"
          }
        }
      },
      "ScopingDetails": {
        "type": "object",
        "properties": {
          "worksite": {
            "example": {
              "id": "123",
              "modified": 1694506663180,
              "name": "Boston Site"
            },
            "description": "Worksite Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/WorksiteDetails"
              }
            ]
          }
        }
      },
      "OSInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "OperatingSystem",
            "description": "Operating system distribution name"
          },
          "type": {
            "enum": [
              "Unknown",
              "Windows",
              "Linux",
              "HTTP",
              "SMBLure",
              "Solaris",
              "HPUX",
              "AIX",
              "F5",
              "FreeBSD",
              "LPAR",
              "macOS"
            ],
            "example": "Linux",
            "description": "Operating system type"
          }
        }
      },
      "GuestAgent": {
        "type": "object",
        "properties": {
          "agent_version": {
            "type": "string",
            "description": "Agent version"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Agent id"
          },
          "agent_last_seen": {
            "type": "string",
            "description": "Timestamp when agent was seen most recently"
          }
        }
      },
      "AssetOrchestrationDetails": {
        "type": "object",
        "properties": {
          "orchestration_type": {
            "type": "string",
            "description": "Orchestration type name"
          },
          "orchestration_name": {
            "type": "string",
            "description": "Orchestration name"
          },
          "revision_id": {
            "type": "integer",
            "description": "Orchestration revision"
          },
          "orchestration_id": {
            "type": "string",
            "description": "Orchestration id"
          },
          "orchestration_obj_id": {
            "type": "string",
            "description": "Orchestration object id"
          }
        }
      },
      "AssetObject": {
        "type": "object",
        "properties": {
          "label_groups": {
            "type": "array",
            "example": [
              {
                "id": "774fd9a6-e697-44bb-b095-32a71cfb3030",
                "name": "Databases"
              }
            ],
            "description": "Asset label groups",
            "items": {
              "$ref": "#/components/schemas/AssetLabelGroup"
            }
          },
          "bios_uuid": {
            "type": "string",
            "description": "BIOS id"
          },
          "comments": {
            "type": "string",
            "description": "Additional asset comments"
          },
          "scoping_details": {
            "example": {
              "worksite": {
                "id": "123",
                "modified": 1694506663180,
                "name": "Boston Site"
              }
            },
            "description": "Scoping Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/ScopingDetails"
              }
            ]
          },
          "instance_id": {
            "type": "string",
            "description": "Instance id"
          },
          "mssp_tenant_name": {
            "type": "string",
            "description": "Tenant name",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "f93a5d1e-cb2a-420c-87be-d0aa73546203",
            "description": "Asset id"
          },
          "name": {
            "type": "string",
            "example": "Linux64_Personal",
            "description": "Asset name"
          },
          "os_info": {
            "example": {
              "name": "OperatingSystem",
              "type": "Linux"
            },
            "description": "Operating System details",
            "allOf": [
              {
                "$ref": "#/components/schemas/OSInfo"
              }
            ]
          },
          "agent": {
            "example": {
              "id": "774fd9a6-e697-44bb-b095-32a71cfb3030",
              "agent_last_seen": "2021-11-28 15:28:04.388000",
              "agent_version": "5.41.21257.5353"
            },
            "description": "Asset agent details",
            "allOf": [
              {
                "$ref": "#/components/schemas/GuestAgent"
              }
            ]
          },
          "orchestration_metadata": {
            "type": "object",
            "example": {
              "asset_type": "f5",
              "f5_device_hostname": "F5lab.guardi",
              "partition": "/Common",
              "vs_name": "vs-test3"
            },
            "description": "Additional asset metadata"
          },
          "orchestration_details": {
            "type": "array",
            "example": [
              {
                "orchestration_id": "92b3cfc8-2876-4d8a-8b3d-a26b02873849",
                "orchestration_name": "VCENTER",
                "orchestration_obj_id": "vm-53242",
                "orchestration_type": "vSphere",
                "revision_id": 210406132209
              }
            ],
            "description": "List of asset orchestration details",
            "items": {
              "$ref": "#/components/schemas/AssetOrchestrationDetails"
            }
          },
          "nics": {
            "type": "array",
            "example": [
              {
                "ip_addresses": [],
                "is_cloud_public": false,
                "mac_address": "00:50:56:9d:c7:66",
                "network_id": "dvportgroup-51",
                "network_name": "",
                "switch_id": "dvs-37",
                "vif_id": "0"
              }
            ],
            "description": "List of assets network interfaces details",
            "items": {
              "$ref": "#/components/schemas/AssetNic"
            }
          },
          "asset_type": {
            "type": "string",
            "enum": [
              "workstation",
              "server",
              "k8s"
            ],
            "example": "workstation",
            "description": "A type of asset"
          },
          "status": {
            "type": "string",
            "enum": [
              "on",
              "off",
              "deleted"
            ],
            "example": "on",
            "description": "Current asset status (on/off/deleted)"
          },
          "first_seen": {
            "type": "string",
            "example": "2020-09-10 14:39:18.540000",
            "description": "Timestamp when asset was first seen"
          },
          "last_seen": {
            "type": "string",
            "example": "2021-11-28 15:19:50.036000",
            "description": "Timestamp when asset was seen most recently"
          },
          "labels": {
            "type": "array",
            "example": [
              {
                "id": "774fd9a6-e697-44bb-b095-32a71cfb3030",
                "key": "DB",
                "label": "SQL"
              }
            ],
            "description": "Asset labels",
            "items": {
              "$ref": "#/components/schemas/AssetLabel"
            }
          }
        },
        "required": [
          "asset_type",
          "name"
        ]
      },
      "AssetGet": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "description": "The fields read"
          },
          "objects": {
            "type": "array",
            "description": "Asset object",
            "items": {
              "$ref": "#/components/schemas/AssetObject"
            }
          },
          "expand": {
            "type": "string",
            "description": "Expanded fields"
          }
        }
      },
      "AssetObject1": {
        "type": "object",
        "properties": {
          "label_groups": {
            "type": "array",
            "example": [
              {
                "id": "774fd9a6-e697-44bb-b095-32a71cfb3030",
                "name": "Databases"
              }
            ],
            "description": "Asset label groups",
            "items": {
              "$ref": "#/components/schemas/AssetLabelGroup"
            }
          },
          "bios_uuid": {
            "type": "string",
            "description": "BIOS id"
          },
          "comments": {
            "type": "string",
            "description": "Additional asset comments"
          },
          "scoping_details": {
            "example": {
              "worksite": {
                "id": "123",
                "modified": 1694506663180,
                "name": "Boston Site"
              }
            },
            "description": "Scoping Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/ScopingDetails"
              }
            ]
          },
          "instance_id": {
            "type": "string",
            "description": "Instance id"
          },
          "mssp_tenant_name": {
            "type": "string",
            "description": "Tenant name",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "f93a5d1e-cb2a-420c-87be-d0aa73546203",
            "description": "Asset id"
          },
          "name": {
            "type": "string",
            "example": "Linux64_Personal",
            "description": "Asset name"
          },
          "os_info": {
            "example": {
              "name": "OperatingSystem",
              "type": "Linux"
            },
            "description": "Operating System details",
            "allOf": [
              {
                "$ref": "#/components/schemas/OSInfo"
              }
            ]
          },
          "agent": {
            "example": {
              "id": "774fd9a6-e697-44bb-b095-32a71cfb3030",
              "agent_last_seen": "2021-11-28 15:28:04.388000",
              "agent_version": "5.41.21257.5353"
            },
            "description": "Asset agent details",
            "allOf": [
              {
                "$ref": "#/components/schemas/GuestAgent"
              }
            ]
          },
          "orchestration_metadata": {
            "type": "object",
            "example": {
              "asset_type": "f5",
              "f5_device_hostname": "F5lab.guardi",
              "partition": "/Common",
              "vs_name": "vs-test3"
            },
            "description": "Additional asset metadata"
          },
          "orchestration_details": {
            "type": "array",
            "example": [
              {
                "orchestration_id": "92b3cfc8-2876-4d8a-8b3d-a26b02873849",
                "orchestration_name": "VCENTER",
                "orchestration_obj_id": "vm-53242",
                "orchestration_type": "vSphere",
                "revision_id": 210406132209
              }
            ],
            "description": "List of asset orchestration details",
            "items": {
              "$ref": "#/components/schemas/AssetOrchestrationDetails"
            }
          },
          "nics": {
            "type": "array",
            "example": [
              {
                "ip_addresses": [],
                "is_cloud_public": false,
                "mac_address": "00:50:56:9d:c7:66",
                "network_id": "dvportgroup-51",
                "network_name": "",
                "switch_id": "dvs-37",
                "vif_id": "0"
              }
            ],
            "description": "List of assets network interfaces details",
            "items": {
              "$ref": "#/components/schemas/AssetNic"
            }
          },
          "asset_type": {
            "type": "string",
            "enum": [
              "workstation",
              "server",
              "k8s"
            ],
            "example": "workstation",
            "description": "A type of asset"
          },
          "status": {
            "type": "string",
            "enum": [
              "on",
              "off",
              "deleted"
            ],
            "example": "on",
            "description": "Current asset status (on/off/deleted)"
          },
          "first_seen": {
            "type": "string",
            "example": "2020-09-10 14:39:18.540000",
            "description": "Timestamp when asset was first seen"
          },
          "last_seen": {
            "type": "string",
            "example": "2021-11-28 15:19:50.036000",
            "description": "Timestamp when asset was seen most recently"
          },
          "labels": {
            "type": "array",
            "example": [
              {
                "id": "774fd9a6-e697-44bb-b095-32a71cfb3030",
                "key": "DB",
                "label": "SQL"
              }
            ],
            "description": "Asset labels",
            "items": {
              "$ref": "#/components/schemas/AssetLabel"
            }
          }
        }
      },
      "AssetList": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "example": "name=Linux",
            "description": "The filters used"
          },
          "fields": {
            "type": "string",
            "example": "All fields",
            "description": "The fields read"
          },
          "offset": {
            "type": "integer",
            "example": 0,
            "description": "Starting position"
          },
          "total": {
            "type": "integer",
            "example": 1,
            "description": "Number of results"
          },
          "objects": {
            "type": "array",
            "description": "List of asset objects",
            "items": {
              "$ref": "#/components/schemas/AssetObject1"
            }
          },
          "expand": {
            "type": "string",
            "example": "labels, agent",
            "description": "Expanded fields"
          }
        }
      },
      "AssetBulkEditObject": {
        "type": "object",
        "properties": {
          "worksite": {
            "type": "string",
            "default": null,
            "description": "Worksite name",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "description": "Additional asset comments",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Asset name"
          },
          "asset_id": {
            "type": "string",
            "description": "Asset ID from Centra"
          },
          "nics": {
            "type": "array",
            "description": "List of assets network interfaces details",
            "items": {
              "$ref": "#/components/schemas/AssetNic"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "on",
              "off",
              "deleted"
            ],
            "description": "Current asset status (on/off/deleted)"
          },
          "orchestration_metadata": {
            "description": "Additional asset metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetOrchestrationMetadata"
              }
            ]
          },
          "labels": {
            "type": "array",
            "description": "Asset labels",
            "items": {
              "$ref": "#/components/schemas/AssetLabel"
            },
            "nullable": true
          }
        },
        "required": [
          "asset_id"
        ]
      },
      "AssetOperationError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error description"
          },
          "asset_id": {
            "type": "string",
            "description": "Asset id"
          },
          "orchestration_obj_id": {
            "type": "string",
            "description": "Orchestration object id"
          }
        }
      },
      "AssetBulkCreateResponse": {
        "type": "object",
        "properties": {
          "number_of_failed": {
            "type": "integer"
          },
          "total_number": {
            "type": "integer"
          },
          "created_asset_ids": {
            "type": "object",
            "description": "List of dicts of orchestration_obj_ids to created asset_ids"
          },
          "errors": {
            "type": "array",
            "description": "List of errors",
            "items": {
              "$ref": "#/components/schemas/AssetOperationError"
            }
          },
          "number_of_succeeded": {
            "type": "integer"
          }
        },
        "required": [
          "created_asset_ids",
          "number_of_failed",
          "number_of_succeeded",
          "total_number"
        ]
      },
      "AssetBulkResponse": {
        "type": "object",
        "properties": {
          "number_of_failed": {
            "type": "integer"
          },
          "total_number": {
            "type": "integer"
          },
          "errors": {
            "type": "array",
            "description": "List of errors",
            "items": {
              "$ref": "#/components/schemas/AssetOperationError"
            }
          },
          "number_of_succeeded": {
            "type": "integer"
          }
        },
        "required": [
          "number_of_failed",
          "number_of_succeeded",
          "total_number"
        ]
      },
      "AssetObjectIdList": {
        "type": "object",
        "properties": {
          "asset_ids": {
            "type": "array",
            "example": [
              "7f938ab7-574f-4bc9-afa6-de27bd52f793"
            ],
            "description": "Asset UUIDs",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LabelSuggestionLogObjectScheme": {
        "type": "object",
        "properties": {
          "suggestion_assets": {
            "type": "array",
            "description": "UUID of affected assets",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "suggestion_subnets": {
            "type": "array",
            "description": "Affected subnets",
            "items": {
              "type": "string"
            }
          },
          "suggestion_type": {
            "type": "string",
            "enum": [
              "ai"
            ],
            "description": "Type of suggestion"
          },
          "suggestion_label_value": {
            "type": "string",
            "example": "Server",
            "description": "Label value"
          },
          "timestamp": {
            "type": "string",
            "description": "Time of log creation"
          },
          "target_label_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of affected label"
          },
          "log_id": {
            "type": "string",
            "format": "uuid",
            "description": "Label Suggestion Log UUID"
          },
          "extra_data": {
            "type": "object",
            "description": "Type specific data"
          },
          "suggestion_label_key": {
            "type": "string",
            "example": "Role",
            "description": "Label key"
          },
          "action": {
            "type": "string",
            "enum": [
              "suggestion_received",
              "suggestion_accepted",
              "suggestion_updated",
              "suggestion_dissociated"
            ],
            "description": "Suggested Action"
          },
          "suggestion_id": {
            "type": "string",
            "format": "uuid",
            "description": "Label Suggestion UUID"
          }
        }
      },
      "LabelSuggestionLogGetScheme": {
        "type": "object",
        "properties": {
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelSuggestionLogObjectScheme"
            }
          }
        }
      },
      "AssetProcessObject": {
        "type": "object",
        "properties": {
          "image_hash": {
            "type": "string",
            "example": "e3d84df77b279ea288cc726cbf68867dc6ae00d24e0e24985141a2ee4753682a",
            "description": "asset process image hash",
            "nullable": true
          },
          "parent_name": {
            "type": "string",
            "example": "services",
            "description": "asset process parent name",
            "nullable": true
          },
          "db_insert_time": {
            "type": "integer",
            "format": "date-time",
            "example": "2023-02-01T00:01:22.829782",
            "description": "asset process db insert time"
          },
          "app_name": {
            "type": "string",
            "example": "Remote Procedure Call (RPC)",
            "description": "asset process app name",
            "nullable": true
          },
          "process_group": {
            "type": "integer",
            "example": 776,
            "description": "asset process process group",
            "nullable": true
          },
          "display_name": {
            "type": "string",
            "example": "Remote Procedure Call (RPC)",
            "description": "asset process display name",
            "nullable": true
          },
          "windows_service_name": {
            "type": "string",
            "example": "",
            "description": "asset process windows service name",
            "nullable": true
          },
          "username": {
            "type": "string",
            "example": "NT AUTHORITY\\NETWORK SERVICE",
            "description": "asset process user name",
            "nullable": true
          },
          "id": {
            "type": "string",
            "example": "proc-1",
            "description": "asset process id"
          },
          "full_path": {
            "type": "string",
            "example": "C:\\WINDOWS\\system32\\svchost.exe",
            "description": "asset process full path",
            "nullable": true
          },
          "image_hash_type": {
            "enum": [
              "none",
              "sha1",
              "sha256",
              "md5"
            ],
            "example": 0,
            "description": "asset process image hash type",
            "nullable": true
          },
          "process_name": {
            "type": "string",
            "example": "svchost",
            "description": "asset process process name",
            "nullable": true
          },
          "vm_id": {
            "type": "string",
            "example": "df4f72fc-dcd1-44d7-9b1b-0124c711244f",
            "description": "asset process vm id",
            "nullable": true
          },
          "windows_service_display_name": {
            "type": "string",
            "example": "",
            "description": "asset process windows service display name",
            "nullable": true
          },
          "cmdline": {
            "type": "array",
            "items": {
              "type": "array",
              "example": [
                [
                  "C:\\WINDOWS\\system32\\svchost.exe",
                  "-k",
                  "RPCSS"
                ]
              ],
              "description": "asset process command_line",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "script_name": {
            "type": "string",
            "example": "25365-238933-asrck-02-dispatch-script.tmp.sh",
            "description": "asset process script name",
            "nullable": true
          },
          "script_path": {
            "type": "string",
            "example": "/tmp/25365-238933-asrck-02-dispatch-script.tmp.sh",
            "description": "asset process script path",
            "nullable": true
          }
        }
      },
      "DailyAssetsProcessesGetResponse": {
        "type": "object",
        "properties": {
          "objects": {
            "description": "List of asset process objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetProcessObject"
            },
            "nullable": true
          },
          "total_count": {
            "type": "integer",
            "example": "4",
            "description": "number of results in all pages"
          },
          "scroll_id": {
            "type": "string",
            "description": "Scroll ID",
            "nullable": true
          }
        }
      },
      "PropertyObject": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Free key to display (as key:value). Maximum 24 chars."
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "rule",
              "asset-id",
              "ip",
              "domain"
            ],
            "description": "Property type"
          },
          "value": {
            "type": "string",
            "description": "Data needed to display value (of the former key). For type \"text\" - maximum 2000 chars. For type \"rule\" - a valid UUID.For type \"asset-id\" - a valid asset id.For type \"ip\" - a valid ip address.For type \"domain\" - a valid domain."
          }
        },
        "required": [
          "key",
          "type",
          "value"
        ]
      },
      "AffectedAsset": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "VM",
              "IP"
            ],
            "description": "Affected asset type"
          },
          "value": {
            "type": "string",
            "minLength": 1,
            "maxLength": 36,
            "description": "If type is VM - vm_id, if type is IP - the ip address"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "UserDefinedObject": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title for user-defined object"
          },
          "anchor_id": {
            "type": "string",
            "default": null,
            "minLength": 1,
            "maxLength": 25,
            "description": "Anchor id to use by markdown-formatted fields",
            "nullable": true
          },
          "data": {
            "type": "array",
            "minItems": 1,
            "maxItems": 500,
            "description": "The user-defined object data",
            "items": {
              "type": "object",
              "additionalProperties": {
                "nullable": true
              }
            }
          }
        },
        "required": [
          "data",
          "title"
        ]
      },
      "MapDetailsObject": {
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "description": "The first time of connections to include in the map (milliseconds)"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "description": "The last time of connections to include in the map (milliseconds)"
          },
          "filters": {
            "type": "object",
            "description": "filters of the map",
            "additionalProperties": {
              "nullable": true
            }
          },
          "grouping": {
            "type": "string",
            "description": "grouped label seperated by comma or \"undefined\""
          }
        },
        "required": [
          "end_time",
          "filters",
          "grouping",
          "start_time"
        ]
      },
      "CreateIncidentObject": {
        "type": "object",
        "properties": {
          "cef_extensions": {
            "type": "object",
            "default": null,
            "example": {
              "sproc": "powershell"
            },
            "description": "Additional CEF Extensions to add to each CEF message when creating incident",
            "additionalProperties": {
              "nullable": true
            },
            "nullable": true
          },
          "properties": {
            "type": "array",
            "example": [
              {
                "type": "text",
                "key": "Process",
                "value": "openvpn"
              }
            ],
            "description": "List of related properties. Provide only for non-Hunt incidents. Maximum of 20 properties",
            "items": {
              "$ref": "#/components/schemas/PropertyObject"
            }
          },
          "affected_assets": {
            "type": "array",
            "minItems": 1,
            "maxItems": 50,
            "example": [
              {
                "type": "IP",
                "value": "172.17.0.71"
              }
            ],
            "description": "List of affected assets (ip/vm)",
            "items": {
              "$ref": "#/components/schemas/AffectedAsset"
            }
          },
          "summary": {
            "type": "string",
            "minLength": 1,
            "maxLength": 10000,
            "example": "### This is a third-tier heading\n\n",
            "description": "Markdown-formatted incident summary"
          },
          "type": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "example": "CustomIncident",
            "description": "Incident type"
          },
          "severity": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH"
            ],
            "description": "Current incident severity"
          },
          "custom_defined_objects": {
            "type": "array",
            "maxItems": 30,
            "example": [
              {
                "title": "Process Info",
                "anchor_id": "powershell",
                "data": [
                  {
                    "process name": "powershell.exe",
                    "pid": "4583"
                  }
                ]
              }
            ],
            "description": "List of user-defined objects",
            "items": {
              "$ref": "#/components/schemas/UserDefinedObject"
            }
          },
          "mitigation": {
            "type": "string",
            "default": null,
            "minLength": 1,
            "maxLength": 2000,
            "example": "### This is mitigation\n\n",
            "description": "Markdown-formatted incident mitigation information",
            "nullable": true
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "example": "Description.",
            "description": "Short description about the incident"
          },
          "time": {
            "type": "string",
            "format": "date-time",
            "x-minimum": 0,
            "example": 1621957270000,
            "description": "Incident occurrence timestamp (milliseconds)"
          },
          "map_details": {
            "default": null,
            "example": {
              "filters": {
                "include": {},
                "exclude": {}
              },
              "grouping": "Prod,Bill",
              "start_time": 1621957270000,
              "end_time": 1621957270000
            },
            "description": "All details needed to create a map when viewing the incident at Centra",
            "allOf": [
              {
                "$ref": "#/components/schemas/MapDetailsObject"
              }
            ],
            "nullable": true
          },
          "tags": {
            "type": "array",
            "minItems": 1,
            "maxItems": 10,
            "example": [
              "Suspicious"
            ],
            "description": "List of tags",
            "items": {
              "type": "string"
            }
          },
          "origin": {
            "type": "string",
            "minLength": 1,
            "maxLength": 25,
            "example": "Guardicore Labs",
            "description": "Who created the incident"
          }
        },
        "required": [
          "affected_assets",
          "description",
          "origin",
          "severity",
          "summary",
          "tags",
          "time",
          "type"
        ]
      },
      "CreateIncidentResponseObject": {
        "type": "object",
        "properties": {
          "incident_id": {
            "type": "string",
            "description": "The created incident Id"
          }
        },
        "required": [
          "incident_id"
        ]
      },
      "CreateIncidentBulkObject": {
        "type": "object",
        "properties": {
          "incidents": {
            "type": "array",
            "description": "Incidents objects (use the schema on \"Create Incident\" route",
            "items": {
              "$ref": "#/components/schemas/CreateIncidentObject"
            }
          }
        },
        "required": [
          "incidents"
        ]
      },
      "CreateIncidentBulkResponseObject": {
        "type": "object",
        "properties": {
          "incident_ids": {
            "type": "array",
            "description": "The created incident Ids",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "incident_ids"
        ]
      },
      "PortRange": {
        "type": "object",
        "properties": {
          "end": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535,
            "description": "end port"
          },
          "start": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535,
            "description": "start port"
          }
        },
        "required": [
          "end",
          "start"
        ]
      },
      "PolicyRuleAttributes": {
        "type": "object",
        "properties": {
          "worksite": {
            "type": "string",
            "description": "Rule assigned worksite.\nCan contain specific worksite id or None for all worksites",
            "nullable": true
          }
        }
      },
      "AndLabelsCreation": {
        "type": "object",
        "properties": {
          "and_labels": {
            "minItems": 1,
            "description": "List of \"and\" labels ids",
            "type": "array",
            "items": {
              "type": "string",
              "example": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
              "description": "Label UUID"
            }
          }
        }
      },
      "OrLabelsCreation": {
        "type": "object",
        "properties": {
          "or_labels": {
            "minItems": 1,
            "description": "List of \"or\" labels",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AndLabelsCreation"
            }
          }
        }
      },
      "PolicyRuleSideCreation": {
        "type": "object",
        "properties": {
          "subnets": {
            "type": "array",
            "example": [],
            "description": "List of subnets",
            "items": {}
          },
          "domains": {
            "type": "array",
            "example": [],
            "description": "List of domains",
            "items": {
              "type": "string"
            }
          },
          "asset_ids": {
            "description": "List of assets ids",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "f93a5d1e-cb2a-420c-87be-d0aa73546203",
              "description": "Asset id"
            }
          },
          "user_group_ids": {
            "description": "List of user groups",
            "type": "array",
            "items": {
              "type": "string",
              "description": "User group id"
            }
          },
          "label_group_ids": {
            "description": "List of label groups ids",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "description": "Label group id"
            }
          },
          "processes": {
            "type": "array",
            "example": [],
            "description": "List of processes",
            "items": {
              "type": "string"
            }
          },
          "labels": {
            "description": "List of labels",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrLabelsCreation"
              }
            ]
          },
          "address_classification": {
            "enum": [
              "Private",
              "Internet"
            ],
            "description": "Address classification"
          }
        }
      },
      "IcmpMatch": {
        "type": "object",
        "properties": {
          "version": {
            "enum": [
              "4"
            ],
            "description": "ICMP version"
          },
          "icmp_type": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255,
            "description": "ICMP type"
          },
          "icmp_codes": {
            "type": "array",
            "description": "ICMP codes",
            "items": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255
            }
          }
        }
      },
      "PolicyRuleCreationScheme": {
        "type": "object",
        "properties": {
          "port_ranges": {
            "default": [],
            "example": [
              {
                "start": 2000,
                "end": 3000
              },
              {
                "start": 6000,
                "end": 7000
              }
            ],
            "description": "List of Rule included port ranges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortRange"
            }
          },
          "section_position": {
            "enum": [
              "OVERRIDE_ALLOW",
              "OVERRIDE_ALERT",
              "OVERRIDE_BLOCK",
              "ALLOW",
              "ALERT",
              "BLOCK"
            ],
            "example": "ALLOW",
            "description": "Rule section position"
          },
          "comments": {
            "type": "string",
            "maxLength": 2000,
            "example": "Rule comments",
            "description": "Rule comments"
          },
          "exclude_ports": {
            "type": "array",
            "default": [],
            "example": [
              2001
            ],
            "description": "List of Rule excluded ports",
            "items": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535
            }
          },
          "ip_protocols": {
            "type": "array",
            "default": [
              "TCP",
              "UDP"
            ],
            "example": [
              "TCP",
              "UDP"
            ],
            "description": "Rule ip protocols",
            "items": {
              "enum": [
                "TCP",
                "UDP",
                "ICMP"
              ]
            }
          },
          "exclude_port_ranges": {
            "default": [],
            "example": [
              {
                "start": 4000,
                "end": 5000
              }
            ],
            "description": "List of Rule excluded port ranges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortRange"
            }
          },
          "scope": {
            "description": "RBAC scoping labels ids for this rule",
            "type": "array",
            "items": {
              "type": "string",
              "example": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
              "description": "Label UUID"
            }
          },
          "enabled": {
            "type": "boolean",
            "description": "Whatever Rule is activated or not"
          },
          "attributes": {
            "description": "Rule's additional attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyRuleAttributes"
              }
            ]
          },
          "source": {
            "description": "Source details object, leave empty for \"any\"",
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyRuleSideCreation"
              }
            ]
          },
          "icmp_matches": {
            "description": "List of ICMP matches",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IcmpMatch"
            }
          },
          "destination": {
            "description": "Destination details object, leave empty for \"any\"",
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyRuleSideCreation"
              }
            ]
          },
          "ruleset_name": {
            "type": "string",
            "default": "",
            "example": "ruleset 1",
            "description": "Rule's ruleset name"
          },
          "action": {
            "enum": [
              "ALLOW",
              "ALERT",
              "BLOCK",
              "BLOCK_AND_ALERT",
              "ALLOW_AND_ENCRYPT"
            ],
            "example": "ALLOW",
            "description": "Rule action"
          },
          "ports": {
            "type": "array",
            "default": [],
            "example": [
              67,
              22
            ],
            "description": "List of Rule included ports",
            "items": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535
            }
          },
          "network_profile": {
            "default": "CORPORATE",
            "enum": [
              "CORPORATE",
              "OFF_CORPORATE",
              "BOTH_NETWORKS"
            ],
            "description": "Network Profile"
          }
        },
        "required": [
          "action",
          "destination",
          "section_position",
          "source"
        ],
        "additionalProperties": false
      },
      "RuleId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Rule id"
          }
        },
        "required": [
          "id"
        ]
      },
      "Author": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Author username"
          },
          "id": {
            "type": "string",
            "description": "Author id"
          },
          "description": {
            "type": "string",
            "description": "Author description"
          }
        }
      },
      "AssetObject2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "f93a5d1e-cb2a-420c-87be-d0aa73546203",
            "description": "Asset id"
          }
        }
      },
      "UserGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User group id"
          },
          "name": {
            "type": "string",
            "description": "User group name"
          }
        }
      },
      "LabelGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Label group id"
          }
        }
      },
      "LabelObject1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
            "description": "Label UUID"
          }
        }
      },
      "AndLabels": {
        "type": "object",
        "properties": {
          "and_labels": {
            "description": "List of \"and\" labels",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelObject1"
            }
          }
        }
      },
      "OrLabels": {
        "type": "object",
        "properties": {
          "or_labels": {
            "description": "List of \"or\" labels",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AndLabels"
            }
          }
        }
      },
      "ExtendedPolicyRuleSide": {
        "type": "object",
        "properties": {
          "subnets": {
            "type": "array",
            "example": [],
            "description": "List of subnets",
            "items": {}
          },
          "assets": {
            "description": "List of assets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetObject2"
            }
          },
          "domains": {
            "type": "array",
            "example": [],
            "description": "List of domains",
            "items": {
              "type": "string"
            }
          },
          "user_groups": {
            "description": "List of user groups",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            }
          },
          "processes": {
            "type": "array",
            "example": [],
            "description": "List of processes",
            "items": {
              "type": "string"
            }
          },
          "label_groups": {
            "description": "List of label groups",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelGroup"
            }
          },
          "labels": {
            "description": "List of labels",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrLabels"
              }
            ]
          },
          "address_classification": {
            "enum": [
              "Private",
              "Internet"
            ],
            "description": "Address classification"
          }
        }
      },
      "ExtendedWorksiteAttribute": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Worksite id"
          },
          "name": {
            "type": "string",
            "description": "Worksite name"
          }
        }
      },
      "ExtendedPolicyRuleAttributes": {
        "type": "object",
        "properties": {
          "worksite": {
            "description": "Rule assigned worksite",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtendedWorksiteAttribute"
              }
            ]
          },
          "k8s_cluster_type": {
            "enum": [
              "AKS",
              "GKE",
              "EKS",
              "OCP",
              "RKE",
              "K8S"
            ]
          },
          "restricted_rule": {
            "type": "boolean"
          }
        }
      },
      "ExtendedPolicyRuleScheme": {
        "type": "object",
        "properties": {
          "port_ranges": {
            "default": [],
            "example": [
              {
                "start": 2000,
                "end": 3000
              },
              {
                "start": 6000,
                "end": 7000
              }
            ],
            "description": "List of Rule included port ranges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortRange"
            }
          },
          "last_hit": {
            "type": "string",
            "format": "date-time",
            "description": "Last time in the policy the rule was hit"
          },
          "ip_protocols": {
            "type": "array",
            "default": [
              "TCP",
              "UDP"
            ],
            "example": [
              "TCP",
              "UDP"
            ],
            "description": "Rule ip protocols",
            "items": {
              "enum": [
                "TCP",
                "UDP",
                "ICMP"
              ]
            }
          },
          "state": {
            "enum": [
              "UNCHANGED",
              "CREATED",
              "MODIFIED",
              "DELETED"
            ],
            "description": "Current policy rule state"
          },
          "hit_count_reset_time": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the policy rule hit count was reset"
          },
          "icmp_matches": {
            "description": "List of ICMP matches",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IcmpMatch"
            }
          },
          "exclude_port_ranges": {
            "default": [],
            "example": [
              {
                "start": 4000,
                "end": 5000
              }
            ],
            "description": "List of Rule excluded port ranges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortRange"
            }
          },
          "comments": {
            "type": "string",
            "maxLength": 2000,
            "example": "Rule comments",
            "description": "Rule comments"
          },
          "scope": {
            "description": "RBAC scoping label for this rule",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelObject"
            }
          },
          "hit_count": {
            "type": "integer",
            "description": "How much times the Rule participated in the policy"
          },
          "author": {
            "description": "Policy rule author",
            "allOf": [
              {
                "$ref": "#/components/schemas/Author"
              }
            ]
          },
          "ports": {
            "type": "array",
            "default": [],
            "example": [
              67,
              22
            ],
            "description": "List of Rule included ports",
            "items": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535
            }
          },
          "network_profile": {
            "default": "CORPORATE",
            "enum": [
              "CORPORATE",
              "OFF_CORPORATE",
              "BOTH_NETWORKS"
            ],
            "description": "Network Profile"
          },
          "exclude_ports": {
            "type": "array",
            "default": [],
            "example": [
              2001
            ],
            "description": "List of Rule excluded ports",
            "items": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535
            }
          },
          "read_only": {
            "type": "boolean",
            "description": "user has read only permissions to this rule"
          },
          "source": {
            "description": "Source details object, empty means \"any\"",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtendedPolicyRuleSide"
              }
            ]
          },
          "last_change_time": {
            "type": "string",
            "format": "date-time",
            "description": "Rule changed time"
          },
          "section_position": {
            "enum": [
              "OVERRIDE_ALLOW",
              "OVERRIDE_ALERT",
              "OVERRIDE_BLOCK",
              "ALLOW",
              "ALERT",
              "BLOCK"
            ],
            "example": "ALLOW",
            "description": "Rule section position"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Rule id"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whatever Rule is activated or not"
          },
          "creation_time": {
            "type": "string",
            "format": "date-time",
            "description": "Rule creation time"
          },
          "attributes": {
            "description": "Rule's additional attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtendedPolicyRuleAttributes"
              }
            ]
          },
          "destination": {
            "description": "Destination details object, empty means \"any\"",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtendedPolicyRuleSide"
              }
            ]
          },
          "ruleset_name": {
            "type": "string",
            "default": "",
            "example": "ruleset 1",
            "description": "Rule's ruleset name"
          },
          "action": {
            "enum": [
              "ALLOW",
              "ALERT",
              "BLOCK",
              "BLOCK_AND_ALERT",
              "ALLOW_AND_ENCRYPT"
            ],
            "example": "ALLOW",
            "description": "Rule action"
          }
        },
        "required": [
          "action",
          "id",
          "section_position"
        ]
      },
      "PolicyRulesGetResponse": {
        "type": "object",
        "properties": {
          "start_at": {
            "type": "integer",
            "description": "Offset to start list from"
          },
          "fields": {
            "type": "array",
            "description": "A comma-separated list of fields to return",
            "items": {
              "type": "string"
            }
          },
          "filter": {
            "type": "object",
            "description": "The filters used"
          },
          "order": {
            "type": "array",
            "description": "A comma-separated list of fields to sort by (limited to 3 fields)",
            "items": {
              "type": "string"
            }
          },
          "order_direction": {
            "type": "array",
            "description": "A comma-separated list of order ascending or descending of the field sorting",
            "items": {
              "type": "string"
            }
          },
          "total": {
            "type": "integer",
            "description": "Number of results"
          },
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedPolicyRuleScheme"
            },
            "nullable": true
          }
        }
      },
      "PolicyRuleEditScheme": {
        "type": "object",
        "properties": {
          "port_ranges": {
            "default": [],
            "example": [
              {
                "start": 2000,
                "end": 3000
              },
              {
                "start": 6000,
                "end": 7000
              }
            ],
            "description": "List of Rule included port ranges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortRange"
            }
          },
          "section_position": {
            "enum": [
              "OVERRIDE_ALLOW",
              "OVERRIDE_ALERT",
              "OVERRIDE_BLOCK",
              "ALLOW",
              "ALERT",
              "BLOCK"
            ],
            "example": "ALLOW",
            "description": "Rule section position"
          },
          "comments": {
            "type": "string",
            "maxLength": 2000,
            "example": "Rule comments",
            "description": "Rule comments"
          },
          "exclude_ports": {
            "type": "array",
            "default": [],
            "example": [
              2001
            ],
            "description": "List of Rule excluded ports",
            "items": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535
            }
          },
          "ip_protocols": {
            "type": "array",
            "default": [
              "TCP",
              "UDP"
            ],
            "example": [
              "TCP",
              "UDP"
            ],
            "description": "Rule ip protocols",
            "items": {
              "enum": [
                "TCP",
                "UDP",
                "ICMP"
              ]
            }
          },
          "exclude_port_ranges": {
            "default": [],
            "example": [
              {
                "start": 4000,
                "end": 5000
              }
            ],
            "description": "List of Rule excluded port ranges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortRange"
            }
          },
          "scope": {
            "description": "RBAC scoping labels ids for this rule",
            "type": "array",
            "items": {
              "type": "string",
              "example": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
              "description": "Label UUID"
            }
          },
          "enabled": {
            "type": "boolean",
            "description": "Whatever Rule is activated or not"
          },
          "attributes": {
            "description": "Rule's additional attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyRuleAttributes"
              }
            ]
          },
          "source": {
            "description": "Source details object, leave empty for \"any\"",
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyRuleSideCreation"
              }
            ]
          },
          "icmp_matches": {
            "description": "List of ICMP matches",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IcmpMatch"
            }
          },
          "destination": {
            "description": "Destination details object, leave empty for \"any\"",
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyRuleSideCreation"
              }
            ]
          },
          "ruleset_name": {
            "type": "string",
            "default": "",
            "example": "ruleset 1",
            "description": "Rule's ruleset name"
          },
          "action": {
            "enum": [
              "ALLOW",
              "ALERT",
              "BLOCK",
              "BLOCK_AND_ALERT",
              "ALLOW_AND_ENCRYPT"
            ],
            "example": "ALLOW",
            "description": "Rule action"
          },
          "ports": {
            "type": "array",
            "default": [],
            "example": [
              67,
              22
            ],
            "description": "List of Rule included ports",
            "items": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535
            }
          },
          "network_profile": {
            "default": "CORPORATE",
            "enum": [
              "CORPORATE",
              "OFF_CORPORATE",
              "BOTH_NETWORKS"
            ],
            "description": "Network Profile"
          }
        },
        "required": [
          "action",
          "destination",
          "section_position",
          "source"
        ],
        "additionalProperties": false
      },
      "PolicyRuleGetResponse": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "description": "A comma-separated list of fields to return",
            "items": {
              "type": "string"
            }
          },
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedPolicyRuleScheme"
            },
            "nullable": true
          }
        }
      },
      "PolicyRulesBulkEditingScheme": {
        "type": "object",
        "properties": {
          "rule": {
            "description": "Rule updated data",
            "allOf": [
              {
                "$ref": "#/components/schemas/PolicyRuleEditScheme"
              }
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Rule id"
          }
        },
        "required": [
          "id",
          "rule"
        ]
      },
      "PolicyRulesBulkCreate": {
        "type": "object",
        "properties": {
          "number_of_failed": {
            "type": "integer",
            "description": "The number of failed to create/modify objects ids"
          },
          "total_number": {
            "type": "integer",
            "description": "The number of objects to create/modify"
          },
          "number_of_succeeded": {
            "type": "integer",
            "description": "The number of successfully created/modified objects ids"
          },
          "result": {
            "type": "string",
            "description": "Custom result message"
          },
          "succeeded": {
            "type": "array",
            "description": "List of successfully created objects ids",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "PolicyRulesBulkModify": {
        "type": "object",
        "properties": {
          "number_of_failed": {
            "type": "integer",
            "description": "The number of failed to create/modify objects ids"
          },
          "total_number": {
            "type": "integer",
            "description": "The number of objects to create/modify"
          },
          "number_of_succeeded": {
            "type": "integer",
            "description": "The number of successfully created/modified objects ids"
          }
        }
      },
      "PolicyRulesBulkChangeStateScheme": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Rule id"
          }
        },
        "required": [
          "id"
        ]
      },
      "PolicyRuleGetVerdictResponse": {
        "type": "object",
        "properties": {
          "verdict": {
            "enum": [
              "ALLOW",
              "ALERT",
              "BLOCK",
              "BLOCK_AND_ALERT",
              "ALLOW_AND_ENCRYPT"
            ],
            "description": "Rule action"
          },
          "rule_ids": {
            "type": "array",
            "description": "List of rule ids",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "RevisionPostRequest": {
        "type": "object",
        "properties": {
          "ruleset_name": {
            "type": "string",
            "default": null,
            "description": "Ruleset to include in revision, leave empty for all rulesets",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "minLength": 1,
            "description": "Revision comments"
          },
          "reset_hit_count": {
            "type": "boolean",
            "default": false,
            "description": "Whether to reset published rules hit count or not"
          }
        },
        "required": [
          "comments"
        ]
      },
      "RevisionResponse": {
        "type": "object",
        "properties": {
          "revision": {
            "type": "integer",
            "description": "Revision number"
          }
        }
      },
      "RevertToRevisionPostRequest": {
        "type": "object",
        "properties": {
          "revision_number": {
            "type": "integer",
            "example": 1,
            "description": "Revision number to revert to"
          },
          "reset_hit_count": {
            "type": "boolean",
            "default": false,
            "description": "Reset the hit count of the rules in the revision after revert"
          }
        },
        "required": [
          "revision_number"
        ]
      },
      "CreateDnsBlocklistObject": {
        "type": "object",
        "properties": {
          "domains": {
            "type": "array",
            "default": null,
            "description": "list of domains",
            "example": [
              "api.google.com"
            ],
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "default": null,
            "description": "Name of DNS blocklist. Must be unique",
            "example": "ForbiddenDNSList",
            "nullable": true
          },
          "type": {
            "default": null,
            "description": "Type of DNS blocklist. Possible type values: GC_BLOCKLIST,CUSTOM_BLOCKLIST,EXCLUSION_LIST",
            "example": "CUSTOM_BLOCKLIST",
            "nullable": true
          }
        }
      },
      "BlocklistIdObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "default": null,
            "description": "DNS blocklist ID",
            "example": null,
            "nullable": true
          }
        }
      },
      "DnsBlocklistObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
            "description": "DNS blocklist ID"
          },
          "name": {
            "type": "string",
            "example": "ForbiddenDNSList",
            "description": "Name of DNS blocklist"
          },
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "Status of DNS blocklist"
          },
          "domains": {
            "type": "array",
            "example": [
              "api.google.com"
            ],
            "description": "List of domains",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "example": "CUSTOM_BLOCKLIST",
            "description": "DNS blocklist type"
          },
          "hit_count": {
            "type": "integer",
            "example": 5,
            "description": "DNS blocklist hit counter"
          },
          "hit_count_reset_time": {
            "type": "string",
            "example": "2021-11-29 13:10:50.266150",
            "description": "Timestamp of DNS blocklist hit counter start date"
          }
        }
      },
      "DnsBlocklistList": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "example": "ids=None",
            "description": "The filters used"
          },
          "fields": {
            "type": "string",
            "example": "All fields",
            "description": "The fields read"
          },
          "offset": {
            "type": "string",
            "example": "0",
            "description": "Starting position"
          },
          "total": {
            "type": "integer",
            "example": 1,
            "description": "Number of results"
          },
          "objects": {
            "type": "array",
            "example": [
              {
                "id": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
                "name": "ForbiddenDNSList",
                "type": "CUSTOM_BLOCKLIST",
                "domains": [
                  "api.google.com"
                ],
                "enabled": true,
                "hit_count": 5,
                "hit_count_reset_time": "2021-11-29 13:10:50.266150"
              }
            ],
            "description": "List of DNS blocklist objects",
            "items": {
              "$ref": "#/components/schemas/DnsBlocklistObject"
            }
          }
        }
      },
      "EditDnsBlocklistObject": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": null,
            "description": "Status of the DNS blocklist",
            "example": true,
            "nullable": true
          },
          "name": {
            "type": "string",
            "default": null,
            "description": "DNS blocklist name. Must be unique",
            "example": "ForbiddenDNSList",
            "nullable": true
          },
          "domains": {
            "type": "array",
            "default": null,
            "description": "List of domains",
            "example": [
              "api.google.com"
            ],
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "BulkCreateDnsBlocklistObject": {
        "type": "object",
        "properties": {
          "create_list": {
            "type": "array",
            "default": null,
            "description": "list of DNS blocklist definitions",
            "example": [
              {
                "name": "ForbiddenDNSList",
                "type": "CUSTOM_BLOCKLIST",
                "domains": [
                  "api.google.com"
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CreateDnsBlocklistObject"
            },
            "nullable": true
          }
        }
      },
      "BulkEditDnsBlocklistObject": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": null,
            "description": "Status of the DNS blocklist",
            "example": true,
            "nullable": true
          },
          "id": {
            "type": "string",
            "default": null,
            "description": "DNS blocklist ID",
            "example": null,
            "nullable": true
          },
          "name": {
            "type": "string",
            "default": null,
            "description": "Name of the DNS blocklist",
            "example": "ForbiddenDNSList",
            "nullable": true
          },
          "domains": {
            "type": "array",
            "default": null,
            "description": "List of domains",
            "example": [
              "api.google.com"
            ],
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "BulkEditDnsBlocklistRequestObject": {
        "type": "object",
        "properties": {
          "edit_list": {
            "type": "array",
            "default": null,
            "description": "list of DNS blocklist properties to be updated",
            "example": [
              {
                "id": null,
                "name": "ForbiddenDNSList",
                "domains": [
                  "api.google.com"
                ],
                "enabled": true
              }
            ],
            "items": {
              "$ref": "#/components/schemas/BulkEditDnsBlocklistObject"
            },
            "nullable": true
          }
        }
      },
      "CreateDnsBlocklistResultObject": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "default": null,
            "description": "error description, if DNS blocklist create failed",
            "example": null,
            "nullable": true
          },
          "id": {
            "type": "string",
            "default": null,
            "description": "ID of a created DNS blocklist",
            "example": null,
            "nullable": true
          }
        }
      },
      "BulkCreateDnsBlocklistResponseObject": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "default": null,
            "description": "list of results of bulk create DSN blocklist operation",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/CreateDnsBlocklistResultObject"
            },
            "nullable": true
          }
        }
      },
      "ErrorInfoObject": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "default": null,
            "description": "Error description",
            "example": null,
            "nullable": true
          },
          "id": {
            "type": "string",
            "default": null,
            "description": "DNS blocklist ID",
            "example": null,
            "nullable": true
          }
        }
      },
      "BulkEditDnsBlocklistResponse": {
        "type": "object",
        "properties": {
          "succeeded": {
            "type": "array",
            "default": null,
            "description": "IDs of successfully edited DNS blocklists",
            "example": null,
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "missing": {
            "type": "array",
            "default": null,
            "description": "list of not found IDs",
            "example": null,
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "failed": {
            "type": "array",
            "default": null,
            "description": "List of edit DNS blocklist error information",
            "example": null,
            "items": {
              "$ref": "#/components/schemas/ErrorInfoObject"
            },
            "nullable": true
          }
        }
      },
      "ContainerFilterItem": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "enum": [
              "image_name",
              "container_command",
              "container_labels",
              "image_id",
              "container_id",
              "container_names",
              "pod_id",
              "pod_name",
              "pod_namespace"
            ]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ContainerFilterAll": {
        "type": "object",
        "properties": {
          "all": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerFilterItem"
            }
          }
        }
      },
      "ContainerFilter": {
        "type": "object",
        "properties": {
          "any": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerFilterAll"
            }
          }
        }
      },
      "ProcessFilter": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "SavedMapFiltersRequest": {
        "type": "object",
        "properties": {
          "worksite": {
            "type": "array",
            "example": [
              "DEFAULT",
              "9c3f55f6-6b8c-4757-93a6-ad89a1248643"
            ],
            "description": "Filter flows by Worksite IDs",
            "items": {
              "type": "string"
            }
          },
          "policy_rule": {
            "type": "array",
            "example": [
              "Rule_2",
              "Rule_1"
            ],
            "description": "Filter connections which matched a policy rule id",
            "items": {
              "type": "string"
            }
          },
          "protocols": {
            "type": "array",
            "example": [
              "TCP"
            ],
            "description": "Filter connections by specific IP protocol",
            "items": {
              "enum": [
                "TCP",
                "UDP"
              ]
            }
          },
          "destination_ip_address": {
            "type": "array",
            "example": [
              "172.17.0.53",
              "172.17.0.52"
            ],
            "description": "Filter flows by destination IP address",
            "items": {
              "type": "string"
            }
          },
          "flow_users": {
            "type": "array",
            "example": [
              "user_name_1",
              "user_name_2"
            ],
            "description": "Filter by flow users",
            "items": {
              "type": "string"
            }
          },
          "vm": {
            "type": "array",
            "example": [
              "RH_Server_1",
              "RH_Server_2"
            ],
            "description": "Filter by specific asset names",
            "items": {
              "type": "string"
            }
          },
          "source_container": {
            "example": {
              "any": [
                {
                  "all": [
                    {
                      "field": "image_name",
                      "value": "alpine"
                    },
                    {
                      "field": "container_names",
                      "value": "/custom_container"
                    },
                    {
                      "field": "container_labels",
                      "value": "service.name=some-service-name"
                    }
                  ]
                }
              ]
            },
            "description": "Filter by source container attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContainerFilter"
              }
            ]
          },
          "assets_by_ip_address": {
            "type": "array",
            "example": [
              "172.17.0.53",
              "172.17.0.52"
            ],
            "description": "Filter assets by specific IP address/subnet",
            "items": {
              "type": "string"
            }
          },
          "application": {
            "type": "array",
            "example": [
              "application-name"
            ],
            "description": "Filter assets which run the selected applications",
            "items": {
              "type": "string"
            }
          },
          "source_label": {
            "type": "array",
            "example": [
              [
                "7dd77960-f8ca-49c3-8580-b6c330c3059d"
              ],
              [
                "3399b987-7b4c-44a8-ba49-8fa7a17b58a3"
              ]
            ],
            "description": "Filter connection from labels",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "destination_label": {
            "type": "array",
            "example": [
              [
                "7dd77960-f8ca-49c3-8580-b6c330c3059d"
              ],
              [
                "3399b987-7b4c-44a8-ba49-8fa7a17b58a3"
              ]
            ],
            "description": "Filter connection to labels",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "connection_types": {
            "type": "array",
            "example": [
              "REDIRECTED",
              "BLOCKED"
            ],
            "description": "Filter connections by connection type",
            "items": {
              "enum": [
                "BLOCKED",
                "REDIRECTED",
                "SUCCESSFUL",
                "FAILED",
                "VIOLATED_SEGMENTATION_POLICY",
                "ASSOCIATED_WITH_INCIDENT"
              ]
            }
          },
          "ports": {
            "type": "array",
            "example": [
              "7000",
              "5000-6000"
            ],
            "description": "Filter connections by specific destination ports",
            "items": {
              "type": "string"
            }
          },
          "ip_address": {
            "type": "array",
            "example": [
              "172.17.0.53",
              "172.17.0.52"
            ],
            "description": "Filter flows by source/destination IP address",
            "items": {
              "type": "string"
            }
          },
          "process_filter": {
            "example": [
              {
                "type": "process_type",
                "text": "process_text",
                "value": "process_value"
              }
            ],
            "description": "Filter applications",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessFilter"
            }
          },
          "policy_rulesets": {
            "type": "array",
            "example": [
              "Rule_set_1",
              "Rule_set_2"
            ],
            "description": "Filter connections which violate the rulesets",
            "items": {
              "type": "string"
            }
          },
          "user_label": {
            "type": "array",
            "example": [
              [
                "7dd77960-f8ca-49c3-8580-b6c330c3059d"
              ],
              [
                "3399b987-7b4c-44a8-ba49-8fa7a17b58a3"
              ]
            ],
            "description": "Filter by user-defined labels",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "destination_process_filter": {
            "example": [
              {
                "type": "process_type",
                "text": "process_text",
                "value": "process_value"
              }
            ],
            "description": "Filter by destination applications",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessFilter"
            }
          },
          "destination_vm": {
            "type": "array",
            "example": [
              "RH_Server_1",
              "RH_Server_2"
            ],
            "description": "Filter by specific destination asset names",
            "items": {
              "type": "string"
            }
          },
          "source_process_filter": {
            "example": [
              {
                "type": "process_type",
                "text": "process_text",
                "value": "process_value"
              }
            ],
            "description": "Filter by source applications",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessFilter"
            }
          },
          "container": {
            "example": {
              "any": [
                {
                  "all": [
                    {
                      "field": "image_name",
                      "value": "alpine"
                    },
                    {
                      "field": "container_names",
                      "value": "/custom_container"
                    },
                    {
                      "field": "container_labels",
                      "value": "service.name=some-service-name"
                    }
                  ]
                }
              ]
            },
            "description": "Filter by container attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContainerFilter"
              }
            ]
          },
          "source_vm": {
            "type": "array",
            "example": [
              "RH_Server_1",
              "RH_Server_2"
            ],
            "description": "Filter by specific source asset names",
            "items": {
              "type": "string"
            }
          },
          "destination_container": {
            "example": {
              "any": [
                {
                  "all": [
                    {
                      "field": "image_name",
                      "value": "alpine"
                    },
                    {
                      "field": "container_names",
                      "value": "/custom_container"
                    },
                    {
                      "field": "container_labels",
                      "value": "service.name=some-service-name"
                    }
                  ]
                }
              ]
            },
            "description": "Filter by destination container attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContainerFilter"
              }
            ]
          },
          "process_users": {
            "type": "array",
            "example": [
              "website.com\\user_name_0"
            ],
            "description": "Filter by process users",
            "items": {
              "type": "string",
              "pattern": "\\S+\\\\\\S+"
            }
          },
          "unknown_ip_flow": {
            "type": "array",
            "example": [
              "From Unknown IP"
            ],
            "description": "Filter by Unknown IP connections",
            "items": {
              "type": "string",
              "enum": [
                "From Unknown IP",
                "To Unknown IP"
              ]
            }
          },
          "internet_flow": {
            "type": "array",
            "example": [
              "From Internet"
            ],
            "description": "Filter by inbound or outbound Internet connections",
            "items": {
              "type": "string",
              "enum": [
                "From Internet",
                "To Internet"
              ]
            }
          },
          "source_ip_address": {
            "type": "array",
            "example": [
              "172.17.0.53",
              "172.17.0.52"
            ],
            "description": "Filter flows by source IP address",
            "items": {
              "type": "string"
            }
          },
          "label_groups": {
            "type": "array",
            "example": [
              "LabelGroupKey: LabelGroupValue"
            ],
            "description": "Filter by label groups",
            "items": {
              "type": "string",
              "pattern": "\\S+:\\ \\S+"
            }
          }
        }
      },
      "SavedMapIncludeExcludeFiltersRequest": {
        "type": "object",
        "properties": {
          "include": {
            "default": {},
            "description": "Include filters",
            "allOf": [
              {
                "$ref": "#/components/schemas/SavedMapFiltersRequest"
              }
            ]
          },
          "exclude": {
            "default": {},
            "description": "Exclude filters",
            "allOf": [
              {
                "$ref": "#/components/schemas/SavedMapFiltersRequest"
              }
            ]
          }
        }
      },
      "SavedMapCreateObject": {
        "type": "object",
        "properties": {
          "map_type": {
            "enum": [
              "PUBLIC",
              "PRIVATE"
            ],
            "example": "PRIVATE",
            "description": "Saved map permissions type"
          },
          "start_time_filter": {
            "type": "string",
            "format": "date-time",
            "example": "1678856400000",
            "description": "The first time of connections to include in the map. Supported date formats: UNIX epoch - `1521898020000`, RFC-3339 - `2022-04-14T12:34:56.789012Z`, ISO-8601 - `2022-04-14T12:34:56.789012`, ISO-8601 without milliseconds - `2022-05-01T14:30:00`"
          },
          "name": {
            "type": "string",
            "example": "Custom map name",
            "description": "Saved map name"
          },
          "include_incident_marks": {
            "type": "boolean",
            "description": "Highlight flows involving incidents on the resulting map"
          },
          "end_time_filter": {
            "type": "string",
            "format": "date-time",
            "example": "1678860000000",
            "description": "The last time of connections to include in the map. Supported date formats: UNIX epoch - `1521898020000`, RFC-3339 - `2022-04-14T12:34:56.789012Z`, ISO-8601 - `2022-04-14T12:34:56.789012`, ISO-8601 without milliseconds - `2022-05-01T14:30:00`"
          },
          "filters": {
            "default": {},
            "description": "Saved map include/exclude filters",
            "allOf": [
              {
                "$ref": "#/components/schemas/SavedMapIncludeExcludeFiltersRequest"
              }
            ]
          },
          "email_on_progress": {
            "type": "boolean",
            "description": "Send an email notification when the map is ready"
          },
          "include_flow_hit_count": {
            "type": "boolean",
            "description": "Include occurrences count for connections on the map"
          },
          "time_resolution": {
            "type": "boolean",
            "description": "Create a map with the exact requested time range, and enable viewing and filtering by flow times"
          }
        },
        "required": [
          "end_time_filter",
          "name",
          "start_time_filter"
        ]
      },
      "SavedMapObjectId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
            "description": "Saved Map UUID"
          }
        }
      },
      "SavedMapScope": {
        "type": "object",
        "properties": {
          "scope_permissions": {
            "type": "string",
            "example": "NONE",
            "description": "Saved map scope permissions"
          },
          "scope_labels": {
            "example": {
              "or_labels": [
                {
                  "and_labels": [
                    {
                      "id": "1219d8a5-6902-4c48-a2d4-82f1806605cc",
                      "key": "App",
                      "name": "App: SqlServer",
                      "value": "SqlServer"
                    }
                  ]
                }
              ]
            },
            "description": "Saved map scope labels",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrLabels"
              }
            ]
          }
        }
      },
      "SavedMapFiltersResponse": {
        "type": "object",
        "properties": {
          "worksite": {
            "type": "array",
            "example": [
              "DEFAULT",
              "9c3f55f6-6b8c-4757-93a6-ad89a1248643"
            ],
            "description": "Filter flows by Worksite IDs",
            "items": {
              "type": "string"
            }
          },
          "policy_rule": {
            "type": "array",
            "example": [
              "Rule_2",
              "Rule_1"
            ],
            "description": "Filter connections which matched a policy rule id",
            "items": {
              "type": "string"
            }
          },
          "protocols": {
            "type": "array",
            "example": [
              "TCP"
            ],
            "description": "Filter connections by specific IP protocol",
            "items": {
              "enum": [
                "TCP",
                "UDP"
              ]
            }
          },
          "destination_ip_address": {
            "type": "array",
            "example": [
              "172.17.0.53",
              "172.17.0.52"
            ],
            "description": "Filter flows by destination IP address",
            "items": {
              "type": "string"
            }
          },
          "flow_users": {
            "type": "array",
            "example": [
              "user_name_1",
              "user_name_2"
            ],
            "description": "Filter by flow users",
            "items": {
              "type": "string"
            }
          },
          "vm": {
            "type": "array",
            "example": [
              "RH_Server_1",
              "RH_Server_2"
            ],
            "description": "Filter by specific asset names",
            "items": {
              "type": "string"
            }
          },
          "source_container": {
            "example": {
              "any": [
                {
                  "all": [
                    {
                      "field": "image_name",
                      "value": "alpine"
                    },
                    {
                      "field": "container_names",
                      "value": "/custom_container"
                    },
                    {
                      "field": "container_labels",
                      "value": "service.name=some-service-name"
                    }
                  ]
                }
              ]
            },
            "description": "Filter by source container attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContainerFilter"
              }
            ]
          },
          "assets_by_ip_address": {
            "type": "array",
            "example": [
              "172.17.0.53",
              "172.17.0.52"
            ],
            "description": "Filter assets by specific IP address/subnet",
            "items": {
              "type": "string"
            }
          },
          "application": {
            "type": "array",
            "example": [
              "application-name"
            ],
            "description": "Filter assets which run the selected applications",
            "items": {
              "type": "string"
            }
          },
          "source_label": {
            "type": "array",
            "example": [
              [
                "7dd77960-f8ca-49c3-8580-b6c330c3059d"
              ],
              [
                "3399b987-7b4c-44a8-ba49-8fa7a17b58a3"
              ]
            ],
            "description": "Filter connection from labels",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "destination_label": {
            "type": "array",
            "example": [
              [
                "7dd77960-f8ca-49c3-8580-b6c330c3059d"
              ],
              [
                "3399b987-7b4c-44a8-ba49-8fa7a17b58a3"
              ]
            ],
            "description": "Filter connection to labels",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "connection_types": {
            "type": "array",
            "example": [
              "REDIRECTED",
              "BLOCKED"
            ],
            "description": "Filter connections by connection type",
            "items": {
              "enum": [
                "BLOCKED",
                "REDIRECTED",
                "SUCCESSFUL",
                "FAILED",
                "VIOLATED_SEGMENTATION_POLICY",
                "ASSOCIATED_WITH_INCIDENT"
              ]
            }
          },
          "ports": {
            "type": "array",
            "example": [
              "7000",
              "5000-6000"
            ],
            "description": "Filter connections by specific destination ports",
            "items": {
              "type": "string"
            }
          },
          "ip_address": {
            "type": "array",
            "example": [
              "172.17.0.53",
              "172.17.0.52"
            ],
            "description": "Filter flows by source/destination IP address",
            "items": {
              "type": "string"
            }
          },
          "process_filter": {
            "example": [
              {
                "type": "process_type",
                "text": "process_text",
                "value": "process_value"
              }
            ],
            "description": "Filter applications",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessFilter"
            }
          },
          "policy_rulesets": {
            "type": "array",
            "example": [
              "Rule_set_1",
              "Rule_set_2"
            ],
            "description": "Filter connections which violate the rulesets",
            "items": {
              "type": "string"
            }
          },
          "user_label": {
            "type": "array",
            "example": [
              [
                "7dd77960-f8ca-49c3-8580-b6c330c3059d"
              ],
              [
                "3399b987-7b4c-44a8-ba49-8fa7a17b58a3"
              ]
            ],
            "description": "Filter by user-defined labels",
            "items": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "destination_process_filter": {
            "example": [
              {
                "type": "process_type",
                "text": "process_text",
                "value": "process_value"
              }
            ],
            "description": "Filter by destination applications",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessFilter"
            }
          },
          "destination_vm": {
            "type": "array",
            "example": [
              "RH_Server_1",
              "RH_Server_2"
            ],
            "description": "Filter by specific destination asset names",
            "items": {
              "type": "string"
            }
          },
          "source_process_filter": {
            "example": [
              {
                "type": "process_type",
                "text": "process_text",
                "value": "process_value"
              }
            ],
            "description": "Filter by source applications",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessFilter"
            }
          },
          "container": {
            "example": {
              "any": [
                {
                  "all": [
                    {
                      "field": "image_name",
                      "value": "alpine"
                    },
                    {
                      "field": "container_names",
                      "value": "/custom_container"
                    },
                    {
                      "field": "container_labels",
                      "value": "service.name=some-service-name"
                    }
                  ]
                }
              ]
            },
            "description": "Filter by container attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContainerFilter"
              }
            ]
          },
          "source_vm": {
            "type": "array",
            "example": [
              "RH_Server_1",
              "RH_Server_2"
            ],
            "description": "Filter by specific source asset names",
            "items": {
              "type": "string"
            }
          },
          "destination_container": {
            "example": {
              "any": [
                {
                  "all": [
                    {
                      "field": "image_name",
                      "value": "alpine"
                    },
                    {
                      "field": "container_names",
                      "value": "/custom_container"
                    },
                    {
                      "field": "container_labels",
                      "value": "service.name=some-service-name"
                    }
                  ]
                }
              ]
            },
            "description": "Filter by destination container attributes",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContainerFilter"
              }
            ]
          },
          "process_users": {
            "type": "array",
            "example": [
              "website.com\\user_name_0"
            ],
            "description": "Filter by process users",
            "items": {
              "type": "string",
              "pattern": "\\S+\\\\\\S+"
            }
          },
          "unknown_ip_flow": {
            "type": "array",
            "example": [
              "From Unknown IP"
            ],
            "description": "Filter by Unknown IP connections",
            "items": {
              "type": "string",
              "enum": [
                "From Unknown IP",
                "To Unknown IP"
              ]
            }
          },
          "internet_flow": {
            "type": "array",
            "example": [
              "From Internet"
            ],
            "description": "Filter by inbound or outbound Internet connections",
            "items": {
              "type": "string",
              "enum": [
                "From Internet",
                "To Internet"
              ]
            }
          },
          "source_ip_address": {
            "type": "array",
            "example": [
              "172.17.0.53",
              "172.17.0.52"
            ],
            "description": "Filter flows by source IP address",
            "items": {
              "type": "string"
            }
          },
          "label_groups": {
            "type": "array",
            "example": [
              "LabelGroupKey: LabelGroupValue"
            ],
            "description": "Filter by label groups",
            "items": {
              "type": "string",
              "pattern": "\\S+:\\ \\S+"
            }
          }
        }
      },
      "SavedMapIncludeExcludeFiltersResponse": {
        "type": "object",
        "properties": {
          "include": {
            "default": {},
            "description": "Include filters",
            "allOf": [
              {
                "$ref": "#/components/schemas/SavedMapFiltersResponse"
              }
            ]
          },
          "exclude": {
            "default": {},
            "description": "Exclude filters",
            "allOf": [
              {
                "$ref": "#/components/schemas/SavedMapFiltersResponse"
              }
            ]
          }
        }
      },
      "SavedMapObject": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "No flows found for this map",
            "description": "Saved map errors during map generation"
          },
          "map_size": {
            "enum": [
              "UNKNOWN",
              "SMALL",
              "MEDIUM",
              "LARGE"
            ],
            "example": "SMALL",
            "description": "Saved map size"
          },
          "map_type": {
            "enum": [
              "PUBLIC",
              "PRIVATE",
              "INCIDENT",
              "SCHEDULED",
              "PROJECT_VIOLATIONS_REVIEW",
              "VIOLATIONS_REVIEW",
              "GENERIC_INCIDENT",
              "UNIFIED_PUBLIC",
              "UNIFIED_PRIVATE",
              "SEGMENT"
            ],
            "example": "PUBLIC",
            "description": "Saved map permissions to view the map"
          },
          "time_resolution": {
            "type": "boolean",
            "description": "Saved map created with the exact requested time range and enable viewing and filtering by flow times"
          },
          "state": {
            "enum": [
              "READY",
              "IN_PROGRESS",
              "QUEUED",
              "CANCELED",
              "FAILED",
              "EMPTY",
              "PREQUEUED",
              "IN_DELETION"
            ],
            "example": "IN_PROGRESS",
            "description": "Saved map type"
          },
          "start_time_filter": {
            "type": "integer",
            "format": "date-time",
            "example": 1679295962000,
            "description": "The first time of connections to include in the map"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
            "description": "Saved Map UUID"
          },
          "map_scope": {
            "description": "Saved map scope permissions",
            "allOf": [
              {
                "$ref": "#/components/schemas/SavedMapScope"
              }
            ]
          },
          "name": {
            "type": "string",
            "example": "Custom Map",
            "description": "Saved map name"
          },
          "creation_time": {
            "type": "integer",
            "format": "date-time",
            "example": 1679295962000,
            "description": "Saved map creation time"
          },
          "last_access_time": {
            "type": "integer",
            "format": "date-time",
            "example": 1647759962000,
            "description": "Saved map last used time"
          },
          "include_incident_marks": {
            "type": "boolean",
            "description": "Highlighted flows involving incidents on the resulting map"
          },
          "storage_size_bytes": {
            "type": "integer",
            "default": 0,
            "example": 60416,
            "description": "Saved map storage size in bytes"
          },
          "end_time_filter": {
            "type": "integer",
            "format": "date-time",
            "example": 1676876762000,
            "description": "The last time of connections to include in the map"
          },
          "author": {
            "description": "Saved map author",
            "allOf": [
              {
                "$ref": "#/components/schemas/Author"
              }
            ]
          },
          "filters": {
            "description": "Saved map filters",
            "allOf": [
              {
                "$ref": "#/components/schemas/SavedMapIncludeExcludeFiltersResponse"
              }
            ]
          },
          "include_flow_hit_count": {
            "type": "boolean",
            "description": "Included occurrences count for connections on the map"
          },
          "email_on_progress": {
            "type": "boolean",
            "description": "Send an email notification when the map is ready"
          }
        }
      },
      "SavedMapsGetResponse": {
        "type": "object",
        "properties": {
          "start_at": {
            "type": "integer",
            "description": "Offset to start list from"
          },
          "filter": {
            "type": "object",
            "description": "The filters used"
          },
          "order": {
            "type": "array",
            "description": "A comma-separated list of fields to sort by (limited to 3 fields)",
            "items": {
              "type": "string"
            }
          },
          "order_direction": {
            "type": "array",
            "description": "A comma-separated list of order ascending or descending of the field sorting",
            "items": {
              "type": "string"
            }
          },
          "fields": {
            "type": "array",
            "example": "id,author",
            "description": "A comma-separated list of fields to return",
            "items": {
              "type": "string"
            }
          },
          "total": {
            "type": "integer",
            "description": "Number of results"
          },
          "objects": {
            "description": "List of saved map objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SavedMapObject"
            },
            "nullable": true
          }
        }
      },
      "DailyConnectionTaskCreate": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "description": "Fields to return from the query, leave empty for all",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "index_day": {
            "type": "string"
          },
          "filters": {
            "type": "object",
            "description": "Filters to apply on the query",
            "nullable": true
          }
        },
        "required": [
          "index_day"
        ]
      },
      "DailyConnectionTaskResponse": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "description": "Task id for querying the api on task status"
          },
          "status": {
            "enum": [
              "NEW",
              "IN_PROGRESS",
              "DONE",
              "FAILED"
            ],
            "description": "Task current status"
          }
        }
      },
      "DailyConnectionTaskStatusResponse": {
        "type": "object",
        "properties": {
          "connections_count": {
            "type": "integer",
            "description": "Total number of connections collected so far"
          },
          "task_id": {
            "type": "string",
            "description": "Task id for querying the api on task status"
          },
          "logs": {
            "type": "array",
            "description": "Task logs in case of failure",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "enum": [
              "NEW",
              "IN_PROGRESS",
              "DONE",
              "FAILED"
            ],
            "description": "Task current status"
          }
        }
      },
      "CreateWorksiteRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The Worksite’s name",
            "example": "Worksite Name"
          },
          "comment": {
            "type": "string",
            "minLength": 0,
            "maxLength": 2000,
            "description": "A comment for the Worksite",
            "example": "Worksite Comment"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateWorksiteRequestPayload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Worksites’ ID",
            "example": "worksite-id"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "The Worksite’s name",
            "example": "Worksite Name"
          },
          "comment": {
            "type": "string",
            "minLength": 0,
            "maxLength": 2000,
            "description": "A comment for the Worksite",
            "example": "Worksite Comment"
          }
        },
        "required": [
          "id"
        ]
      },
      "CreateWorksiteResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Worksites’ ID",
            "example": "worksite-id"
          }
        },
        "required": [
          "id"
        ]
      },
      "Author1": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The author who created the Worksite’s user name",
            "example": "admin"
          },
          "id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "description": "The Worksite author’s ID",
            "example": "dff34f46-9ae3-4788-8f81-9d015254e092a",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The author who created the Worksite’s description",
            "example": "This is the author description"
          }
        }
      },
      "RetrieveWorksiteObject": {
        "type": "object",
        "properties": {
          "modified_time": {
            "type": "integer",
            "description": "The time of the Worksite’s last modification as an epoch"
          },
          "agents": {
            "type": "integer",
            "description": "The number of Agents assigned to the Worksite"
          },
          "assets": {
            "type": "integer",
            "description": "The number of Assets assigned to the Worksite"
          },
          "id": {
            "type": "string",
            "description": "The Worksites’ ID",
            "example": "worksite-id"
          },
          "name": {
            "type": "string",
            "description": "The Worksite’s name",
            "example": "Worksite Name"
          },
          "k8s_clusters": {
            "type": "integer",
            "description": "The number of k8s clusters that are assigned to the Worksite"
          },
          "rules": {
            "type": "integer",
            "description": "The number of rules assigned to the Worksite"
          },
          "profiles": {
            "type": "integer",
            "description": "The number of agent installation profiles assigned to the Worksite"
          },
          "label_id": {
            "type": "string",
            "format": "uuid"
          },
          "author": {
            "description": "The Worksite’s author",
            "allOf": [
              {
                "$ref": "#/components/schemas/Author1"
              }
            ],
            "nullable": true
          },
          "author_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "description": "The Worksite author’s ID",
            "example": "dff34f46-9ae3-4788-8f81-9d015254e092a",
            "nullable": true
          },
          "first_seen": {
            "type": "integer"
          },
          "comment": {
            "type": "string",
            "minLength": 0,
            "maxLength": 2000,
            "description": "Comment about the Worksite"
          },
          "orchestrations": {
            "type": "integer",
            "description": "The number of orchestrations assigned to the Worksite"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "RetrieveWorksiteResponse": {
        "type": "object",
        "properties": {
          "db_query_time": {
            "type": "string"
          },
          "to": {
            "type": "integer"
          },
          "filter": {
            "type": "object"
          },
          "order": {
            "type": "string"
          },
          "order_direction": {
            "type": "string"
          },
          "objects_mapping_time": {
            "type": "string"
          },
          "current_page": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "dict_mapping_time": {
            "type": "string"
          },
          "from": {
            "type": "integer"
          },
          "results_in_page": {
            "type": "integer"
          },
          "objects": {
            "type": "array",
            "items": {
              "description": "A list of Worksites, can be empty if none found",
              "allOf": [
                {
                  "$ref": "#/components/schemas/RetrieveWorksiteObject"
                }
              ]
            }
          },
          "objects_cleanup_time": {
            "type": "string"
          },
          "is_count_exact": {
            "type": "boolean"
          }
        }
      },
      "WorksitesExportResponse": {
        "type": "object",
        "properties": {
          "export_task_status_id": {
            "type": "string"
          }
        },
        "required": [
          "export_task_status_id"
        ]
      },
      "Filters": {
        "type": "object",
        "properties": {
          "kubernetes_cluster": {
            "type": "array",
            "example": "63aaba92e54d2a4c433ed55a,63aaba92e54d2a4c433ed55a",
            "description": "Filter by K8s clusters, separated by a comma (“,”)",
            "items": {
              "type": "string"
            }
          },
          "modified": {
            "type": "array",
            "example": "1691442000000,1691787540000",
            "description": "Pair of Epoch values indicating the beginning and the end of the time range, separated by a comma (“,”)",
            "items": {
              "type": "integer"
            }
          },
          "gc_filter": {
            "type": "string",
            "example": "name of filter",
            "description": "The filter is used as free text"
          },
          "asset": {
            "type": "array",
            "example": "78fd13a3-84e0-4c3a-a756-89998dd469e9,a4eb46fb-8d75-4e04-8a5b-7a21a15c59a9",
            "description": "Filter by Assets, separated by a comma (“,”)",
            "items": {
              "type": "string"
            }
          },
          "offset": {
            "type": "integer",
            "example": 0,
            "description": "The offset of the results that will return in the request"
          },
          "agent": {
            "type": "array",
            "example": "b3eb26fb-84e0-4c3a-a756-89998dd469e9,28fd13a2-8d75-4e04-8a5b-7a21a15c59a9",
            "description": "Filter by Agents, separated by a comma (“,”)",
            "items": {
              "type": "string"
            }
          },
          "rule": {
            "type": "string",
            "example": "assigned,unassigned",
            "description": "Filter by assigned or unassigned rules"
          },
          "author_id": {
            "type": "array",
            "example": "5442a92e54d2a4c433ed55a,334242a92e54d2a4c4525523",
            "description": "Author IDs separated by a comma (“,”)",
            "items": {
              "type": "string"
            }
          },
          "limit": {
            "type": "integer",
            "example": 20,
            "description": "The limit of the results that will return in the request"
          }
        }
      },
      "NegateArgs": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "Number of Worksites"
          },
          "filters": {
            "description": "Filters for negation",
            "allOf": [
              {
                "$ref": "#/components/schemas/Filters"
              }
            ]
          },
          "unselected": {
            "type": "array",
            "description": "Unselected Worksites, the values in the list should not be deleted",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "filters",
          "unselected"
        ]
      },
      "DeleteWorksitesRequest": {
        "type": "object",
        "properties": {
          "negate_args": {
            "description": "An object for passing Worksite filters or IDs to exclude Worksites",
            "allOf": [
              {
                "$ref": "#/components/schemas/NegateArgs"
              }
            ],
            "nullable": true
          },
          "component_ids": {
            "type": "array",
            "description": "A list of Worksites to delete. An empty list means delete all Worksites.",
            "items": {
              "type": "string",
              "description": "The Worksites’ ID",
              "example": "worksite-id"
            },
            "nullable": true
          }
        },
        "required": [
          "component_ids",
          "negate_args"
        ]
      },
      "DeleteWorksitesResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "skips": {
            "type": "integer"
          },
          "failures": {
            "type": "integer"
          },
          "successes": {
            "type": "integer"
          },
          "details": {
            "type": "string"
          }
        },
        "required": [
          "failures",
          "skips",
          "successes"
        ]
      },
      "AgentLabel": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "example": "Ubuntu 16.04 LTS",
            "description": "Label value"
          },
          "color_index": {
            "type": "integer",
            "example": -1,
            "description": "Label color index"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "eac88cec-eee7-4cd1-8a3f-5bbed99ad16e",
            "description": "Label ID"
          },
          "name": {
            "type": "string",
            "example": "os_name: Ubuntu 16.04 LTS",
            "description": "Label name"
          },
          "key": {
            "type": "string",
            "example": "os_name",
            "description": "Label key"
          }
        }
      },
      "AgentStatusFlag": {
        "type": "object",
        "properties": {
          "severity": {
            "enum": [
              "INFORMATION",
              "WARNING",
              "ERROR"
            ],
            "example": "WARNING",
            "description": "Flag severity level"
          },
          "description": {
            "type": "string",
            "example": "Agent didn't receive Reveal data in the last 60 minutes",
            "description": "Status description"
          },
          "flag_type": {
            "enum": [
              "PollingMode",
              "OutdatedPolicy",
              "OutdatedConfiguration",
              "NoRevealReceived",
              "HighDropRate",
              "AgentMissing",
              "PartialPolicy",
              "EnforcementPaused",
              "NoRevealReported",
              "RevealOffline",
              "EnforcementOffline",
              "RevealModuleError",
              "EnforcementModuleError",
              "DetectionModuleError",
              "DeceptionModuleError",
              "ControllerModuleError",
              "NoResourceLimits",
              "MemoryLimitReached",
              "RevealMemoryLimitReached",
              "EnforcementMemoryLimitReached",
              "DetectionMemoryLimitReached",
              "DeceptionMemoryLimitReached",
              "ControllerMemoryLimitReached",
              "LimitedPolicy",
              "EnforcementModeRevealOnly",
              "EnforcementModeMonitoring",
              "ConfigurationPartiallyApplied",
              "EnforcementMissingKO",
              "DeceptionMissingKO",
              "DeprecatedAgentFlagUsed",
              "DeceptionRedirectionChannelError",
              "DeceptionLimitedCapabilities",
              "SecuritySoftwareDetected",
              "PartiallySupportedInstallation",
              "DNSSecurityOutdated",
              "OrchestrationError",
              "HighPerformanceHWProperties",
              "PartialRevealReported",
              "EnforcementMetricsOnlyMode",
              "SyslogServerRestartFailure",
              "RevealDisabled",
              "OperationRequestFailed",
              "RevealAgentWarning",
              "RevealAgentError",
              "K8sCniNotSupported",
              "K8sEnforcementDisabled",
              "ConflictingNetworkInterfaceDetected",
              "CertificateAboutToExpire",
              "K8sEnforcementOffline",
              "AgentUninstalled",
              "AssetShutdown",
              "AgentStopped",
              "CloudAppNoConnectivity",
              "CloudAppOnBoardingFailed",
              "OutdatedUserIdentityPolicy",
              "AccessModuleError",
              "AccessMemoryLimitReached",
              "AccessModuleBrokerDisconnected",
              "ApiVersionMismatch",
              "EncryptionError",
              "EncryptionSetupError",
              "EncryptionUpdateError"
            ],
            "example": "NoRevealReceived",
            "description": "Status flag type"
          },
          "details": {
            "type": "object",
            "description": "Status flag details"
          },
          "raised_time": {
            "type": "string",
            "format": "date-time",
            "example": "Thu, 06 Jul 2023 07:57:36 GMT",
            "description": "The time the flag was raised"
          }
        }
      },
      "AgentObject": {
        "type": "object",
        "properties": {
          "admin_lock_state": {
            "enum": [
              "UNLOCKED",
              "LOCKED",
              "UNSET"
            ],
            "example": "UNLOCKED",
            "description": "Admin lock state"
          },
          "encryption_status": {
            "enum": [
              "Enabled",
              "Disabled",
              "RunningWithErrors"
            ],
            "example": "ENABLED",
            "description": "Traffic encryption status"
          },
          "agent_id": {
            "type": "string",
            "format": "uuid",
            "example": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
            "description": "Agent ID"
          },
          "agent_version": {
            "type": "string",
            "example": "5.49.23182.28537",
            "description": "Agent version"
          },
          "asset_id": {
            "type": "string",
            "format": "uuid",
            "example": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
            "description": "Asset ID"
          },
          "configuration": {
            "type": "object",
            "example": {
              "agent_operating_mode": "Enforcing"
            },
            "description": "Agent enforcing operating mode"
          },
          "display_name": {
            "type": "string",
            "example": "WindowsAgents",
            "description": "Agent display name"
          },
          "distribution": {
            "type": "string",
            "example": "redhat 7.4",
            "description": "Agent OS distribution"
          },
          "first_seen": {
            "type": "integer",
            "format": "date-time",
            "example": 1679295962000,
            "description": "The time the Agent was first seen"
          },
          "health": {
            "type": "object",
            "example": {
              "deception_agent": {
                "dump_present": "false",
                "status": "DISABLED"
              },
              "aggregator_component_id": "AGR-421DE8B6-1813-CC4F-C71A-3884F2B29871",
              "capabilities": [
                {
                  "is_ok": true,
                  "name": "policy_derivation_type",
                  "state": 7,
                  "text": "Full layer enforcement"
                },
                {
                  "is_ok": true,
                  "name": "full_path_enforcement",
                  "state": 1,
                  "text": "Full path enforcement"
                }
              ],
              "dump_present": "false",
              "status": "RUNNING"
            },
            "description": "Agent health status"
          },
          "hostname": {
            "type": "string",
            "example": "ubuntu-server-16.04-64bit-Agent1",
            "description": "Agent hostname"
          },
          "install_date": {
            "type": "integer",
            "format": "date-time",
            "example": 1679295962000,
            "description": "Agent installation time"
          },
          "installation_profile": {
            "type": "string",
            "example": "default",
            "description": "Agent installation profile"
          },
          "installed_modules": {
            "type": "array",
            "example": [
              "CONTROLLER",
              "DETECTION_AGENT"
            ],
            "description": "Agent installed modules",
            "items": {
              "enum": [
                "DECEPTION_AGENT",
                "REVEAL_AGENT",
                "ENFORCEMENT_AGENT",
                "DETECTION_AGENT",
                "CONTROLLER",
                "ACCESS_AGENT"
              ]
            }
          },
          "ip_addresses": {
            "type": "array",
            "example": [
              "172.17.0.53",
              "172.17.0.52"
            ],
            "description": "Agent IP addresses",
            "items": {
              "type": "string"
            }
          },
          "kernel": {
            "type": "string",
            "example": "4.4",
            "description": "Agent kernel version"
          },
          "kernel_config_hash": {
            "type": "string",
            "example": "84053ded718095d90295e1df",
            "description": "Agent kernel configuration hash"
          },
          "labels": {
            "description": "Agent Labels",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentLabel"
            }
          },
          "label_groups": {
            "type": "array",
            "example": [
              {
                "id": "84053ded-7180-415d-9d28-95d90295e1df",
                "name": "App: Production"
              }
            ],
            "description": "Agent Label Groups",
            "items": {
              "type": "object"
            }
          },
          "last_seen": {
            "type": "integer",
            "format": "date-time",
            "example": 1679295962000,
            "description": "The time the Agent was last seen"
          },
          "last_upgrade_error": {
            "type": "string",
            "example": "upgraded",
            "description": "Agent last upgrade error"
          },
          "last_upgrade_status": {
            "enum": [
              "PENDING",
              "IN_PROGRESS",
              "SUCCESS",
              "FAILURE",
              "TIMEOUT",
              "SKIPPED",
              "ABORTED"
            ],
            "example": "SUCCESS",
            "description": "Agent last upgrade status"
          },
          "last_upgrade_time": {
            "type": "integer",
            "format": "date-time",
            "example": 1679295962000,
            "description": "The Date the Agent was last upgraded"
          },
          "modules_supported_features": {
            "type": "array",
            "example": [
              "IPv4",
              "TCP"
            ],
            "description": "Modules supported features",
            "items": {
              "enum": [
                "IPv4",
                "TCP",
                "UDP",
                "IPv6",
                "Layer7Policy",
                "Layer4Policy",
                "FullImagePath",
                "IPBitmap",
                "NotFlagParsing",
                "NotFlagEnforcement",
                "ShortIP",
                "DcInventoryRevision",
                "DNSEnforcement",
                "Groups",
                "LightRevisionUpdate",
                "EnforcementMode",
                "DriverLog",
                "WindowsFirewallMode",
                "ICMP",
                "ContEnforcement",
                "ProtocolList",
                "IPv6V31",
                "IPv6Enforcement",
                "IPv6ImplicitRules",
                "PolicyIndex",
                "IPv6CidrParseFix",
                "Roaming",
                "LidRemoval",
                "DNSSecurity",
                "CalicoEnforcement",
                "MetricsOnly",
                "WinServices",
                "KthreadEnforcement",
                "DNSSecurityCompact",
                "DriverLogConfSplit",
                "OffCorporatePolicy",
                "FastLabelPolicy",
                "K8sNodeEnforcement",
                "UserGroups",
                "OffCorporateMultiIPs",
                "TrafficEncryption"
              ]
            }
          },
          "os": {
            "enum": [
              "Unknown",
              "Windows",
              "Linux",
              "HTTP",
              "SMBLure",
              "Solaris",
              "HPUX",
              "AIX",
              "F5",
              "FreeBSD",
              "LPAR",
              "macOS"
            ],
            "example": "WINDOWS",
            "description": "Agent Operating System"
          },
          "supported_features": {
            "type": "array",
            "example": [
              "InstallationProfile",
              "CloudInfoQuery"
            ],
            "description": "Agent supported features",
            "items": {
              "type": "string"
            }
          },
          "status_flags": {
            "description": "Agent status flags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentStatusFlag"
            }
          }
        }
      },
      "AgentsGetResponse": {
        "type": "object",
        "properties": {
          "total_count": {
            "type": "integer",
            "description": "Total Number of results"
          },
          "from": {
            "type": "integer",
            "description": "The offset from which the list begin "
          },
          "to": {
            "type": "integer",
            "description": "Maximum number of results to return"
          },
          "filter": {
            "type": "object",
            "description": "The filters used"
          },
          "order": {
            "type": "array",
            "description": "A comma-separated list of fields by which to sort (limited to 3 fields)",
            "items": {
              "type": "string"
            }
          },
          "order_direction": {
            "type": "array",
            "description": "A comma-separated list of the field sorting order- ascending or descending",
            "items": {
              "type": "string"
            }
          },
          "objects": {
            "description": "List of Agent objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentObject"
            },
            "nullable": true
          },
          "fields": {
            "type": "array",
            "example": "id,author",
            "description": "Requested fields",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "StateOpenTypeRequest": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "VM",
              "PROCESS",
              "UNKNOWN_PROCESS",
              "GROUP",
              "INTERNET",
              "SUBNET",
              "HONEYPOT",
              "CONTAINER",
              "POD",
              "KUBERNETES_SERVICE"
            ],
            "example": "VM",
            "description": "The node type"
          },
          "expand": {
            "type": "boolean",
            "example": true,
            "description": "Set 'true' to expand node processes"
          }
        }
      },
      "VisibilityGraphIncludeExcludeFiltersRequest": {
        "type": "object",
        "properties": {
          "include": {
            "default": {},
            "description": "Include filters",
            "allOf": [
              {
                "$ref": "#/components/schemas/SavedMapFiltersRequest"
              }
            ]
          },
          "exclude": {
            "default": {},
            "description": "Exclude filters",
            "allOf": [
              {
                "$ref": "#/components/schemas/SavedMapFiltersRequest"
              }
            ]
          }
        }
      },
      "VisibilityGraphRequestObject": {
        "type": "object",
        "properties": {
          "saved_map_id": {
            "type": "string",
            "format": "uuid",
            "example": "7f938ab7-574f-4bc9-afa6-de27bd52f793",
            "description": "Saved Map UUID"
          },
          "expand_node": {
            "type": "object",
            "default": {},
            "example": {
              "068db442-848b-4c1f-b729-ed1f69e6a61a": {
                "expand": true,
                "type": "VM"
              }
            },
            "description": "The expand list indicates which nodes in the filtered graph should be expanded in order to get their full details. For example, a VM node needs to be \"expand:true\" to see process information.                    The expand list should be comprised of item IDs, and each one with \"expand\" action and the node type.",
            "additionalProperties": {
              "$ref": "#/components/schemas/StateOpenTypeRequest"
            }
          },
          "fields": {
            "type": "array",
            "default": "",
            "example": "port,type",
            "description": "A comma-separated fields names to return",
            "items": {
              "type": "string",
              "enum": [
                "parent",
                "pod_groups",
                "process",
                "process_type",
                "count",
                "assets",
                "is_open",
                "id",
                "name",
                "type",
                "ip_addresses",
                "vm_id",
                "kubernetes_services",
                "container_groups",
                "ruleset_name",
                "processes",
                "process_id",
                "labels",
                "out",
                "destination_ports",
                "in",
                "flows",
                "nodes"
              ]
            },
            "nullable": true
          },
          "group_by": {
            "type": "string",
            "example": "App,Role",
            "description": "A comma-separated labels keys to group assets by label hierarchy",
            "nullable": true
          },
          "start_time_filter": {
            "type": "string",
            "format": "date-time",
            "example": "1678856400000",
            "description": "The first time of connections to include in the list. Supported date formats: UNIX epoch - `1521898020000`, RFC-3339 - `2022-04-14T12:34:56.789012Z`, ISO-8601 - `2022-04-14T12:34:56.789012`, ISO-8601 without milliseconds - `2022-05-01T14:30:00`"
          },
          "end_time_filter": {
            "type": "string",
            "format": "date-time",
            "example": "1678856400000",
            "description": "The last time of connections to include in the list. Supported date formats: UNIX epoch - `1521898020000`, RFC-3339 - `2022-04-14T12:34:56.789012Z`, ISO-8601 - `2022-04-14T12:34:56.789012`, ISO-8601 without milliseconds - `2022-05-01T14:30:00`"
          },
          "force": {
            "type": "boolean",
            "default": false,
            "description": "Show flows even if the graph has too many flows or assets"
          },
          "filters": {
            "default": {},
            "description": "Reveal Flows include/exclude filters",
            "allOf": [
              {
                "$ref": "#/components/schemas/VisibilityGraphIncludeExcludeFiltersRequest"
              }
            ]
          }
        },
        "required": [
          "end_time_filter",
          "saved_map_id",
          "start_time_filter"
        ]
      },
      "FlowObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ff8c8164-d0d1-490b-948c-ead3d2bc6182",
            "description": "Object id"
          },
          "type": {
            "type": "string",
            "example": "flow",
            "description": "Flow type"
          },
          "out": {
            "type": "string",
            "format": "uuid",
            "example": "ff8c8164-d0d1-490b-948c-ead3d2bc6182",
            "description": "Flow destination id"
          },
          "destination_ports": {
            "type": "array",
            "example": [
              57,
              63
            ],
            "description": "Flows ports numbers",
            "items": {
              "type": "integer"
            }
          },
          "in": {
            "type": "string",
            "format": "uuid",
            "example": "ff8c8164-d0d1-490b-948c-ead3d2bc6182",
            "description": "Flow source id"
          }
        }
      },
      "AssetsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Asset id"
          },
          "name": {
            "type": "string",
            "example": "redhat-server1",
            "description": "Asset name"
          }
        }
      },
      "NodeObject": {
        "type": "object",
        "properties": {
          "parent": {
            "type": "string",
            "format": "uuid",
            "example": "ff8c8164-d0d1-490b-948c-ead3d2bc6182",
            "description": "parent id"
          },
          "pod_groups": {
            "type": "array",
            "items": {
              "type": "string",
              "example": [
                "calico-7f5"
              ],
              "description": "Pod groups names"
            }
          },
          "process": {
            "type": "string",
            "example": "dhclient",
            "description": "Process name"
          },
          "process_type": {
            "type": "string",
            "example": "processes",
            "description": "Process type"
          },
          "count": {
            "type": "integer",
            "example": 1,
            "description": "Flows occurrence in the given timeframe"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetsResponse"
            }
          },
          "is_open": {
            "type": "boolean",
            "example": false,
            "description": "Asset map state"
          },
          "id": {
            "type": "string",
            "example": "ff8c8164-d0d1-490b-948c-ead3d2bc6182",
            "description": "Object id"
          },
          "name": {
            "type": "string",
            "example": "win-Agent1",
            "description": "Asset name"
          },
          "type": {
            "type": "string",
            "example": "flow",
            "description": "Flow type"
          },
          "ip_addresses": {
            "type": "array",
            "example": [
              "172.17.0.53",
              "172.17.0.52"
            ],
            "description": "Asset IP addresses/subnet",
            "items": {
              "type": "string"
            }
          },
          "vm_id": {
            "type": "string",
            "format": "uuid",
            "example": "ff8c8164-d0d1-490b-948c-ead3d2bc6182",
            "description": "Vm id"
          },
          "kubernetes_services": {
            "type": "array",
            "items": {
              "type": "string",
              "example": [
                "k8s-cf57"
              ],
              "description": "Kubernetes services names"
            }
          },
          "container_groups": {
            "type": "array",
            "example": [
              "abc-7f5"
            ],
            "items": {
              "type": "string",
              "description": "Container groups names"
            }
          },
          "ruleset_name": {
            "type": "string",
            "example": "user ruleset",
            "description": "Ruleset name"
          },
          "processes": {
            "example": [
              {
                "type": "process_type",
                "text": "process_text",
                "value": "process_value"
              }
            ],
            "description": "Connections processes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessFilter"
            }
          },
          "process_id": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "ff8c8164-d0d1-490b-948c-ead3d2bc6182",
              "description": "Process id"
            }
          },
          "labels": {
            "type": "object"
          }
        }
      },
      "VisibilityGraphResponse": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "example": "type,name",
            "description": "A comma-separated fields names to return",
            "items": {
              "type": "string"
            }
          },
          "flows": {
            "description": "Graph Flows objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlowObject"
            },
            "nullable": true
          },
          "nodes": {
            "description": "Graph Nodes objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeObject"
            },
            "nullable": true
          }
        }
      },
      "OrchestrationGroup": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "minItems": 1,
            "example": [
              "86d5b7f8-5a58-4aeb-b05c-91366dd66bc9",
              "34238-5a58-4aeb-b05c-91366dd66bc9"
            ],
            "description": "List of groups IDs",
            "items": {
              "type": "string"
            }
          },
          "orchestration_id": {
            "type": "string",
            "minLength": 1,
            "example": "bbc8fa9e-c29b-4b05-ab87-8141f2702ac9",
            "description": "Orchestrations group ID"
          }
        },
        "required": [
          "groups",
          "orchestration_id"
        ]
      },
      "UserGroupCreationRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "example": "Local Users",
            "description": "User group title"
          },
          "orchestrations_groups": {
            "minItems": 1,
            "description": "List of orchestrations groups objects to include in the user group",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrchestrationGroup"
            }
          }
        },
        "required": [
          "orchestrations_groups",
          "title"
        ]
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "bbc8fa9e-c29b-4b05-ab87-8141f2702ac9",
            "description": "Group ID"
          },
          "name": {
            "type": "string",
            "example": "Guardicore Admins",
            "description": "Group Name"
          }
        }
      },
      "GroupsByDomain": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "orchestration_id": {
            "type": "string",
            "example": "bbc8fa9e-c29b-4b05-ab87-8141f2702ac9",
            "description": "Orchestration ID"
          }
        }
      },
      "UserGroupCreationResponse": {
        "type": "object",
        "properties": {
          "groups_by_domain_name": {
            "type": "object",
            "description": "Groups objects by domain name",
            "additionalProperties": {
              "description": "Domain name",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GroupsByDomain"
                }
              ]
            }
          },
          "state": {
            "enum": [
              "UNCHANGED",
              "CREATED",
              "MODIFIED",
              "DELETED"
            ],
            "example": "CREATED",
            "description": "Group state"
          },
          "id": {
            "type": "string",
            "example": "bbc8fa9e-c29b-4b05-ab87-8141f2702ac9",
            "description": "Group ID"
          },
          "creation_time": {
            "type": "integer",
            "format": "date-time",
            "example": 1688419381410,
            "description": "The date the group was created"
          },
          "title": {
            "type": "string",
            "example": "Local Administrators",
            "description": "Group title"
          },
          "last_change_time": {
            "type": "integer",
            "format": "date-time",
            "example": 1688419381410,
            "description": "The date the group was last changed"
          },
          "author": {
            "description": "Group author details",
            "allOf": [
              {
                "$ref": "#/components/schemas/Author"
              }
            ]
          }
        }
      },
      "UserGroupsObject": {
        "type": "object",
        "properties": {
          "groups_by_domain_name": {
            "type": "object",
            "description": "Groups objects by domain name",
            "additionalProperties": {
              "description": "Domain name",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GroupsByDomain"
                }
              ]
            }
          },
          "state": {
            "enum": [
              "UNCHANGED",
              "CREATED",
              "MODIFIED",
              "DELETED"
            ],
            "example": "CREATED",
            "description": "Group state"
          },
          "id": {
            "type": "string",
            "example": "bbc8fa9e-c29b-4b05-ab87-8141f2702ac9",
            "description": "Group ID"
          },
          "creation_time": {
            "type": "integer",
            "format": "date-time",
            "example": 1688419381410,
            "description": "The date the group was created"
          },
          "title": {
            "type": "string",
            "example": "Local Administrators",
            "description": "Group title"
          },
          "last_change_time": {
            "type": "integer",
            "format": "date-time",
            "example": 1688419381410,
            "description": "The date the group was last changed"
          },
          "author": {
            "description": "Group author details",
            "allOf": [
              {
                "$ref": "#/components/schemas/Author"
              }
            ]
          }
        }
      },
      "UserGroupsGetResponse": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "description": "The filters used"
          },
          "total_count": {
            "type": "integer",
            "description": "The total number of results"
          },
          "from": {
            "type": "integer",
            "example": 0,
            "description": "The offset from which the list begins"
          },
          "to": {
            "type": "integer",
            "example": 20,
            "description": "The offset which the list ends"
          },
          "order": {
            "type": "array",
            "example": "key",
            "description": "The order fields used",
            "items": {
              "type": "string"
            }
          },
          "order_direction": {
            "type": "array",
            "example": "up",
            "description": "The order directions used",
            "items": {
              "type": "string"
            }
          },
          "objects": {
            "description": "List of user groups objects",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupsObject"
            },
            "nullable": true
          },
          "fields": {
            "type": "array",
            "example": "id,title",
            "description": "A comma-separated list of fields to return",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserGroupDeleteResponse": {
        "type": "object",
        "properties": {
          "groups_by_domain_name": {
            "type": "object",
            "description": "Groups objects by domain name",
            "additionalProperties": {
              "description": "Domain name",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GroupsByDomain"
                }
              ]
            }
          },
          "exists": {
            "type": "boolean",
            "description": "Boolean represents whether the group exists or not"
          },
          "state": {
            "enum": [
              "UNCHANGED",
              "CREATED",
              "MODIFIED",
              "DELETED"
            ],
            "example": "CREATED",
            "description": "Group state"
          },
          "id": {
            "type": "string",
            "example": "bbc8fa9e-c29b-4b05-ab87-8141f2702ac9",
            "description": "Group ID"
          },
          "creation_time": {
            "type": "integer",
            "format": "date-time",
            "example": 1688419381410,
            "description": "The date the group was created"
          },
          "title": {
            "type": "string",
            "example": "Local Administrators",
            "description": "Group title"
          },
          "last_change_time": {
            "type": "integer",
            "format": "date-time",
            "example": 1688419381410,
            "description": "The date the group was last changed"
          },
          "author": {
            "description": "Group author details",
            "allOf": [
              {
                "$ref": "#/components/schemas/Author"
              }
            ]
          },
          "deleted": {
            "type": "boolean",
            "description": "Boolean representing the DELETE action"
          }
        }
      },
      "WorksiteItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Worksites’ ID",
            "example": "worksite-id"
          },
          "name": {
            "type": "string",
            "description": "The Worksite’s name",
            "example": "Worksite Name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "NegateArgs1": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer"
          },
          "filters": {
            "type": "object"
          },
          "unselected": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WorksiteAssignRequest": {
        "type": "object",
        "properties": {
          "entity_type": {
            "enum": [
              "agent",
              "asset",
              "kubernetes_cluster",
              "profile",
              "orchestration"
            ],
            "description": "The entities’ type",
            "example": "agent"
          },
          "negate_args": {
            "$ref": "#/components/schemas/NegateArgs1"
          },
          "id": {
            "type": "string",
            "description": "The Worksites’ ID",
            "example": "worksite-id"
          },
          "entity_ids": {
            "type": "array",
            "description": "Agents’ component_ids, Assets’ asset_ids",
            "example": [
              "component_id",
              "asset_id"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id"
        ]
      },
      "WorksiteAssignResponse": {
        "type": "object",
        "properties": {
          "assigned": {
            "type": "integer",
            "description": "The number of entities assigned to the Worksite"
          },
          "failed": {
            "type": "integer",
            "description": "The number of entities failed to assign to the Worksite"
          }
        }
      },
      "FilterOption": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "count": {
            "type": "integer"
          },
          "value": {
            "type": "string"
          },
          "is_disabled": {
            "type": "boolean"
          }
        }
      },
      "FilterOptionsResponse": {
        "type": "object",
        "properties": {
          "available_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterOption"
            }
          },
          "offset": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "display_more": {
            "type": "boolean"
          },
          "filter_value": {
            "type": "string"
          },
          "is_elastic_db": {
            "type": "boolean"
          }
        }
      },
      "CustomNic": {
        "type": "object",
        "properties": {
          "mac_address": {
            "type": "string",
            "description": "Mac address"
          },
          "ip_addresses": {
            "type": "array",
            "minItems": 1,
            "description": "NIC IP addresses",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "ip_addresses",
          "mac_address"
        ]
      },
      "AssetDetails": {
        "type": "object",
        "properties": {
          "nics": {
            "type": "array",
            "example": [
              {
                "ip_addresses": [
                  "192.68.0.5"
                ],
                "mac_address": "00:50:56:9d:c7:66"
              }
            ],
            "description": "List of assets network interfaces details",
            "items": {
              "$ref": "#/components/schemas/CustomNic"
            }
          },
          "hostname": {
            "type": "string",
            "example": "Linux64_Personal",
            "description": "Asset hostname"
          }
        },
        "required": [
          "nics"
        ]
      },
      "CreateStaticLabelsForAssets": {
        "type": "object",
        "properties": {
          "assets_details": {
            "type": "array",
            "minItems": 1,
            "example": [
              {
                "nics": {
                  "ip_addresses": [
                    "192.68.0.5"
                  ],
                  "mac_address": "00:50:56:9d:c7:66"
                },
                "hostname": "Ubuntu"
              }
            ],
            "description": "List of asset details",
            "items": {
              "$ref": "#/components/schemas/AssetDetails"
            }
          },
          "label_key": {
            "type": "string",
            "example": "Role",
            "description": "Label key"
          },
          "label_value": {
            "type": "string",
            "example": "Server",
            "description": "Label value"
          }
        },
        "required": [
          "assets_details",
          "label_key",
          "label_value"
        ]
      },
      "MaxRecordsResponse": {
        "type": "object",
        "properties": {
          "max_records": {
            "type": "integer"
          }
        }
      },
      "ExportCsvTaskStatusResponse": {
        "type": "object",
        "properties": {
          "exported_csv_file_id": {
            "type": "string",
            "format": "uuid"
          },
          "total_records": {
            "type": "integer"
          },
          "state": {
            "type": "integer"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "creation_time": {
            "type": "string",
            "format": "date-time"
          },
          "reason": {
            "type": "string"
          },
          "records_written": {
            "type": "integer"
          }
        }
      },
      "BloodHoundConfiguredDomainsObject": {
        "type": "object",
        "properties": {
          "domains": {
            "type": "array",
            "example": [
              "example.com"
            ],
            "description": "Active Directory Domains",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BloodHoundStartRunObject": {
        "type": "object",
        "properties": {
          "no_pass": {
            "type": "boolean",
            "example": false,
            "description": "Don't ask for password (useful for -k)"
          },
          "domain_controller": {
            "type": "string",
            "example": "test.local",
            "description": "Override which DC to query (hostname)"
          },
          "disable_pooling": {
            "type": "boolean",
            "example": false,
            "description": "Do not use subprocesses for ACL parsing (only for debugging purposes"
          },
          "enhanced_arguments": {
            "type": "array",
            "example": [
              "-v",
              "-no-pass",
              "--dns-timeout 3"
            ],
            "description": "Enhanced arguments for BloodHound, overrides arguments from API if both provided. Domains can not be provided as overrides arguments, please use targets field",
            "items": {
              "type": "string"
            }
          },
          "hashes": {
            "type": "string",
            "description": "LM:NLTM hashes"
          },
          "target": {
            "type": "string",
            "example": "test.local",
            "description": "Domain to run BloodHound"
          },
          "dns_timeout": {
            "type": "integer",
            "minimum": 1,
            "example": 3,
            "description": "DNS query timeout in seconds (default: 3)"
          },
          "disable_autogc": {
            "type": "boolean",
            "example": false,
            "description": "Do not automatically select a Global Catalog (use only if it gives errors)"
          },
          "customer_folder": {
            "type": "string",
            "description": "Customer folder in GCS to which the result will be stored"
          },
          "global_catalog": {
            "type": "string",
            "description": "File containing computer FQDNs to use as allowlist for any computer based methods"
          },
          "workers": {
            "type": "integer",
            "minimum": 1,
            "example": 10,
            "description": "Number of workers for computer enumeration (default: 10)"
          },
          "collection_method": {
            "type": "string",
            "example": "Default,DCOnly",
            "description": "One of the supported Python BloodHound methods. Possible options: Group, LocalAdmin, Session, Trusts, Default (all previous), DCOnly (no computer connections), DCOM, RDP, PSRemote, LoggedOn, Container, ObjectProps, ACL, All (all except LoggedOn). You can specify more than one by separating them with a comma. (default: Default)"
          },
          "kerberos": {
            "type": "boolean",
            "example": false,
            "description": "Use kerberos"
          },
          "dns_tcp": {
            "type": "boolean",
            "example": false,
            "description": "Use TCP instead of UDP for DNS queries"
          },
          "auth_method": {
            "type": "string",
            "example": "ntlm",
            "description": "{auto,ntlm,kerberos} Authentication methods. Force Kerberos or NTLM only or use auto for Kerberos with NTLM fallback"
          },
          "nameserver": {
            "type": "string",
            "description": "Alternative name server to use for queries"
          },
          "aes_key": {
            "type": "string",
            "description": "AES key to use for Kerberos Authentication (128 or 256 bits)"
          },
          "exclude_dcs": {
            "type": "boolean",
            "example": false,
            "description": "Skip DCs during computer enumeration"
          }
        },
        "required": [
          "target"
        ]
      },
      "BloodHoundRunObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "Started",
            "description": "Status of running BloodHound scan"
          }
        }
      },
      "BloodHoundStopObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "Aborted",
            "description": "Status of attempt to stop BloodHound scan"
          }
        }
      },
      "BloodHoundStatusObject": {
        "type": "object",
        "properties": {
          "customer_folder": {
            "type": "string",
            "description": "Customer folder in GCS to which the result will be stored"
          },
          "reason": {
            "type": "string",
            "example": "Aborted by user",
            "description": "Why current task is failed"
          },
          "statistics": {
            "type": "array",
            "description": "Statistics of BloodHound run",
            "items": {
              "type": "object"
            }
          },
          "status": {
            "type": "string",
            "example": "In progress",
            "description": "Status of running BloodHound scan"
          },
          "bloodhound_version": {
            "type": "string",
            "example": "1.6.1",
            "description": "BloodHound version"
          },
          "logs": {
            "type": "string",
            "description": "Execution logs"
          },
          "bucket_name": {
            "type": "string",
            "description": "Bucket name"
          },
          "report_file_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BloodHoundHistoryObject": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "example": "5",
            "description": "Status of running BloodHound scan"
          },
          "customer_folder": {
            "type": "string"
          },
          "creation_time": {
            "type": "string"
          },
          "report_file_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_by": {
            "type": "string"
          },
          "statistics": {
            "type": "array",
            "description": "Statistics of BloodHound run",
            "items": {
              "type": "object"
            }
          },
          "bloodhound_version": {
            "type": "string",
            "example": "1.6.1",
            "description": "BloodHound version"
          },
          "last_updated_time": {
            "type": "string"
          },
          "logs": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "BloodHoundHistoryGet": {
        "type": "object",
        "properties": {
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BloodHoundHistoryObject"
            }
          }
        }
      },
      "BloodHoundGCPConfigurationObject": {
        "type": "object",
        "properties": {
          "auth_provider_x509_cert_url": {
            "type": "string",
            "description": "Authentication cert provider URL"
          },
          "client_id": {
            "type": "string",
            "description": "Client ID"
          },
          "client_x509_cert_url": {
            "type": "string",
            "description": "Authentication cert client URL"
          },
          "client_email": {
            "type": "string",
            "description": "Client email"
          },
          "type": {
            "type": "string",
            "description": "Type of GCP account"
          },
          "bucket_name": {
            "type": "string",
            "description": "Bucket name"
          },
          "private_key": {
            "type": "string",
            "description": "Private Key"
          },
          "token_uri": {
            "type": "string",
            "description": "Authentication token URI"
          },
          "project_id": {
            "type": "string",
            "description": "Project ID"
          },
          "universe_domain": {
            "type": "string",
            "description": "Universe domain"
          },
          "private_key_id": {
            "type": "string",
            "description": "Private key ID"
          },
          "auth_uri": {
            "type": "string",
            "description": "Authentication URI"
          }
        },
        "required": [
          "bucket_name"
        ]
      },
      "ReplaceBloodHoundGCPConfigurationObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "Success",
            "description": "Status of replacing BloodHound GCP configuration"
          }
        }
      }
    }
  }
}