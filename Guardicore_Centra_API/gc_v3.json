{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "email": "support@guardicore.com"
    },
    "description": "# Introduction\n## Overview\nThis document describes the Guardicore Centra REST API. The API complements the UI offering and provides programmatic access to all Centra functionality.\n\nUsers can build applications that read flow visibility data or security incident details, change the active segmentation policy and more.\n\nAll examples in this document assume an installed Guardicore Management server in `https://{management_server}`\n\n\n## General\nAll POST methods assume an HTTP header: `Content-Type: application/json`\n\nAll timestamps are specified in milliseconds since epoch, UTC time.\n\nAsset IDs are assigned (as UUIDs) by the Guardicore platform.\n\nSome replies are paginated. You can browse the results by specifying offset and limit URL parameters. For example, to get objects 40-59 of the Assets list, query:\n`https://{management_server}/api/v3.0/assets?offset=40&limit=20`\n\n\n## Authentication\nAuthentication with REST API is done using JWT.\n\nObtain a token by sending a POST request to `/api/v3.0/authenticate`, with the following body:\n`{\"username\": \"<username>\", \"password\": \"<password>\"}`\n\nThe response will be `access_token: <token>`\n\nUse the returned token in subsequent requests in one of the following methods:\n- You can include it as an HTTP URI argument, by appending `?token=<token>` to your request\n- You can include an HTTP header in your request: `Authorization: bearer <token>`\n\"\"\"\n",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title": "Guardicore Centraâ„¢ Web API",
    "version": "3.0.0",
    "x-logo": {
      "url": "/assets/images/logo.png"
    }
  },
  "paths": {
    "/agents": {
      "get": {
        "description": "List all agents<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/agents?version=2.6.18639&display_status=UP&status_flags=2&activity=last_12_hours,last_24_hours&limit=10&offset=0&sort=agent_version </pre> <br><br> Notes: <br> Only one of the following filters should be used at a time: `module_status_enforcement`, `module_status_deception`, `module_status_detection`, `module_status_reveal`.\n",
        "operationId": "getAllAgents",
        "parameters": [
          {
            "description": "Agent bundle version with fallback to agent version",
            "in": "query",
            "name": "agent_version",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Agent version",
            "in": "query",
            "name": "version",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Asset kernel version",
            "in": "query",
            "name": "kernel",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Asset operating system",
            "in": "query",
            "name": "os",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "Unknown",
                "Windows",
                "Linux"
              ]
            }
          },
          {
            "description": "Asset label ids",
            "in": "query",
            "name": "labels",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Asset label group ids",
            "in": "query",
            "name": "label groups",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Asset status",
            "in": "query",
            "name": "status",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "ONLINE",
                "OFFLINE"
              ]
            }
          },
          {
            "description": "Agent status flags",
            "in": "query",
            "name": "status_flags",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer",
              "enum": [
                "undefined (Any Flag)",
                "2 (PollingMode)",
                "3 (OutdatedPolicy)",
                "4 (OutdatedConfiguration)",
                "5 (NoRevealReceived)",
                "6 (HighDropRate)",
                "7 (AgentMissing)",
                "8 (PartialPolicy)",
                "9 (EnforcementPaused)",
                "10 (NoRevealReported)",
                "11 (RevealOffline)",
                "12 (EnforcementOffline)",
                "13 (RevealModuleError)",
                "14 (EnforcementModuleError)",
                "15 (DetectionModuleError)",
                "16 (DeceptionModuleError)",
                "17 (ControllerModuleError)"
              ]
            }
          },
          {
            "description": "Agent's enforcement module status",
            "in": "query",
            "name": "module_status_enforcement",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "Active",
                "Not Deployed",
                "Enforcement disabled from management console"
              ]
            }
          },
          {
            "description": "Agent's deception module status",
            "in": "query",
            "name": "module_status_deception",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "Active",
                "Not Deployed"
              ]
            }
          },
          {
            "description": "Agent's detection module status",
            "in": "query",
            "name": "module_status_detection",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "Active",
                "Not Deployed"
              ]
            }
          },
          {
            "description": "Agent's reveal module status",
            "in": "query",
            "name": "module_status_reveal",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "Active",
                "Not Deployed"
              ]
            }
          },
          {
            "description": "Agent activity interval",
            "in": "query",
            "name": "activity",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "last_month",
                "last_week",
                "last_12_hours",
                "last_24_hours",
                "not_active"
              ]
            }
          },
          {
            "description": "Worksite IDs list",
            "in": "query",
            "name": "worksites",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "uuid",
                "type": "string"
              }
            }
          },
          {
            "description": "Agent ID / Agent Hostname / IP Address",
            "in": "query",
            "name": "gc_filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximal number of assets to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Offset of the returned list",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Sort results by value in ascending or descending order",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by first seen, expected two time values separated by comma. The time values in milliseconds since the UNIX epoch (January 1, 1970 00:00:00 UTC)",
            "example": "0,2147483647000",
            "in": "query",
            "name": "first_seen",
            "required": false,
            "schema": {
              "type": "string",
              "format": "int32"
            }
          },
          {
            "description": "Filter by last seen, expected two time values separated by comma. The time values in milliseconds since the UNIX epoch (January 1, 1970 00:00:00 UTC)",
            "example": "0,2147483647000",
            "in": "query",
            "name": "last_seen",
            "required": false,
            "schema": {
              "type": "string",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation - Agent (Paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "objects": {
                          "items": {
                            "$ref": "#/components/schemas/Agent"
                          },
                          "type": "array"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "List agents",
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents-installation/profile": {
      "get": {
        "description": "Get agent installation profile",
        "parameters": [
          {
            "description": "Profile name",
            "example": "test_profile",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Installation profile",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedInstallationProfile"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "*/*": {
                "schema": {
                  "example": {
                    "description": "Missing parameter 'name' from query params",
                    "error_code": "MissingQueryParam"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Profile name was not found",
            "content": {
              "*/*": {
                "schema": {
                  "example": {
                    "description": "Agent Installation Profile 'test_profile' not found",
                    "error_code": "DocumentNotFound"
                  }
                }
              }
            }
          }
        },
        "summary": "Get installation profile",
        "tags": [
          "Installation Profiles"
        ]
      }
    },
    "/agents-installation/profile/{profile_name}": {
      "delete": {
        "description": "Delete an existing agent installation profile",
        "parameters": [
          {
            "description": "Profile name <br /> <br /> IMPORTANT: <br /> It is forbidden to delete profile 'default'.\n",
            "example": "test_profile",
            "in": "path",
            "name": "profile_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Delete Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessfulProfileDeletionResult"
                }
              }
            }
          },
          "403": {
            "description": "It is forbidden to delete profile 'default'",
            "content": {
              "*/*": {
                "schema": {
                  "example": {
                    "description": "Illegal value provided for 'profile_name'",
                    "error_code": "IllegalValue",
                    "error_dump": "Cannot delete profile default"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Profile name was not found",
            "content": {
              "*/*": {
                "schema": {
                  "example": {
                    "description": "Agent Installation Profile 'test_profile' not found",
                    "error_code": "DocumentNotFound"
                  }
                }
              }
            }
          }
        },
        "summary": "Delete installation profile",
        "tags": [
          "Installation Profiles"
        ]
      },
      "put": {
        "description": "Update an existing agent installation profile",
        "parameters": [
          {
            "description": "Profile name",
            "example": "test_profile",
            "in": "path",
            "name": "profile_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "configuration": {
                    "$ref": "#/components/schemas/AgentInstallationProfileConfiguration"
                  },
                  "description": {
                    "$ref": "#/components/schemas/AgentInstallationProfileDescription"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated installation profile",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedInstallationProfile"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "*/*": {
                "schema": {
                  "example": {
                    "description": "Request has invalid data. See error for more details",
                    "error_code": "ValidationError",
                    "error_dump": "Schema validation failed at path 'revealagent' with error: ..."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Profile name was not found",
            "content": {
              "*/*": {
                "schema": {
                  "example": {
                    "description": "Agent Installation Profile 'test_profile' not found",
                    "error_code": "DocumentNotFound"
                  }
                }
              }
            }
          }
        },
        "summary": "Update installation profile",
        "tags": [
          "Installation Profiles"
        ]
      }
    },
    "/agents-installation/profiles": {
      "get": {
        "description": "Get a list of agent installation profiles <br /> <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/agents-v2/configuration/reset?search=test&sort=name</pre>\n",
        "parameters": [
          {
            "description": "Sort results by value in ascending or descending order. Supports multiple sorting (up to three values) <br /> <br /> Note: First item in the list is the 'default' profile, regardless of the sort operation.\n",
            "example": "name",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "description": "Filter profiles by name, description or author_id",
            "example": "test",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation - PaginatedInstallationProfile (Paginated)",
            "content": {
              "*/*": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "objects": {
                          "items": {
                            "$ref": "#/components/schemas/PaginatedInstallationProfile"
                          },
                          "type": "array"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "List installation profiles",
        "tags": [
          "Installation Profiles"
        ]
      },
      "post": {
        "description": "Create a new agent installation profile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "configuration": {
                    "$ref": "#/components/schemas/AgentInstallationProfileConfiguration"
                  },
                  "description": {
                    "$ref": "#/components/schemas/AgentInstallationProfileDescription"
                  },
                  "name": {
                    "$ref": "#/components/schemas/AgentInstallationProfileName"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created installation profile",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedInstallationProfile"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. <br /> <br /> Possible causes: <br /> 1. Profile name contains illegal characters. <br /> 2. Profile name exceed allowed length <br /> 3. Profile with the name already exists in the system\n",
            "content": {
              "*/*": {
                "schema": {
                  "example": {
                    "description": "Request has invalid data. See error for more details",
                    "error_code": "ValidationError",
                    "error_dump": "Profile name is invalid allowed characters are lowercase alphanumeric, '_' and '-' only"
                  }
                }
              }
            }
          }
        },
        "summary": "Create installation profile",
        "tags": [
          "Installation Profiles"
        ]
      }
    },
    "/agents-v2/configuration/reset": {
      "post": {
        "description": "Reset agents to the current configuration of their installed profile. <br /> <br /> For example: <br /> Agent 'sql-server' was installed with profile 'db_server'. A reset request will delete 'sql-server' configuration and apply a new configuration, matching 'db_server' latest configuration.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "component_ids": {
                    "description": "Agent component ids",
                    "example": [
                      "AG-735de135-c5c1-4583-a0e2-4bf485caed2c",
                      "AG-222de135-b5b1-1213-2248-4bf485cae7dk"
                    ],
                    "type": "array",
                    "items": {}
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reset results",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResetConfigurationResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. <br /> <br /> Possible causes: <br /> 1. No agent component ids matching the request. <br /> 2. Trying to reset an agent without a profile (this normally happens on agents with an old version)\n",
            "content": {
              "*/*": {
                "schema": {
                  "example": {
                    "description": "Operation is not permitted",
                    "error_code": "OperationNotPermitted",
                    "error_dump": "Resetting agents without an installation profile is not permitted"
                  }
                }
              }
            }
          }
        },
        "summary": "Reset to agents' installation profiles",
        "tags": [
          "Agents",
          "Installation Profiles"
        ]
      }
    },
    "/agents-v2/diagnostics": {
      "get": {
        "description": "Get the running (or the recently ran) agents diagnostics state<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/agents-v2/diagnostics</pre>\n",
        "operationId": "getAgentDiagnostics",
        "responses": {
          "200": {
            "description": "Successful operation - AgentDiagnostics",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AgentDiagnostics"
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Agents diagnostics",
        "tags": [
          "Agents"
        ]
      },
      "post": {
        "description": "Initialize a collection process for a given set of agents\n",
        "operationId": "startAgentsDiagnostics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "agent_local_config": {
                    "description": "If true - will try to get config files from the agents",
                    "example": true,
                    "type": "boolean"
                  },
                  "agent_logs": {
                    "description": "If true - will try to get logs from the agents",
                    "example": true,
                    "type": "boolean"
                  },
                  "agent_server_logs": {
                    "description": "If true - will try to get logs from the agent machines",
                    "example": true,
                    "type": "boolean"
                  },
                  "agents": {
                    "items": {
                      "properties": {
                        "agent_id": {
                          "example": "AG-735de135-c5c1-4583-a0e2-4bf485caed2c",
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  },
                  "certificate_details": {
                    "description": "If true - will try to get certificates from the agents",
                    "example": true,
                    "type": "boolean"
                  },
                  "log_size": {
                    "description": "Log size value in bytes",
                    "example": 1,
                    "type": "number"
                  },
                  "server_details": {
                    "description": "If true - will try to get info about agent machines",
                    "example": true,
                    "type": "boolean"
                  },
                  "verbose": {
                    "description": "If true - will try to get verbose diagnostics from the agents",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation - AgentDiagnostics",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AgentDiagnostics"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Start agents diagnostics",
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents-v2/diagnostics/abort": {
      "get": {
        "description": "Abort the running agents diagnostics (if one is running)\n",
        "operationId": "getAgentDiagnostics",
        "responses": {
          "200": {
            "description": "Successful operation - AgentDiagnostics",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AgentDiagnostics"
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Abort current agents diagnostics",
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents-v2/diagnostics/download": {
      "get": {
        "description": "Download agents diagnostics, of all agents or a specific agent\n",
        "operationId": "getAgentDiagnostics",
        "parameters": [
          {
            "description": "Diagnostics session ID",
            "in": "query",
            "name": "diagnostic_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specific agent ID",
            "in": "query",
            "name": "agent_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation. Returns a TAR GZ file",
            "content": {
              "application/x-gtar": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/x-gtar": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/x-gtar": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Download agents diagnostics file",
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents/assign": {
      "post": {
        "description": "Set a Scope, for example Worksite to bulk of Agents<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/agents/assign </pre> <br><br> See below for the POST required structure\n",
        "operationId": "bulkAgentsAssign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "component_ids": {
                    "example": [
                      "AG-735de135-c5c1-4583-a0e2-4bf485caed2c",
                      "AG-222de135-b5b1-1213-2248-4bf485cae7dk"
                    ],
                    "items": {
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "negate_args": {
                    "description": "A selection filter definition (mutual exclusive with the above selected parameter)",
                    "properties": {
                      "filters": {
                        "description": "A dictionary of filter keys and values",
                        "properties": {
                          "activity": {
                            "description": "Agent activity interval (comma-separated string values)",
                            "enum": [
                              "last_month",
                              "last_week",
                              "last_12_hours",
                              "last_24_hours",
                              "not_active"
                            ],
                            "type": "string"
                          },
                          "display_status": {
                            "description": "Agent status (comma-separated string values)",
                            "enum": [
                              "Online",
                              "Offline"
                            ],
                            "type": "string"
                          },
                          "gc_filter": {
                            "description": "Search by Agent ID / Agent Hostname / IP Address",
                            "type": "string"
                          },
                          "label groups": {
                            "description": "Asset label group ids (comma-separated string values)",
                            "type": "string"
                          },
                          "labels": {
                            "description": "Asset label ids (comma-separated string values)",
                            "type": "string"
                          },
                          "module_status_deception": {
                            "description": "Agent's deception module status (mutually exclusive with other module_status_* params here) (comma-separated string values)",
                            "enum": [
                              "Active",
                              "Not Deployed"
                            ],
                            "type": "string"
                          },
                          "module_status_detection": {
                            "description": "Agent's detection module status (mutually exclusive with other module_status_* params here) (comma-separated string values)",
                            "enum": [
                              "Active",
                              "Not Deployed"
                            ],
                            "type": "string"
                          },
                          "module_status_enforcement": {
                            "description": "Agent's enforcement module status (mutually exclusive with other module_status_* params here) (comma-separated string values)",
                            "enum": [
                              "Active",
                              "Not Deployed",
                              "Enforcement disabled from management console"
                            ],
                            "type": "string"
                          },
                          "module_status_reveal": {
                            "description": "Agent's reveal module status (mutually exclusive with other module_status_* params here) (comma-separated string values)",
                            "enum": [
                              "Active",
                              "Not Deployed"
                            ],
                            "type": "string"
                          },
                          "os": {
                            "description": "Asset operating system (comma-separated string values)",
                            "enum": [
                              "Unknown",
                              "Windows",
                              "Linux"
                            ],
                            "type": "string"
                          },
                          "status_flags": {
                            "description": "Agent status flags (comma-separated string values)",
                            "enum": [
                              "undefined (Any Flag)",
                              "1 (Restarted)",
                              "2 (PollingMode)",
                              "3 (OutdatedPolicy)",
                              "4 (OutdatedConfig)",
                              "5 (NoRevealReported)",
                              "6 (HighDropRate)",
                              "7 (EnforcementMissing)",
                              "8 (RevealMissing)",
                              "9 (DeceptionMissing)",
                              "10 (AgentMissing)",
                              "11 (DetectionMissing)",
                              "12 (ControllerMissing)",
                              "13 (PartialPolicy)",
                              "14 (EnforcementPaused)"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "unselected": {
                        "description": "Component IDs of agents to exclude from update",
                        "example": [
                          "a106a1ba-15d1-4d10-8299-5c10f34975cb"
                        ],
                        "items": {
                          "format": "uuid",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "selected": {
                    "description": "Scope ID, for example in case of Worksites, it would be worksite ID",
                    "example": "d2a7ff80-e61e-487d-a0b5-c21b2c91105d",
                    "format": "uuid",
                    "type": "string"
                  },
                  "to": {
                    "description": "Type of Scope",
                    "enum": [
                      "worksite"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation - BulkAssignResponse",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BulkAssignResponse"
                    }
                  ],
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Bulk assign Agents to Scope(Worksite)",
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents/assign/options": {
      "get": {
        "description": "Get scope assign options e.g. Worksite for Agents<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/agents/assign/options?to=worksite&search=Boston </pre> <br><br> See below for the GET required structure\n",
        "operationId": "getAgentsAssignOptions",
        "parameters": [
          {
            "description": "Type of Scope",
            "in": "query",
            "name": "to",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "worksite"
              ]
            }
          },
          {
            "description": "Filter scope options by name",
            "example": "Boston",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Scope assign options",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AssignOptions"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get Scope(Worksite) assign options for Agents",
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents/bulk-label/remove/{key}": {
      "post": {
        "description": "Remove a label (by it's key) from multiple agents, as defined in the posted data<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/agents/bulk-label/remove/{key} </pre> <br><br> See below for the POST required structure (which includes filters or direct selection). <br> Note: only one of the following filters should be used at a time: `module_status_enforcement`, `module_status_deception`, `module_status_detection`, `module_status_reveal`.\n",
        "operationId": "bulkLabelAgentsRemove",
        "parameters": [
          {
            "description": "Label key to remove",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/bulkLabelAgentsRemoveBody"
        },
        "responses": {
          "200": {
            "description": "Successful operation - AgentBulkLabelResponse",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AgentBulkLabelResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Bulk remove agents label",
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents/bulk-label/set/{key}/{value}": {
      "post": {
        "description": "Set a label for multiple agents, as defined in the posted data<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/agents/bulk-label/set/{key}/{value} </pre> <br><br> See below for the POST required structure (which includes filters or direct selection). <br> Note: only one of the following filters should be used at a time: `module_status_enforcement`, `module_status_deception`, `module_status_detection`, `module_status_reveal`.\n",
        "operationId": "bulkLabelAgentsSet",
        "parameters": [
          {
            "description": "Label key to set",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Label value to set",
            "in": "path",
            "name": "value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/bulkLabelAgentsRemoveBody"
        },
        "responses": {
          "200": {
            "description": "Successful operation - AgentBulkLabelResponse",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AgentBulkLabelResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Bulk set agents label",
        "tags": [
          "Agents"
        ]
      }
    },
    "/agents/query (Abort Query)": {
      "post": {
        "description": "Abort query<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/agents/query</pre>\n",
        "operationId": "abortQuery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "description": "Action to perform",
                    "enum": [
                      "abort"
                    ],
                    "example": "abort",
                    "type": "string"
                  },
                  "id": {
                    "description": "ID of the query to abort",
                    "example": "8ab96e10-d029-4ca3-870b-df85741819ba",
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query data"
        },
        "responses": {
          "200": {
            "description": "Aborted query info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightInfo"
                }
              }
            }
          },
          "404": {
            "description": "Query not found or already finished",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Abort query",
        "tags": [
          "Insight"
        ]
      }
    },
    "/agents/query (Preview Query)": {
      "post": {
        "description": "Preview how many agents would run a query using the provided filters<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/agents/query</pre>\n",
        "operationId": "previewQuery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "description": "Action to perform",
                    "enum": [
                      "preview_selection"
                    ],
                    "example": "preview_selection",
                    "type": "string"
                  },
                  "filter": {
                    "$ref": "#/components/schemas/InsightFilter"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query data"
        },
        "responses": {
          "200": {
            "description": "Preview selection",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "selected_agents": {
                      "description": "Number of agents the would run the query if action set was \"run\"",
                      "example": 258,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Preview query",
        "tags": [
          "Insight"
        ]
      }
    },
    "/agents/query (Run Query)": {
      "post": {
        "description": "Run a new query on agents selected by provided filter<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/agents/query</pre>\n",
        "operationId": "runQuery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "description": "Action to perform",
                    "enum": [
                      "run"
                    ],
                    "example": "run",
                    "type": "string"
                  },
                  "filter": {
                    "$ref": "#/components/schemas/InsightFilter"
                  },
                  "query": {
                    "description": "The query to run on selected agents",
                    "example": "SELECT * FROM Routes;",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query data"
        },
        "responses": {
          "200": {
            "description": "New query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Run query",
        "tags": [
          "Insight"
        ]
      }
    },
    "/agents/query/{query_id}": {
      "get": {
        "description": "Get a query info and status by its ID<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/agents/query/{query_id}</pre>\n",
        "operationId": "getQueryInfo",
        "parameters": [
          {
            "description": "ID of the query",
            "in": "path",
            "name": "query_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Query info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightInfo"
                }
              }
            }
          },
          "404": {
            "description": "Query ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get Query Info",
        "tags": [
          "Insight"
        ]
      }
    },
    "/agents/query/{query_id}/label (Label Agents)": {
      "post": {
        "description": "Label all queried agents that returned at least one row for this query.<br> Agents which failed to run the query will not be labeled.<br> If the key/value set provided for the label match to an existing label, the agents will be added to the existing label<br> otherwise, a new label will be created. Nothing will happen on an agent that returned a row but it already exists in the selected label. Query must be in <b>Done</b> status to label agents. otherwise error 409 will be returned<br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/agents/query/{query_id}/label</pre>\n",
        "operationId": "labelAgents",
        "parameters": [
          {
            "description": "ID of the query",
            "in": "path",
            "name": "query_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "description": "Action to perform",
                    "enum": [
                      "add_to_label"
                    ],
                    "example": "add_to_label",
                    "type": "string"
                  },
                  "label_key": {
                    "description": "New or existing label key",
                    "example": "Env",
                    "type": "string"
                  },
                  "label_value": {
                    "description": "New or existing label value",
                    "example": "Prod",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Labeling Info",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "added_to_label_count": {
                      "description": "Number of agents added to the selected label",
                      "example": 124,
                      "type": "integer"
                    },
                    "id": {
                      "description": "ID of the label matching the key:value pair (Existing or New label)",
                      "type": "string"
                    },
                    "key": {
                      "description": "New or existing label key",
                      "example": "Env",
                      "type": "string"
                    },
                    "new_label": {
                      "description": "True if a new label was created, False otherwise",
                      "example": true,
                      "type": "boolean"
                    },
                    "value": {
                      "description": "New or existing label value",
                      "example": "Prod",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Missing label key or value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Query not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Query is not in Done status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Label Agents",
        "tags": [
          "Insight"
        ]
      }
    },
    "/agents/query/{query_id}/label (Preview Labeling)": {
      "post": {
        "description": "Preview the number of agents that would be labeled based on the provided query results and label data.<br> Agents will not be counted if the provided label already exists and contains them.<br> This method also returns a boolean indicating whether a new label would be created when labeling with this data.<br> If no key name or value are provided, all agents in query that would be added to a new label will be counted.<br> No actual labeling will occur when calling this method.<br> Query must be in <b>Done</b> status to get a valid preview. otherwise error 409 will be returned<br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/agents/query/{query_id}/label</pre>\n",
        "operationId": "previewLabeling",
        "parameters": [
          {
            "description": "ID of the query",
            "in": "path",
            "name": "query_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "description": "Action to perform",
                    "enum": [
                      "preview_agents_to_label"
                    ],
                    "example": "preview_agents_to_label",
                    "type": "string"
                  },
                  "label_key": {
                    "description": "New or existing label key",
                    "example": "Env",
                    "type": "string"
                  },
                  "label_value": {
                    "description": "New or existing label value",
                    "example": "Prod",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Labeling Preview",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "new_label": {
                      "example": true,
                      "type": "boolean"
                    },
                    "selected_agents": {
                      "example": 124,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Query not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Query is not in Done status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Preview agent Labeling",
        "tags": [
          "Insight"
        ]
      }
    },
    "/agents/query/{query_id}/results": {
      "get": {
        "description": "Get a pagination of the existing results of a query.<br> Results might change between calls until query status is set to <b>Done</b> or <b>Aborted</b>.<br> Each result contains the ID and the name of the agent that returned the result followed by the returned data.<br> Query status can be found on <b>Get query status</b> API call<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/agents/query/{query_id}/results</pre>\n",
        "operationId": "getQueryResults",
        "parameters": [
          {
            "description": "ID of the query",
            "in": "path",
            "name": "query_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation - Query Result (Paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "objects": {
                          "items": {
                            "$ref": "#/components/schemas/InsightResultList"
                          },
                          "type": "array"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Query ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get Query Results",
        "tags": [
          "Insight"
        ]
      }
    },
    "/agents/query/{query_id}/results/count": {
      "get": {
        "description": "Get the number of existing results of a query.<br> Query status can be found on <b>Get query status</b> API call<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/agents/query/{query_id}/results/count</pre>\n",
        "operationId": "getQueryResultsCount",
        "parameters": [
          {
            "description": "ID of the query",
            "in": "path",
            "name": "query_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Count",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CountResponse"
                    },
                    {
                      "properties": {
                        "count": {
                          "type": "integer"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Query ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get count of Query Results",
        "tags": [
          "Insight"
        ]
      }
    },
    "/assets": {
      "get": {
        "description": "<p>List all of the data center assets the platform is monitoring, optionally filtered by a number of criteria.</p> <p>The reply includes a list of all Virtual Machines, and for each one whether a visibility agent is properly installed and running on it.</p> <p>The list includes, by default, machines that were seen in the past and are no longer active.</p> <br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/assets?status=on&search=win&limit=100&offset=100&sort=-last_seen</pre>\n",
        "operationId": "getAllAssets",
        "parameters": [
          {
            "description": "Assets turned on/off",
            "in": "query",
            "name": "status",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "on",
                "off"
              ]
            }
          },
          {
            "description": "Asset ID. Should start with \"vm:\" prefix",
            "in": "query",
            "name": "asset",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "description": "Asset label ids",
            "in": "query",
            "name": "labels",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Asset label group ids",
            "in": "query",
            "name": "label_groups",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Worksite IDs list",
            "in": "query",
            "name": "worksites",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "format": "uuid",
                "type": "string"
              }
            }
          },
          {
            "description": "Filter asset by name or ip",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximal number of assets to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Offset of the returned list",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Sort results by value in ascending or descending order",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation - Asset (Paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "objects": {
                          "items": {
                            "$ref": "#/components/schemas/Asset"
                          },
                          "type": "array"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "List assets",
        "tags": [
          "Assets"
        ]
      }
    },
    "/assets/assign": {
      "post": {
        "description": "Set a Scope, for example Worksite to bulk of Assets<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/assets/assign </pre> <br><br> See below for the POST required structure\n",
        "operationId": "bulkAssetsAssign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "asset_ids": {
                    "example": [
                      "735de135-c5c1-4583-a0e2-4bf485caed2c",
                      "222de135-b5b1-1213-2248-4bf485cae7dk"
                    ],
                    "items": {
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "negate_args": {
                    "description": "In all-selected mode the IDs are retrieved with negation after filtering. If specified, asset_ids parameter is ignored",
                    "properties": {
                      "filters": {
                        "description": "A dictionary of filter keys and values",
                        "properties": {
                          "os": {
                            "description": "Asset operating system (comma-separated string values)",
                            "enum": [
                              "Unknown",
                              "Windows",
                              "Linux"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "unselected": {
                        "description": "IDs of assets to exclude from update",
                        "example": [
                          "a106a1ba-15d1-4d10-8299-5c10f34975cb"
                        ],
                        "items": {
                          "format": "uuid",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "selected": {
                    "description": "Scope ID, for example in case of Worksites, it would be worksite ID",
                    "example": "d2a7ff80-e61e-487d-a0b5-c21b2c91105d",
                    "format": "uuid",
                    "type": "string"
                  },
                  "to": {
                    "description": "Type of Scope",
                    "enum": [
                      "worksite"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation - BulkAssignResponse",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BulkAssignResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Bulk assign Assets to Scope(Worksite)",
        "tags": [
          "Assets"
        ]
      }
    },
    "/assets/assign/options": {
      "get": {
        "description": "Get scope assign options e.g. Worksite for Assets<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/assets/assign/options?to=worksite&search=Boston </pre> <br><br> See below for the GET required structure\n",
        "operationId": "getAssetsAssignOptions",
        "parameters": [
          {
            "description": "Type of Scope",
            "in": "query",
            "name": "to",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "worksite"
              ]
            }
          },
          {
            "description": "Filter scope options by name",
            "example": "Boston",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Scope assign options",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AssignOptions"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get Scope(Worksite) assign options for Assets",
        "tags": [
          "Assets"
        ]
      }
    },
    "/assets/deactivate": {
      "post": {
        "description": "Deactivate assets by their IDs",
        "operationId": "bulkLabelAgentsSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "component_ids": {
                    "example": "0e0268bf-6921-44e4-882c-1544232242bd,a7aa1054-a6d8-497d-b739-7fb295e6a59f",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Asset ids to deactivate separated by commas",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "description": "Number of deactivated assets",
                      "example": 2,
                      "type": "integer"
                    },
                    "deactivated_assets": {
                      "description": "Deactivated asset ids and names",
                      "properties": {
                        "0e0268bf-6921-44e4-882c-1544232242bd": {
                          "example": "redhat-server-7.4-64bit-Agent1",
                          "type": "string"
                        },
                        "a7aa1054-a6d8-497d-b739-7fb295e6a59f": {
                          "example": "redhat-server-7.4-64bit-Agent2",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "error": {
                      "example": "",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "This user has no permissions to deactivate assets",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": "This user has no permissions to deactivate assets",
                    "error_code": "Operation is not permitted"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Assets deactivation failed since selected assets are missing/unknown",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": "Failed to deactivate assets",
                    "error_code": "Document not found"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Could not complete the operation due to a server a error. See error for more details",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": "Failed to deactivate assets",
                    "error_code": "Could not complete the operation due to a server a error. See error for more details"
                  }
                }
              }
            }
          }
        },
        "summary": "Deactivate assets",
        "tags": [
          "Assets"
        ]
      }
    },
    "/assets/labels/{key}/{value}": {
      "post": {
        "description": "Creates static labels<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/assets/labels/App/SqlServer</pre>\n",
        "operationId": "createStaticLabels",
        "parameters": [
          {
            "description": "Label key",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Label value",
            "in": "path",
            "name": "value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "vms": {
                    "items": {
                      "example": "3edd42a8-8410-40c1-81e2-28eda26462cc",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "list of vm ids to add the label to",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabelMinimal"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Create static labels",
        "tags": [
          "Labels"
        ]
      }
    },
    "/assets/{assetID}/policy": {
      "get": {
        "parameters": [
          {
            "description": "Requested asset ID",
            "in": "path",
            "name": "assetID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation. Returns a JSON file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get agent policy for a specific asset",
        "tags": [
          "Assets",
          "Agents",
          "Segmentation Policy Rules"
        ]
      }
    },
    "/blacklist": {
      "post": {
        "operationId": "postInternalBlacklist",
        "parameters": [
          {
            "description": "Blacklist type",
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "ip",
                "file"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": "[{\"key\": \"10.0.0.0\", \"tags\": [\"tag1\", \"tag2\"]}, {\"key\": \"10.0.0.1\", \"tags\": [\"tag3\", \"tag4\"]}]",
                "items": {
                  "properties": {
                    "key": {
                      "description": "value",
                      "type": "string"
                    },
                    "tags": {
                      "items": {
                        "description": "tag",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            }
          },
          "description": "Blacklist data"
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlacklistResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Set Internal Blacklist Definition",
        "tags": [
          "Internal Blacklist"
        ]
      }
    },
    "/fim/revisions/publish": {
      "delete": {
        "operationId": "discardFileTemplates",
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the revision</span>",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "revision": {
                      "example": 4,
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Discard templates",
        "tags": [
          "Integrity Monitor Templates"
        ]
      },
      "post": {
        "operationId": "publishFileTemplates",
        "parameters": [
          {
            "description": "Comment for the template publish",
            "in": "query",
            "name": "comments",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the revision</span>",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "revision": {
                      "example": 4,
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Publish templates",
        "tags": [
          "Integrity Monitor Templates"
        ]
      }
    },
    "/fim/stale-hashes": {
      "get": {
        "operationId": "getStaleHashes",
        "parameters": [
          {
            "description": "Show hashes that weren't checked for this amount of days",
            "in": "query",
            "name": "interval_days",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation - Flow - Returns a list of templates",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "objects": {
                      "items": {
                        "$ref": "#/components/schemas/StaleHashesResponse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "List stale hashes",
        "tags": [
          "Integrity Monitor Templates"
        ]
      },
      "post": {
        "operationId": "deleteStaleHashes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "description": "action = delete for deletion",
                    "example": "delete",
                    "type": "string"
                  },
                  "confirm": {
                    "description": "Whether to confirm deletion of files or templates, if they only contain the requested hash",
                    "example": true,
                    "type": "boolean"
                  },
                  "hash_tuples": {
                    "description": "List of hash tuples that need to be deleted",
                    "items": {
                      "$ref": "#/components/schemas/HashTuple"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Hashes data"
        },
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns files or templates that might be deleted if confirmation wasn't passed</span>",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "templates": {
                      "items": {
                        "$ref": "#/components/schemas/DeleteStaleHashesResponse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Delete stale hashes",
        "tags": [
          "Integrity Monitor Templates"
        ]
      }
    },
    "/fim/templates": {
      "get": {
        "operationId": "getFileTemplates",
        "parameters": [
          {
            "description": "Labels which their assets will be validated against the template",
            "in": "query",
            "name": "affected_label_ids",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "description": "Assets that will be validated against the template",
            "in": "query",
            "name": "affected_asset_ids",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "description": "Templates which are set as enabled or disabled",
            "in": "query",
            "name": "enabled",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter by partial file path or template's title",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximal number of assets to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Offset of the returned list",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Sort results by value in ascending or descending order. Supports multiple sorting (up to three values)",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation - Flow - Returns a list of templates",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "objects": {
                      "items": {
                        "$ref": "#/components/schemas/IntegrityMonitorTemplateResponse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "List templates",
        "tags": [
          "Integrity Monitor Templates"
        ]
      },
      "post": {
        "operationId": "createFileTemplates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "templates": {
                    "description": "List of new templates to create",
                    "items": {
                      "$ref": "#/components/schemas/IntegrityMonitorTemplate"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Template's data"
        },
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the template object</span>",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "templates": {
                      "items": {
                        "$ref": "#/components/schemas/IntegrityMonitorTemplateResponse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Create templates",
        "tags": [
          "Integrity Monitor Templates"
        ]
      }
    },
    "/fim/templates/{templateId}": {
      "post": {
        "operationId": "modifyFileTemplate",
        "parameters": [
          {
            "description": "Template's id",
            "in": "path",
            "name": "templateId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "description": "Delete / Undo delete or Revert template",
                    "enum": [
                      "delete",
                      "undelete",
                      "revert"
                    ],
                    "example": "delete",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the template object</span>",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "template": {
                      "$ref": "#/components/schemas/IntegrityMonitorTemplateResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Delete / Undo delete / Revert template",
        "tags": [
          "Integrity Monitor Templates"
        ]
      },
      "put": {
        "operationId": "editFileTemplate",
        "parameters": [
          {
            "description": "Template's id",
            "in": "path",
            "name": "templateId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrityMonitorTemplate"
              }
            }
          },
          "description": "Updated template values to be passed in the request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the template object</span>",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "template": {
                      "$ref": "#/components/schemas/IntegrityMonitorTemplateResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Edit template",
        "tags": [
          "Integrity Monitor Templates"
        ]
      }
    },
    "/incidents": {
      "get": {
        "description": "List all incidents <br><br>Examples: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/incidents?id=b36d449c-7e1c-471a-ad85-f04c7d5e2af1&severity=Medium&incident_group=GRP-595e18cf&incident_type=Network%20Scan&assets=172.17.0.4,172.17.0.1&destination=security.ubuntu.com&tag=Arp%20Scan&tag__not=Listed%20IP&offset=0&limit=20&sort=incident_type,-start_time&from_time=1509271980000&to_time=1511819999999 <br><br>https://{management_server}/api/v3.0/incidents?id=808&from_time=1509271980000&to_time=1511819999999</pre>\n",
        "operationId": "getAllIncidents",
        "parameters": [
          {
            "description": "Incident id value",
            "in": "query",
            "name": "id",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Incident severity",
            "in": "query",
            "name": "severity",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "Low",
                "Medium",
                "High"
              ]
            }
          },
          {
            "description": "Incident group",
            "in": "query",
            "name": "incident_group",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Incident type",
            "in": "query",
            "name": "incident_type",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "Incident",
                "Deception",
                "Network Scan",
                "Reveal",
                "Experimental"
              ]
            }
          },
          {
            "description": "Incident source/destination asset",
            "in": "query",
            "name": "assets",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Incident source asset",
            "in": "query",
            "name": "source",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Incident destination asset",
            "in": "query",
            "name": "destination",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Incident included tags",
            "in": "query",
            "name": "tag",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Incident excluded tags",
            "in": "query",
            "name": "tags__not",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximal number of assets to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Offset of the returned list",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Sort results by value in ascending or descending order. Supports multiple sorting (up to three values)",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "incident start time min value",
            "in": "query",
            "name": "from_time",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "timestamp"
            }
          },
          {
            "description": "incident start time max value",
            "in": "query",
            "name": "to_time",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "timestamp"
            }
          },
          {
            "description": "incident closed time min value",
            "in": "query",
            "name": "from_closed_time",
            "schema": {
              "type": "integer",
              "format": "timestamp"
            }
          },
          {
            "description": "incident closed time max value",
            "in": "query",
            "name": "to_closed_time",
            "schema": {
              "type": "integer",
              "format": "timestamp"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation - Incident (Paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "objects": {
                          "items": {
                            "$ref": "#/components/schemas/Incident"
                          },
                          "type": "array"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "List incidents",
        "tags": [
          "Incidents"
        ]
      }
    },
    "/k8s_clusters": {
      "get": {
        "description": "<br><br>Examples: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\"> <br><br>Filtering: <br><br>https://{management_server}/api/v3.0/k8s_clusters?id=2a74aa15-8a8c-456a-be87-f88ef1bb4bde <br><br>https://{management_server}/api/v3.0/k8s_clusters?name=aks_2 <br><br>https://{management_server}/api/v3.0/k8s_clusters?cluster_type=AKS <br><br>https://{management_server}/api/v3.0/k8s_clusters?version=v1.20.9 <br><br>https://{management_server}/api/v3.0/k8s_clusters?status_flag_type=OrchestrationError <br><br>Pagination and sorting: <br><br>https://{management_server}/api/v3.0/k8s_clusters?offset=1&limit=5&?sort=-id </pre>\n",
        "operationId": "getK8sClusters",
        "parameters": [
          {
            "description": "By id",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "By name",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "By flag type",
            "in": "query",
            "name": "status_flag_type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "By type",
            "in": "query",
            "name": "cluster_type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "By version",
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximal number of clusters to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Offset of the returned list",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Sort results by value in ascending or descending order",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation - Kubernetes Clusters (Paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "objects": {
                          "items": {
                            "$ref": "#/components/schemas/KubernetesCluster"
                          },
                          "type": "array"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "List clusters",
        "tags": [
          "Kubernetes Clusters"
        ]
      }
    },
    "/k8s_clusters/assign/options": {
      "get": {
        "description": "Get scope assign options e.g. Worksite for Kubernetes Clusters<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/k8s_clusters/assign/options?to=worksite&search=Boston </pre> <br><br> See below for the GET required structure\n",
        "operationId": "getK8sClusterAssignOptions",
        "parameters": [
          {
            "description": "Type of Scope",
            "in": "query",
            "name": "to",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "worksite"
              ]
            }
          },
          {
            "description": "Filter scope options by name",
            "example": "Boston",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Scope assign options",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AssignOptions"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get Scope(Worksite) assign options for Kubernetes Clusters",
        "tags": [
          "Kubernetes Clusters"
        ]
      },
      "post": {
        "description": "Set a Scope, for example Worksite to bulk of Kubernetes Clusters<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/k8s_clusters/assign </pre> <br><br> See below for the POST required structure\n",
        "operationId": "bulkK8sClustersAssign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "k8s_clusters": {
                    "example": [
                      "735de135-c5c1-4583-a0e2-4bf485caed2c",
                      "222de135-b5b1-1213-2248-4bf485cae7dk"
                    ],
                    "items": {
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "negate_args": {
                    "description": "In all-selected mode the IDs are retrieved with negation after filtering. If specified, k8s_clusters parameter is ignored",
                    "properties": {
                      "filters": {
                        "description": "A dictionary of filter keys and values",
                        "properties": {
                          "os": {
                            "description": "Asset operating system (comma-separated string values)",
                            "enum": [
                              "Unknown",
                              "Windows",
                              "Linux"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "unselected": {
                        "description": "IDs of k8s clusters to exclude from update",
                        "example": [
                          "a106a1ba-15d1-4d10-8299-5c10f34975cb"
                        ],
                        "items": {
                          "format": "uuid",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "selected": {
                    "description": "Scope ID, for example in case of Worksites, it would be worksite ID",
                    "example": "d2a7ff80-e61e-487d-a0b5-c21b2c91105d",
                    "format": "uuid",
                    "type": "string"
                  },
                  "to": {
                    "description": "Type of Scope",
                    "enum": [
                      "worksite"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation - BulkAssignResponse",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BulkAssignResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Bulk assign Kubernetes Clusters to Scope(Worksite)",
        "tags": [
          "Kubernetes Clusters"
        ]
      }
    },
    "/k8s_clusters/configuration/{system_id}": {
      "post": {
        "description": "<br><br>Examples: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/k8s_clusters/configuration/cluster-id </pre>\n",
        "operationId": "updateK8sClusters",
        "parameters": [
          {
            "description": "Cluster ID",
            "in": "path",
            "name": "system_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "configuration": {
                    "properties": {
                      "debug_enabled": {
                        "example": true,
                        "type": "boolean"
                      },
                      "enforcement_enabled": {
                        "example": true,
                        "type": "boolean"
                      },
                      "reveal_mode": {
                        "enum": [
                          "Enabled",
                          "Disabled"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "configuration update",
          "required": true
        },
        "summary": "Update cluster configuration",
        "tags": [
          "Kubernetes Clusters"
        ],
        "responses": {
          "default": {
            "description": "Default response"
          }
        }
      }
    },
    "/visibility/graph": {
      "post": {
        "description": "Get a saved map of a list of flows, filtered and grouped by a number of criteria. <br><br> A saved map is defined in Saved Maps operations section. <br><br> A flow is defined as all sessions made from a specific process instance to another process instance, on a specific port, in a specific IP protocol (`TCP/UDP`). For example (`nginx ->  mysqld (TCP port 3306)`) is a unique flow between 2 specific instances of nginx and MySQL server.\n  * In case that the source process isn't known, for example incoming web requests to a nginx instance, the flow source will be the source IP\n  * In case that the destination process isn't known, for example outgoing sessions from an internal app to a cloud service, the flow destination will be the destination IP & port\n</ul> The reply will include all objects that the filter applied to, with details according to the provided state list. <br><br> Example:<br> Get saved map of all process flows on December 3rd 2015, grouped by App labels, from or to VM name \"acme-app\": <br> <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/graph?start_time=1511784000000&end_time=1511787600000&group_by=App&saved_map_id=a4cb5742-f361-4903-aa31-f9e3d83084d8</pre> Body: <br> `{\"state\":  {}, \"filters\": {\"include\": {\"vm\": [\"acme-app\"]}, \"exclude\": {}}, \"force\": false, \"overlays\": {}}`\n",
        "operationId": "getRule",
        "parameters": [
          {
            "description": "flows start time",
            "in": "query",
            "name": "start_time",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "timestamp"
            }
          },
          {
            "description": "flows end time",
            "in": "query",
            "name": "end_time",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "timestamp"
            }
          },
          {
            "description": "group assets by label hierarchy, given as a list of label keys",
            "in": "query",
            "name": "group_by",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the id of the saved map that should be loaded",
            "in": "query",
            "name": "saved_map_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filters": {
                    "description": "Each query supports an \"include\" and \"exclude\" filter. These filters allow you to focus on specific assets and flows. <br> You can combine more than one filter to perform more advanced queries.\n  * `application`: flows which go from/to specific applications.<br> For example: `{\"application\": [\"nginx\"]}`\n\n  * `vm`: flows to/from specific VMs.<br>For example: `{\"vm\": [\"ecommerce_server1\"]}`\n\n  * `folder`: flows to/from VMs in specific vCenter folders.<br>For example: `{\"folder\": [\"Programming\"]}`\n\n  * `host`: flows to/from VMs in specific ESXi hosts.<br>For example: `{\"host\": [\"esxi001.acme.org\"]}`\n\n  * `ip_address`: flows to/from assets with specific IP addresses or masks. Use this form: `{ip_address: {ip: [<IP LIST>]}}`<br>For example: `{\"ip_address\": {\"ip\": [\"172.24.0.0/16\", \"1.2.3.4\"]}}`\n\n  * `internet_flow`: flows to/from the internet. Use one or more of these values in a list: `From Internet` / `To Internet`<br>For example: `{\"internet_flow\": [\"To Internet\"]}`\n\n  * `ports`: flows with specific destination ports.<br>For example: `{\"ports\": [\"3306\", \"27017\"]}`\n\n  * `user_label`: flows to/from assets labeled with specific labels. Use one of more lists describing label conjunctures. <br>For example: `{\"user_label\": [[\"8464e957-e082-4eb4-94fd-c9888c62f739\", \"8e5b5d76-b885-4383-89d4-1be4fcc3cb8c\"], [\"45e2cc95-23b3-4357-bc4e-f06e7e505161\"]]}`\n\n  * `label_groups`: flows to/from assets labeled with specific label groupss. <br>For example: `{\"label_groups\": [\"8464e957-e082-4eb4-94fd-c9888c62f739\", \"8e5b5d76-b885-4383-89d4-1be4fcc3cb8c\"]}`\n",
                    "properties": {
                      "exclude": {
                        "example": {
                          "ports": [
                            "22"
                          ]
                        },
                        "type": "object"
                      },
                      "include": {
                        "example": {
                          "host": [
                            "esxi001.acme.org"
                          ]
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "force": {
                    "description": "Show flows even if the graph has too many flows or assets",
                    "example": false,
                    "type": "boolean"
                  },
                  "state": {
                    "description": "The state list should indicate which nodes in the filtered graph should be \"opened\" in order to get their full details. For example, a VM node needs to be \"opened\" to see process information. <br><br> The state list should be comprised of item IDs, and each one with \"open/close\" action - do we want to get more details about the node.\n",
                    "example": {
                      "068db442-848b-4c1f-b729-ed1f69e6a61a": {
                        "open": true,
                        "type": "vm"
                      },
                      "9a919804-9f2f-4e32-9c35-29463a12c3fd": {
                        "open": false,
                        "type": "vm"
                      },
                      "Servers/Department": {
                        "open": false,
                        "type": "group"
                      },
                      "Servers/Email": {
                        "open": true,
                        "type": "group"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation - Flow - Returns a list of flows and nodes",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "objects": {
                      "items": {
                        "$ref": "#/components/schemas/Flow"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "List visibility flows",
        "tags": [
          "Reveal Flows"
        ]
      }
    },
    "/visibility/label-groups": {
      "delete": {
        "description": "Discard label groups changes",
        "operationId": "discardLabelGroups",
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "summary": "Discard label groups changes",
        "tags": [
          "Policy Revisions"
        ]
      },
      "get": {
        "description": "Get a list of label groups <br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/label-groups?key=App&value=MsSQL&limit=100&offset=0</pre>\n",
        "operationId": "getAllLabelGroups",
        "parameters": [
          {
            "description": "Search label groups by key",
            "in": "query",
            "name": "key",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search label groups by value",
            "in": "query",
            "name": "value",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search label groups by labels",
            "in": "query",
            "name": "criteria",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search label groups matching asset IDs",
            "in": "query",
            "name": "assets",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "example": "a106a1ba-15d1-4d10-8299-5c10f34975cb",
                "format": "uuid",
                "type": "string"
              }
            }
          },
          {
            "description": "Maximal number of assets to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Offset of the returned list",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation - Label Group (Paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "objects": {
                          "items": {
                            "$ref": "#/components/schemas/LabelGroup"
                          },
                          "type": "array"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "List label groups",
        "tags": [
          "Label Groups"
        ]
      },
      "post": {
        "description": "Create a label group\n",
        "operationId": "createLabelGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "label_group": {
                    "$ref": "#/components/schemas/LabelGroupInput"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Label group values to be passed in the request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation - Label Group",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "label_group": {
                      "$ref": "#/components/schemas/LabelGroup"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Create a label group",
        "tags": [
          "Label Groups"
        ]
      },
      "put": {
        "description": "Publish label groups changes",
        "operationId": "publishLabelGroups",
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the new revision number</span>",
            "content": {
              "*/*": {
                "schema": {
                  "example": 7,
                  "type": "number"
                }
              }
            }
          }
        },
        "summary": "Publish label groups changes",
        "tags": [
          "Policy Revisions"
        ]
      }
    },
    "/visibility/label-groups/{labelGroupId}": {
      "delete": {
        "description": "Delete a label group\n",
        "operationId": "deleteLabelGroup",
        "parameters": [
          {
            "description": "Requested label group ID",
            "in": "path",
            "name": "labelGroupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the deleted label group ID</span>",
            "content": {
              "application/json": {
                "schema": {
                  "example": "faa1df8c-678d-42c7-9161-3898f6a1743b",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Delete a label group",
        "tags": [
          "Label Groups"
        ]
      },
      "put": {
        "description": "Update a label group\n",
        "operationId": "updateLabelGroup",
        "parameters": [
          {
            "description": "Requested label group ID",
            "in": "path",
            "name": "labelGroupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "exclude_labels": {
                    "items": {
                      "items": {
                        "example": "a106a1ba-15d1-4d10-8299-5c10f34975cb",
                        "format": "uuid",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "id": {
                    "example": null,
                    "nullable": true
                  },
                  "include_labels": {
                    "items": {
                      "items": {
                        "example": "a106a1ba-15d1-4d10-8299-5c10f34975cb",
                        "format": "uuid",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  "key": {
                    "example": "Role",
                    "type": "string"
                  },
                  "value": {
                    "example": "Application",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Label group values to be passed in the request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the updated label group ID</span>",
            "content": {
              "application/json": {
                "schema": {
                  "example": "faa1df8c-678d-42c7-9161-3898f6a1743b",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Update a label group",
        "tags": [
          "Label Groups"
        ]
      }
    },
    "/visibility/labels": {
      "get": {
        "description": "Get a list of labels <br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/labels?find_matches=true&dynamic_criteria_limit=5000&key=App&value=MsSQL&limit=100&offset=0</pre>\n",
        "operationId": "getAllLables",
        "parameters": [
          {
            "description": "Show related assets data",
            "in": "query",
            "name": "find_matches",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Maximal amount of dynamic criteria to return",
            "in": "query",
            "name": "dynamic_criteria_limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Search label by key",
            "in": "query",
            "name": "key",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search label by value",
            "in": "query",
            "name": "value",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximal number of assets to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Offset of the returned list",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation - Label (Paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "objects": {
                          "items": {
                            "$ref": "#/components/schemas/LabelList"
                          },
                          "type": "array"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "List labels",
        "tags": [
          "Labels"
        ]
      },
      "post": {
        "description": "Create a dynamic label<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/labels</pre>\n",
        "operationId": "createDynamicLabel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "criteria": {
                    "items": {
                      "properties": {
                        "argument": {
                          "example": "10.0.1.1",
                          "type": "string"
                        },
                        "field": {
                          "example": "numeric_ip_addresses",
                          "type": "string"
                        },
                        "op": {
                          "example": "SUBNET",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "id": {
                    "example": null,
                    "nullable": true
                  },
                  "key": {
                    "example": "Role",
                    "type": "string"
                  },
                  "labels": {
                    "properties": {
                      "criteria": {
                        "items": {
                          "properties": {
                            "argument": {
                              "example": "win",
                              "type": "string"
                            },
                            "field": {
                              "example": "name",
                              "type": "string"
                            },
                            "op": {
                              "example": "STARTSWITH",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "key": {
                        "example": "Role",
                        "type": "string"
                      },
                      "value": {
                        "example": "External",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "value": {
                    "example": "Application",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Label values to be passed in the request body / List of labels (under 'labels' key) to add multiple labels",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Create a dynamic label / Import labels",
        "tags": [
          "Labels"
        ]
      }
    },
    "/visibility/labels/bulk": {
      "post": {
        "description": "Add multiple labels with matching asset IDs.\n",
        "operationId": "addMultipleStaticLabel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "example": "add",
                    "type": "string"
                  },
                  "labels": {
                    "items": {
                      "properties": {
                        "asset_ids": {
                          "items": {
                            "example": "vm_id",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "key": {
                          "example": "Role",
                          "type": "string"
                        },
                        "value": {
                          "example": "External",
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "List of labels (under 'labels' key) and asset IDs to be passed in the request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkLabelAdded"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponseLarge"
                }
              }
            }
          }
        },
        "summary": "Add Multiple Static Labels with Asset IDs",
        "tags": [
          "Labels"
        ]
      }
    },
    "/visibility/labels/labels-dynamic-criteria": {
      "get": {
        "description": "Get a list of labels and dynamic criteria <br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/labels/labels-dynamic-criteria?key=App&value=MsSQL&limit=-1&offset=0</pre>\n",
        "operationId": "getAllLables",
        "parameters": [
          {
            "description": "Search label by key",
            "in": "query",
            "name": "key",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search label by value",
            "in": "query",
            "name": "value",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximal number of labels to return (-1 to return all) default value:20",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Offset of the returned list",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation <a href='#/definitions/PaginatedResponse'>Paginated</a> (<a href='#/definitions/LabelList'>Label</a> )",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "objects": {
                          "items": {
                            "$ref": "#/components/schemas/LabelList"
                          },
                          "type": "array"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "List labels and their dynamic criteria",
        "tags": [
          "Labels"
        ]
      }
    },
    "/visibility/labels/{labelId}": {
      "delete": {
        "description": "Delete a label<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/labels/bb7f745d-5857-4a7e-9b97-3a8bbe9d9b47</pre>\n",
        "operationId": "deleteLabel",
        "parameters": [
          {
            "description": "Requested label ID",
            "in": "path",
            "name": "labelId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the deleted label ID</span>",
            "content": {
              "application/json": {
                "schema": {
                  "example": "faa1df8c-678d-42c7-9161-3898f6a1743b",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Delete a label",
        "tags": [
          "Labels"
        ]
      },
      "put": {
        "description": "Update a label<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/labels/bb7f745d-5857-4a7e-9b97-3a8bbe9d9b47</pre>\n",
        "operationId": "updateLabel",
        "parameters": [
          {
            "description": "Requested label ID",
            "in": "path",
            "name": "labelId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "criteria": {
                    "items": {
                      "properties": {
                        "argument": {
                          "example": "10.0.1.1",
                          "type": "string"
                        },
                        "field": {
                          "example": "numeric_ip_addresses",
                          "type": "string"
                        },
                        "op": {
                          "example": "SUBNET",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "key": {
                    "example": "Role",
                    "type": "string"
                  },
                  "value": {
                    "example": "Application",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Label values to be passed in the request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the updated label ID</span>",
            "content": {
              "application/json": {
                "schema": {
                  "example": "faa1df8c-678d-42c7-9161-3898f6a1743b",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Update a label",
        "tags": [
          "Labels"
        ]
      }
    },
    "/visibility/policy/revision/compare-revisions/user-groups": {
      "get": {
        "operationId": "compareRevisionsUserGroups",
        "parameters": [
          {
            "description": "Revision number, or \"draft\"",
            "in": "query",
            "name": "base_revision",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Revision number, or \"draft\"",
            "in": "query",
            "name": "compare_revision",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximal number of items to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Offset of the returned list",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns list of user groups</span>",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserGroupsList"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Compare user groups between policy revisions",
        "tags": [
          "Policy Revisions"
        ]
      }
    },
    "/visibility/policy/revision/{revisionNumber}": {
      "get": {
        "operationId": "getRevision",
        "parameters": [
          {
            "description": "Revision number",
            "in": "path",
            "name": "revisionNumber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the revision object</span>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Revision"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Get revision info",
        "tags": [
          "Policy Revisions"
        ]
      }
    },
    "/visibility/policy/revisions": {
      "delete": {
        "description": "Discards all currently suggested segmentation policy changes",
        "operationId": "discardSegmentationPolicy",
        "responses": {
          "200": {
            "description": "Successfully discarded all policy changes"
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Illegal action: 'publish'",
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Discard segmentation policy changes",
        "tags": [
          "Policy Revisions"
        ]
      },
      "post": {
        "description": "Publish segmentation policy changes",
        "operationId": "publishSegmentationPolicy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishRevisionInput"
              }
            }
          },
          "description": "Revision publish data",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully published. Returns the newly created revision number.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevisionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Illegal action: 'publish'",
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Publish segmentation policy changes",
        "tags": [
          "Policy Revisions"
        ]
      }
    },
    "/visibility/policy/revisions/compare-revisions": {
      "get": {
        "operationId": "compareRevisions",
        "parameters": [
          {
            "description": "Revision number, or \"draft\"",
            "in": "query",
            "name": "base_revision",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Revision number, or \"draft\"",
            "in": "query",
            "name": "compare_revision",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns revision comparison metadata</span>",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Compare policy revisions",
        "tags": [
          "Policy Revisions"
        ]
      }
    },
    "/visibility/policy/revisions/compare-revisions/label-groups": {
      "get": {
        "operationId": "compareRevisionsLabelGroups",
        "parameters": [
          {
            "description": "Revision number, or \"draft\"",
            "in": "query",
            "name": "base_revision",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Revision number, or \"draft\"",
            "in": "query",
            "name": "compare_revision",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximal number of items to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Offset of the returned list",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns list of label groups</span>",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LabelGroup"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Compare label groups between policy revisions",
        "tags": [
          "Policy Revisions"
        ]
      }
    },
    "/visibility/policy/revisions/compare-revisions/rules": {
      "get": {
        "operationId": "compareRevisionsRules",
        "parameters": [
          {
            "description": "Revision number, or \"draft\"",
            "in": "query",
            "name": "base_revision",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Revision number, or \"draft\"",
            "in": "query",
            "name": "compare_revision",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximal number of items to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Offset of the returned list",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns list of policy rules</span>",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Rule"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Compare policy rules between policy revisions",
        "tags": [
          "Policy Revisions"
        ]
      }
    },
    "/visibility/policy/revisions/revert": {
      "post": {
        "description": "Revert to a specific segmentation policy revision",
        "operationId": "revertSegmentationPolicy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevertRevisionInput"
              }
            }
          },
          "description": "Reversion revert data",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully published. Returns the revision number retunred to, for confirmation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevisionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Illegal action: 'publish'",
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Revert segmentation policy",
        "tags": [
          "Policy Revisions"
        ]
      }
    },
    "/visibility/policy/rules-bulk/action": {
      "post": {
        "description": "Run actions (mainly different set-state actions), for multiple segmentation rules as defined in the posted data<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/policy/rules-bulk/action </pre> <br><br> This endpoint can be used with either 'ids' OR query params (for \"select all\" operation). See below for the POST required structure (which includes filters or direct selection). <br> Any of the filters can also accept a list of terms, separated by `|`, which implies an \"or\" condition between the items. Any of the terms in the `label` filter can additionally be given as a list of sub-terms, separated by `>`, which implies an \"and\" condition between the sub-terms. <br><br> Example:<br> Find all rules from the internet to one of two labels: <br>`?source=address_classification:Internet&destination=labels:2afc02e5-a3f0-45b0-a161-9db753d14900|8464e957-e082-4eb4-94fd-c9888c62f739`\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "description": "Action",
                    "enum": [
                      "delete",
                      "enable",
                      "disable"
                    ],
                    "example": "delete",
                    "type": "string"
                  },
                  "ids": {
                    "description": "IDs of rules to update",
                    "items": {
                      "example": "a106a1ba-15d1-4d10-8299-5c10f34975cb",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "affected_rule_ids": {
                      "description": "The list of modified rules",
                      "items": {
                        "example": "a106a1ba-15d1-4d10-8299-5c10f34975cb",
                        "format": "uuid",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "done": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Bulk policy rules actions by selected",
        "tags": [
          "Segmentation Policy Rules"
        ]
      }
    },
    "/visibility/policy/rules-bulk/labels/remove/{key}": {
      "post": {
        "description": "Remove existing labels (by key), for multiple segmentation rules as defined in the posted data<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/policy/rules-bulk/labels/remove/{key}/{value} </pre> <br><br> See below for the POST required structure (which includes filters or direct selection). <br> The params: `source, destination, any_side` are filters for the two entities that define a rule. They can accept one of following options (`format=side_entity`):\n  * **process:**\n<br>format: `processes:<process_name>` <br>example: `processes:apt-get`\n  * **asset:**\n<br>format: `vm:<vm_id>` <br>example: `vm:461bf3a5-22b0-4693-8e8e-fc89807f39cc`\n  * **label:**\n<br>format: `labels:<label_id>` <br>example: `labels:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **label groups:**\n<br>format: `label_groups:<label_group_id>` <br>example: `label_groups:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **subnet:**\n<br>format: `subnet:<subnet_or_ip>` <br>example: `subnet:10.0.10.0/24`\n  * **domains:**\n<br>format: `domains:<domain(s), can start with \"*.\">` <br>example: `domains:*.github.com`\n  * **user groups:**\n<br>format: `user_groups:<user_group_id>` <br>example: `user_groups:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **Internet/NonInternet:**\n<br>format: `address_classification:<Internet|Private>` <br>example: `address_classification:Private` </ul> Any of the filters can also accept a list of terms, separated by `|`, which implies an \"or\" condition between the items. Any of the terms in the `label` filter can additionally be given as a list of sub-terms, separated by `>`, which implies an \"and\" condition between the sub-terms. <br><br> Example:<br> Find all rules from the internet to one of two labels: <br>`?source=address_classification:Internet&destination=labels:2afc02e5-a3f0-45b0-a161-9db753d14900|8464e957-e082-4eb4-94fd-c9888c62f739`\n",
        "operationId": "bulkSegmentationRulesRemoveLabel",
        "parameters": [
          {
            "description": "Label key to remove",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/bulkSegmentationRulesRemoveLabelBody"
        },
        "responses": {
          "200": {
            "description": "Successful operation - RulesBulkLabelResponse",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RulesBulkLabelResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Bulk policy rules remove label",
        "tags": [
          "Segmentation Policy Rules"
        ]
      }
    },
    "/visibility/policy/rules-bulk/labels/replace/{key}/{value}": {
      "post": {
        "description": "Replace existing labels (by key) with the given value, for multiple segmentation rules as defined in the posted data<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/policy/rules-bulk/labels/replace/{key}/{value} </pre> <br><br> See below for the POST required structure (which includes filters or direct selection). <br> The params: `source, destination, any_side` are filters for the two entities that define a rule. They can accept one of following options (`format=side_entity`):\n  * **process:**\n<br>format: `processes:<process_name>` <br>example: `processes:apt-get`\n  * **asset:**\n<br>format: `vm:<vm_id>` <br>example: `vm:461bf3a5-22b0-4693-8e8e-fc89807f39cc`\n  * **label:**\n<br>format: `labels:<label_id>` <br>example: `labels:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **label groups:**\n<br>format: `label_groups:<label_group_id>` <br>example: `label_groups:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **subnet:**\n<br>format: `subnet:<subnet_or_ip>` <br>example: `subnet:10.0.10.0/24`\n  * **domains:**\n<br>format: `domains:<domain(s), can start with \"*.\">` <br>example: `domains:*.github.com`\n  * **user groups:**\n<br>format: `user_groups:<user_group_id>` <br>example: `user_groups:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **Internet/NonInternet:**\n<br>format: `address_classification:<Internet|Private>` <br>example: `address_classification:Private` </ul> Any of the filters can also accept a list of terms, separated by `|`, which implies an \"or\" condition between the items. Any of the terms in the `label` filter can additionally be given as a list of sub-terms, separated by `>`, which implies an \"and\" condition between the sub-terms. <br><br> Example:<br> Find all rules from the internet to one of two labels: <br>`?source=address_classification:Internet&destination=labels:2afc02e5-a3f0-45b0-a161-9db753d14900|8464e957-e082-4eb4-94fd-c9888c62f739`\n",
        "operationId": "bulkSegmentationRulesReplaceLabel",
        "parameters": [
          {
            "description": "Label key to replace",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Label value to set",
            "in": "path",
            "name": "value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/bulkSegmentationRulesRemoveLabelBody"
        },
        "responses": {
          "200": {
            "description": "Successful operation - RulesBulkLabelResponse",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RulesBulkLabelResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Bulk policy rules replace label",
        "tags": [
          "Segmentation Policy Rules"
        ]
      }
    },
    "/visibility/policy/rules-bulk/processes/remove": {
      "post": {
        "description": "Remove all process information from multiple segmentation rules (as defined in the posted data)<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/policy/rules-bulk/processes/remove </pre> <br><br> See below for the POST required structure (which includes filters or direct selection). <br> The params: `source, destination, any_side` are filters for the two entities that define a rule. They can accept one of following options (`format=side_entity`):\n  * **process:**\n<br>format: `processes:<process_name>` <br>example: `processes:apt-get`\n  * **asset:**\n<br>format: `vm:<vm_id>` <br>example: `vm:461bf3a5-22b0-4693-8e8e-fc89807f39cc`\n  * **label:**\n<br>format: `labels:<label_id>` <br>example: `labels:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **label groups:**\n<br>format: `label_groups:<label_group_id>` <br>example: `label_groups:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **subnet:**\n<br>format: `subnet:<subnet_or_ip>` <br>example: `subnet:10.0.10.0/24`\n  * **domains:**\n<br>format: `domains:<domain(s), can start with \"*.\">` <br>example: `domains:*.github.com`\n  * **user groups:**\n<br>format: `user_groups:<user_group_id>` <br>example: `user_groups:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **Internet/NonInternet:**\n<br>format: `address_classification:<Internet|Private>` <br>example: `address_classification:Private` </ul> Any of the filters can also accept a list of terms, separated by `|`, which implies an \"or\" condition between the items. Any of the terms in the `label` filter can additionally be given as a list of sub-terms, separated by `>`, which implies an \"and\" condition between the sub-terms. <br><br> Example:<br> Find all rules from the internet to one of two labels: <br>`?source=address_classification:Internet&destination=labels:2afc02e5-a3f0-45b0-a161-9db753d14900|8464e957-e082-4eb4-94fd-c9888c62f739`\n",
        "operationId": "bulkSegmentationRulesRemoveProcesses",
        "requestBody": {
          "$ref": "#/components/requestBodies/bulkSegmentationRulesRemoveProcessesBody"
        },
        "responses": {
          "200": {
            "description": "Successful operation - RulesBulkProcessesResponse",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RulesBulkProcessesResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Bulk policy rules remove processes",
        "tags": [
          "Segmentation Policy Rules"
        ]
      }
    },
    "/visibility/policy/rules-bulk/ruleset/clone/{ruleset}": {
      "post": {
        "description": "Clone multiple segmentation rules (as defined in the posted data) to a certain ruleset<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/policy/rules-bulk/ruleset/clone/{ruleset} </pre> <br><br> See below for the POST required structure (which includes filters or direct selection). <br> The params: `source, destination, any_side` are filters for the two entities that define a rule. They can accept one of following options (`format=side_entity`):\n  * **process:**\n<br>format: `processes:<process_name>` <br>example: `processes:apt-get`\n  * **asset:**\n<br>format: `vm:<vm_id>` <br>example: `vm:461bf3a5-22b0-4693-8e8e-fc89807f39cc`\n  * **label:**\n<br>format: `labels:<label_id>` <br>example: `labels:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **label groups:**\n<br>format: `label_groups:<label_group_id>` <br>example: `label_groups:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **subnet:**\n<br>format: `subnet:<subnet_or_ip>` <br>example: `subnet:10.0.10.0/24`\n  * **domains:**\n<br>format: `domains:<domain(s), can start with \"*.\">` <br>example: `domains:*.github.com`\n  * **user groups:**\n<br>format: `user_groups:<user_group_id>` <br>example: `user_groups:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **Internet/NonInternet:**\n<br>format: `address_classification:<Internet|Private>` <br>example: `address_classification:Private` </ul> Any of the filters can also accept a list of terms, separated by `|`, which implies an \"or\" condition between the items. Any of the terms in the `label` filter can additionally be given as a list of sub-terms, separated by `>`, which implies an \"and\" condition between the sub-terms. <br><br> Example:<br> Find all rules from the internet to one of two labels: <br>`?source=address_classification:Internet&destination=labels:2afc02e5-a3f0-45b0-a161-9db753d14900|8464e957-e082-4eb4-94fd-c9888c62f739`\n",
        "operationId": "bulkSegmentationRulesCloneToRuleset",
        "parameters": [
          {
            "description": "Ruleset to clone rules to",
            "in": "path",
            "name": "ruleset",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/bulkSegmentationRulesRemoveProcessesBody"
        },
        "responses": {
          "200": {
            "description": "Successful operation - RulesBulkRulesetResponse",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RulesBulkRulesetResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Bulk policy rules clone to ruleset",
        "tags": [
          "Segmentation Policy Rules"
        ]
      }
    },
    "/visibility/policy/rules-bulk/ruleset/move/{ruleset}": {
      "post": {
        "description": "Moves multiple segmentation rules (as defined in the posted data) to a certain ruleset<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/policy/rules-bulk/ruleset/move/{ruleset} </pre> <br><br> See below for the POST required structure (which includes filters or direct selection). <br> The params: `source, destination, any_side` are filters for the two entities that define a rule. They can accept one of following options (`format=side_entity`):\n  * **process:**\n<br>format: `processes:<process_name>` <br>example: `processes:apt-get`\n  * **asset:**\n<br>format: `vm:<vm_id>` <br>example: `vm:461bf3a5-22b0-4693-8e8e-fc89807f39cc`\n  * **label:**\n<br>format: `labels:<label_id>` <br>example: `labels:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **label groups:**\n<br>format: `label_groups:<label_group_id>` <br>example: `label_groups:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **subnet:**\n<br>format: `subnet:<subnet_or_ip>` <br>example: `subnet:10.0.10.0/24`\n  * **Internet/NonInternet:**\n<br>format: `address_classification:<Internet|Private>` <br>example: `address_classification:Private` </ul> Any of the filters can also accept a list of terms, separated by `|`, which implies an \"or\" condition between the items. Any of the terms in the `label` filter can additionally be given as a list of sub-terms, separated by `>`, which implies an \"and\" condition between the sub-terms. <br><br> Example:<br> Find all rules from the internet to one of two labels: <br>`?source=address_classification:Internet&destination=labels:2afc02e5-a3f0-45b0-a161-9db753d14900|8464e957-e082-4eb4-94fd-c9888c62f739`\n",
        "operationId": "bulkSegmentationRulesMoveRuleset",
        "parameters": [
          {
            "description": "Ruleset to move rules to",
            "in": "path",
            "name": "ruleset",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/bulkSegmentationRulesRemoveProcessesBody"
        },
        "responses": {
          "200": {
            "description": "Successful operation - RulesBulkRulesetResponse",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RulesBulkRulesetResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Bulk policy rules move ruleset",
        "tags": [
          "Segmentation Policy Rules"
        ]
      }
    },
    "/visibility/policy/rules-bulk/worksite/move/{worksite}": {
      "post": {
        "description": "If the worksite feature is enabled, assigns multiple segmentation rules (as defined in the posted data) to a certain worksite<br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/policy/rules-bulk/worksite/move/{worksite} </pre> <br><br> See below for the POST required structure (which includes filters or direct selection).\n",
        "operationId": "bulkSegmentationRulesAssignWorksite",
        "parameters": [
          {
            "description": "Worksite id to assign rules to or `'all_worksites'`",
            "in": "path",
            "name": "worksite_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ids": {
                    "description": "List of rule ids to operate on",
                    "example": [
                      "56784022-2597-4474-bde5-be9f7e0c1420",
                      "92A84022-3001-2223-bde5-be9f7e0cab99"
                    ],
                    "type": "array",
                    "items": {}
                  },
                  "negate_args": {
                    "description": "A selection filter definition (overrides the above selected parameter)",
                    "properties": {
                      "filters": {
                        "description": "A dictionary of filter keys and values",
                        "properties": {
                          "any_side": {
                            "description": "Any side by assets/processes/labels/label_groups/subnet/address_classification",
                            "format": "side_entity",
                            "type": "string"
                          },
                          "destination": {
                            "description": "Destination by assets/processes/labels/label_groups/subnet/address_classification",
                            "format": "side_entity",
                            "type": "string"
                          },
                          "port": {
                            "description": "Port to filter by",
                            "format": "1-65535",
                            "type": "integer"
                          },
                          "protocols": {
                            "description": "IP protocols (TCP/UDP) to filter by",
                            "enum": [
                              "TCP",
                              "UDP"
                            ],
                            "type": "string"
                          },
                          "ruleset": {
                            "description": "Ruleset to filter by",
                            "type": "string"
                          },
                          "search": {
                            "description": "Filter by comment contents or rules starting with a rule_id",
                            "type": "string"
                          },
                          "source": {
                            "description": "Source by assets/processes/labels/label_groups/subnet/address_classification",
                            "format": "side_entity",
                            "type": "string"
                          },
                          "state": {
                            "description": "Rule state to filter by",
                            "enum": [
                              "UNCHANGED",
                              "CREATED",
                              "MODIFIED",
                              "DELETED"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation - RulesBulkWorksiteResponse",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RulesBulkWorksiteResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Bulk policy rules assign to worksite",
        "tags": [
          "Segmentation Policy Rules"
        ]
      }
    },
    "/visibility/policy/rules/bulk": {
      "post": {
        "description": "Bulk change segmentation policy rules",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "added": {
                    "description": "Rules to add in bulk",
                    "items": {
                      "$ref": "#/components/schemas/Rule"
                    },
                    "type": "array"
                  },
                  "deleted": {
                    "description": "Rules to delete in bulk",
                    "properties": {
                      "id": {
                        "description": "IDs of rules to delete",
                        "item": {
                          "example": "a106a1ba-15d1-4d10-8299-5c10f34975cb",
                          "format": "uuid",
                          "type": "string"
                        },
                        "type": "array",
                        "items": {}
                      }
                    },
                    "type": "object"
                  },
                  "incident_ids": {
                    "description": "List of incident IDs to bulk acknowledge",
                    "items": {
                      "example": "4506a1ba-15d1-4d10-8299-5c10f34975cb",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "modified": {
                    "description": "Rules to modify in bulk",
                    "items": {
                      "$ref": "#/components/schemas/Rule"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "done": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Bulk change policy rules",
        "tags": [
          "Segmentation Policy Rules"
        ]
      }
    },
    "/visibility/policy/rules/{ruleID}": {
      "post": {
        "description": "Change segmentation policy rule state",
        "parameters": [
          {
            "description": "ID of rule to update",
            "in": "path",
            "name": "ruleID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "description": "Action",
                    "enum": [
                      "revert",
                      "delete",
                      "undelete",
                      "enable",
                      "disable"
                    ],
                    "example": "delete",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the rule object</span>",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rule": {
                      "$ref": "#/components/schemas/Rule"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Change policy rule state",
        "tags": [
          "Segmentation Policy Rules"
        ]
      },
      "put": {
        "description": "Edit segmentation policy rule",
        "operationId": "updateRule",
        "parameters": [
          {
            "description": "ID of rule to update",
            "in": "path",
            "name": "ruleID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rule"
              }
            }
          },
          "description": "Updated rule values to be passed in the request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the rule object</span>",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rule": {
                      "$ref": "#/components/schemas/Rule"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Edit a policy rule",
        "tags": [
          "Segmentation Policy Rules"
        ]
      }
    },
    "/visibility/policy/sections/{section_name}/rules": {
      "get": {
        "description": "List all segmentation policy rules in section </p> The params: `source, destination, any_side` are filters for the two entities that define a rule. They can accept one of following options (`format=side_entity`):\n  * **process:**\n<br>format: `processes:<process_name>` <br>example: `processes:apt-get`\n  * **asset:**\n<br>format: `vm:<vm_id>` <br>example: `vm:461bf3a5-22b0-4693-8e8e-fc89807f39cc`\n  * **label:**\n<br>format: `labels:<label_id>` <br>example: `labels:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **label groups:**\n<br>format: `label_groups:<label_group_id>` <br>example: `label_groups:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **subnet:**\n<br>format: `subnet:<subnet_or_ip>` <br>example: `subnet:10.0.10.0/24`\n  * **domains:**\n<br>format: `domains:<domain(s), can start with \"*.\">` <br>example: `domains:*.github.com`\n  * **user groups:**\n<br>format: `user_groups:<user_group_id>` <br>example: `user_groups:1219d8a5-6902-4c48-a2d4-82f1806605cc`\n  * **Internet/NonInternet:**\n<br>format: `address_classification:<Internet|Private>` <br>example: `address_classification:Private` </ul> Any of the filters can also accept a list of terms, separated by `|`, which implies an \"or\" condition between the items. Any of the terms in the `label` filter can additionally be given as a list of sub-terms, separated by `>`, which implies an \"and\" condition between the sub-terms. <br><br> Example:<br> Find all rules from the internet to one of two labels: <br>`?source=address_classification:Internet&destination=labels:2afc02e5-a3f0-45b0-a161-9db753d14900|8464e957-e082-4eb4-94fd-c9888c62f739`\n",
        "operationId": "getRules",
        "parameters": [
          {
            "description": "Rules section to query",
            "in": "path",
            "name": "section_name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "override",
                "allow",
                "alert",
                "block"
              ]
            }
          },
          {
            "description": "Source by assets/processes/labels/label_groups/subnet/address_classification",
            "in": "query",
            "name": "source",
            "required": false,
            "schema": {
              "type": "string",
              "format": "side_entity"
            }
          },
          {
            "description": "Destination by assets/processes/labels/label_groups/subnet/address_classification",
            "in": "query",
            "name": "destination",
            "required": false,
            "schema": {
              "type": "string",
              "format": "side_entity"
            }
          },
          {
            "description": "Any side by assets/processes/labels/label_groups/subnet/address_classification",
            "in": "query",
            "name": "any_side",
            "required": false,
            "schema": {
              "type": "string",
              "format": "side_entity"
            }
          },
          {
            "description": "IP protocols (TCP/UDP) to filter by",
            "in": "query",
            "name": "protocols",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "TCP",
                "UDP"
              ]
            }
          },
          {
            "description": "List of ports and port ranges to filter by",
            "example": "20-80, 320",
            "in": "query",
            "name": "port",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "List of ports and port ranges to exclude rules",
            "example": "20-80, 320",
            "in": "query",
            "name": "port__not",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Ruleset to filter by",
            "in": "query",
            "name": "ruleset",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Rule state to filter by",
            "in": "query",
            "name": "state",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "UNCHANGED",
                "CREATED",
                "MODIFIED",
                "DELETED"
              ]
            }
          },
          {
            "description": "Filter by comment contents or rules starting with a rule_id",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximal number of assets to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Offset of the returned list",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Sort results by value in ascending or descending order",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation - Rule (Paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "objects": {
                          "items": {
                            "$ref": "#/components/schemas/Rule"
                          },
                          "type": "array"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "List policy rules",
        "tags": [
          "Segmentation Policy Rules"
        ]
      },
      "post": {
        "description": "Create a segmentation policy rule",
        "operationId": "createRules",
        "parameters": [
          {
            "description": "Type of rules to query",
            "in": "path",
            "name": "section_name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "override",
                "allow",
                "alert",
                "block"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ordering_value": {
                    "description": "Ordering value (should be null)",
                    "example": null,
                    "type": "string"
                  },
                  "rule": {
                    "description": "Rule's data",
                    "properties": {
                      "action": {
                        "enum": [
                          "allow",
                          "alert",
                          "block",
                          "block_and_alert",
                          "allow_and_encrypt"
                        ],
                        "example": "alert",
                        "type": "string"
                      },
                      "destination": {
                        "example": {},
                        "type": "object"
                      },
                      "exclude_port_ranges": {
                        "example": [],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "exclude_ports": {
                        "example": [],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "ip_protocols": {
                        "items": {
                          "enum": [
                            "TCP",
                            "UDP"
                          ],
                          "example": "TCP",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "port_ranges": {
                        "example": [],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "ports": {
                        "example": [],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "ruleset_id": {
                        "example": null,
                        "type": "string"
                      },
                      "source": {
                        "example": {},
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Rule's data"
        },
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the rule object</span>",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rules": {
                      "items": {
                        "$ref": "#/components/schemas/Rule"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Create a policy rule",
        "tags": [
          "Segmentation Policy Rules"
        ]
      }
    },
    "/visibility/saved-maps": {
      "get": {
        "description": "Get a list of saved maps <br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/saved_maps?search=Saved+Map&author_id=5adcf02120d9ac30affade5e&search=MYSQL&features=include_processes,time_resolution&state=EMPTY&included_asset_ids=a4eb4b1b-c348-4d06-8553-8e5b16a72059&included_label_ids=1f458402-401e-4f5b-b867-7f7b4bcd3c12&time_range_filter=1521898020000,1524492059999&limit=100&offset=0&sort=-creation_time</pre>\n",
        "operationId": "getAllSavedMaps",
        "parameters": [
          {
            "description": "Search saved map by author id",
            "in": "query",
            "name": "author_id",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "description": "Search saved map by map's state",
            "in": "query",
            "name": "state",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "READY",
                "IN_PROGRESS",
                "QUEUED",
                "CANCELED",
                "FAILED",
                "EMPTY"
              ]
            }
          },
          {
            "description": "Search saved map by map's features (Include Process Info & Enable Time Drilldown)",
            "in": "query",
            "name": "features",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "include_processes",
                "time_resolution"
              ]
            }
          },
          {
            "description": "Search saved map by map's filtered labels",
            "in": "query",
            "name": "included_label_ids",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "description": "Search saved map by a time range of start time and end time. Saved maps which intersect the range with their start time and end time will be shown",
            "in": "query",
            "name": "time_range_filter",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "int32"
            }
          },
          {
            "description": "Search saved map by partial name or id",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximal number of assets to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Offset of the returned list",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Sort results by value in ascending or descending order",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation - Saved Map (Paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "objects": {
                          "items": {
                            "$ref": "#/components/schemas/SavedMapList"
                          },
                          "type": "array"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "List saved maps",
        "tags": [
          "Saved Maps"
        ]
      },
      "post": {
        "description": "Create a new saved map <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/saved_maps</pre>\n",
        "operationId": "createSavedMap",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "end_time_filter": {
                    "example": 1511301040001,
                    "format": "timestamp",
                    "type": "integer"
                  },
                  "filters": {
                    "properties": {
                      "exclude": {
                        "example": {
                          "vm": [
                            "RH_Server_1",
                            "RH_Server_2"
                          ]
                        },
                        "type": "object"
                      },
                      "include": {
                        "example": {
                          "user_label": [
                            [
                              "7dd77960-f8ca-49c3-8580-b6c330c3059d"
                            ],
                            [
                              "3399b987-7b4c-44a8-ba49-8fa7a17b58a3"
                            ]
                          ]
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "include_processes": {
                    "example": true,
                    "type": "boolean"
                  },
                  "map_type": {
                    "enum": [
                      "0 (Public)",
                      "1 (Private)",
                      "7 (Unified - Public)",
                      "8 (Unified - Private)"
                    ],
                    "example": 1,
                    "format": "int32",
                    "type": "integer"
                  },
                  "name": {
                    "example": "3 Labels excl. RH Servers between 23/04/2018 and 30/04/2018",
                    "type": "string"
                  },
                  "start_time_filter": {
                    "example": 1511101040001,
                    "format": "timestamp",
                    "type": "integer"
                  },
                  "time_resolution": {
                    "example": false,
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Saved map's data",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedMap"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Add saved map",
        "tags": [
          "Saved Maps"
        ]
      }
    },
    "/visibility/saved-maps/{savedMapId}": {
      "delete": {
        "operationId": "deleteSavedMap",
        "parameters": [
          {
            "description": "Saved map id",
            "in": "path",
            "name": "savedMapId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the saved map object</span>",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rule": {
                      "$ref": "#/components/schemas/SavedMap"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Delete saved map",
        "tags": [
          "Saved Maps"
        ]
      },
      "post": {
        "operationId": "updateSavedMap",
        "parameters": [
          {
            "description": "Saved map id",
            "in": "path",
            "name": "savedMapId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "description": "* `update`: Moves saved map's timeframe to be up until now and recreates the saved map\n",
                    "enum": [
                      "update"
                    ],
                    "example": "update",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the saved map object</span>",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rule": {
                      "$ref": "#/components/schemas/SavedMap"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Update saved map",
        "tags": [
          "Saved Maps"
        ]
      }
    },
    "/visibility/saved-maps/{savedMapId}/cancel": {
      "post": {
        "operationId": "cancelSavedMap",
        "parameters": [
          {
            "description": "Saved map id",
            "in": "path",
            "name": "savedMapId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Cancel saved map creation",
        "tags": [
          "Saved Maps"
        ]
      }
    },
    "/visibility/user-groups": {
      "get": {
        "description": "Get a list of user groups <br><br>Full example: <pre style=\"white-space: pre-wrap; word-wrap: break-word;\">https://{management_server}/api/v3.0/visibility/user-groups?limit=100&offset=0</pre>\n",
        "operationId": "getAllUserGroups",
        "parameters": [
          {
            "description": "Maximal number of assets to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Offset of the returned list",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation - User Group (Paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "objects": {
                          "items": {
                            "$ref": "#/components/schemas/UserGroupsList"
                          },
                          "type": "array"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "List user groups",
        "tags": [
          "User Groups"
        ]
      },
      "post": {
        "description": "Create a user group\n",
        "operationId": "createUserGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "example": null,
                    "nullable": true
                  },
                  "orchestrations_groups": {
                    "items": {
                      "$ref": "#/components/schemas/OrchestrationGroups"
                    },
                    "type": "array"
                  },
                  "title": {
                    "example": "Guardicorians",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupsList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Create a user group",
        "tags": [
          "User Groups"
        ]
      }
    },
    "/visibility/user-groups/revisions": {
      "delete": {
        "description": "Discard user groups changes",
        "operationId": "discardUserGroups",
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "summary": "Discard user groups changes",
        "tags": [
          "Policy Revisions"
        ]
      },
      "post": {
        "description": "Publish user groups changes",
        "operationId": "publishUserGroups",
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the new revision number</span>",
            "content": {
              "*/*": {
                "schema": {
                  "example": 7,
                  "type": "number"
                }
              }
            }
          }
        },
        "summary": "Publish user groups changes",
        "tags": [
          "Policy Revisions"
        ]
      }
    },
    "/visibility/user-groups/{userGroupId}": {
      "delete": {
        "description": "Delete a user group\n",
        "operationId": "deleteUserGroup",
        "parameters": [
          {
            "description": "Requested user group ID",
            "in": "path",
            "name": "userGroupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the deleted confirmation</span>",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "deleted": true
                  },
                  "parameters": [
                    {
                      "example": true,
                      "name": "deleted",
                      "type": "boolean"
                    }
                  ],
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Delete a user group",
        "tags": [
          "User Groups"
        ]
      },
      "put": {
        "description": "Update a user group\n",
        "operationId": "updateUserGroup",
        "parameters": [
          {
            "description": "Requested user group ID",
            "in": "path",
            "name": "userGroupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "orchestrations_groups": {
                    "items": {
                      "$ref": "#/components/schemas/OrchestrationGroups"
                    },
                    "type": "array"
                  },
                  "title": {
                    "example": "Guardicorians",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the updated user group</span>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupsList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Update a user group",
        "tags": [
          "User Groups"
        ]
      }
    },
    "/workflow/project-template": {
      "post": {
        "operationId": "createProjectTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTemplateRequest"
              }
            }
          },
          "description": "The project template data to create",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the project template id</span>",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "project_template": {
                      "example": "e4fc7dad-9086-416e-b27f-5c0510289c6e",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Create project template",
        "tags": [
          "Workflow"
        ]
      }
    },
    "/workflow/project-template/{projectTemplateId}": {
      "delete": {
        "operationId": "deleteProjectTemplate",
        "parameters": [
          {
            "description": "Requested project template ID to delete",
            "in": "path",
            "name": "projectTemplateId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns whatever the operation was successful</span>",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "deleted": {
                      "example": true,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Delete project template",
        "tags": [
          "Workflow"
        ]
      },
      "put": {
        "operationId": "editProjectTemplate",
        "parameters": [
          {
            "description": "Requested project template ID to update",
            "in": "path",
            "name": "projectTemplateId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTemplateRequest"
              }
            }
          },
          "description": "The project template data to update",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation<br><span style=\"font-size:13px; color:gray;\">Returns the project template object</span>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Edit project template",
        "tags": [
          "Workflow"
        ]
      }
    },
    "/workflow/project-templates": {
      "get": {
        "description": "Get a list of project templates",
        "operationId": "getAllProjectTemplates",
        "parameters": [
          {
            "description": "Search project templates by project name",
            "in": "query",
            "name": "project_name",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximal number of projects to return",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Offset of the returned list",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation - ProjectTemplateResponse (Paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "objects": {
                          "items": {
                            "$ref": "#/components/schemas/ProjectTemplateResponse"
                          },
                          "type": "array"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "List project templates",
        "tags": [
          "Workflow"
        ]
      }
    }
  },
  "tags": [
    {
      "description": "Operations about assets",
      "name": "Assets"
    },
    {
      "description": "Operations about agents",
      "name": "Agents"
    },
    {
      "description": "Operations about installation profiles",
      "name": "Installation Profiles"
    },
    {
      "description": "Operations about labels",
      "name": "Labels"
    },
    {
      "description": "Operations about labels groups",
      "name": "Label Groups"
    },
    {
      "description": "Operations about user groups",
      "name": "User Groups"
    },
    {
      "description": "Get reveal flows",
      "externalDocs": {
        "description": "Full documentation",
        "url": "http://customers.guardicore.com/kb/reveal-flows"
      },
      "name": "Reveal Flows"
    },
    {
      "description": "Operations about rules",
      "externalDocs": {
        "description": "Full documentation",
        "url": "http://customers.guardicore.com/kb/segmentation-policy"
      },
      "name": "Segmentation Policy Rules"
    },
    {
      "name": "Policy Revisions"
    },
    {
      "description": "Guidance of the user to produce policy",
      "name": "Workflow"
    },
    {
      "description": "Get incidents",
      "name": "Incidents"
    },
    {
      "description": "Manipulate Integrity Monitor Templates",
      "name": "Integrity Monitor Templates"
    },
    {
      "description": "Operations on kubernetes clusters",
      "name": "Kubernetes Clusters"
    }
  ],
  "servers": [
    {
      "url": "/api/v3.0"
    }
  ],
  "components": {
    "requestBodies": {
      "bulkLabelAgentsRemoveBody": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "negate_args": {
                  "description": "A selection filter definition (mutual exclusive with the above selected parameter)",
                  "properties": {
                    "filters": {
                      "description": "A dictionary of filter keys and values",
                      "properties": {
                        "activity": {
                          "description": "Agent activity interval (comma-separated string values)",
                          "enum": [
                            "last_month",
                            "last_week",
                            "last_12_hours",
                            "last_24_hours",
                            "not_active"
                          ],
                          "type": "string"
                        },
                        "display_status": {
                          "description": "Agent status (comma-separated string values)",
                          "enum": [
                            "Online",
                            "Offline"
                          ],
                          "type": "string"
                        },
                        "gc_filter": {
                          "description": "Search by Agent ID / Agent Hostname / IP Address",
                          "type": "string"
                        },
                        "label groups": {
                          "description": "Asset label group ids (comma-separated string values)",
                          "type": "string"
                        },
                        "labels": {
                          "description": "Asset label ids (comma-separated string values)",
                          "type": "string"
                        },
                        "module_status_deception": {
                          "description": "Agent's deception module status (mutually exclusive with other module_status_* params here) (comma-separated string values)",
                          "enum": [
                            "Active",
                            "Not Deployed"
                          ],
                          "type": "string"
                        },
                        "module_status_detection": {
                          "description": "Agent's detection module status (mutually exclusive with other module_status_* params here) (comma-separated string values)",
                          "enum": [
                            "Active",
                            "Not Deployed"
                          ],
                          "type": "string"
                        },
                        "module_status_enforcement": {
                          "description": "Agent's enforcement module status (mutually exclusive with other module_status_* params here) (comma-separated string values)",
                          "enum": [
                            "Active",
                            "Not Deployed",
                            "Enforcement disabled from management console"
                          ],
                          "type": "string"
                        },
                        "module_status_reveal": {
                          "description": "Agent's reveal module status (mutually exclusive with other module_status_* params here) (comma-separated string values)",
                          "enum": [
                            "Active",
                            "Not Deployed"
                          ],
                          "type": "string"
                        },
                        "os": {
                          "description": "Asset operating system (comma-separated string values)",
                          "enum": [
                            "Unknown",
                            "Windows",
                            "Linux"
                          ],
                          "type": "string"
                        },
                        "status_flags": {
                          "description": "Agent status flags (comma-separated string values)",
                          "enum": [
                            "undefined (Any Flag)",
                            "1 (Restarted)",
                            "2 (PollingMode)",
                            "3 (OutdatedPolicy)",
                            "4 (OutdatedConfig)",
                            "5 (NoRevealReported)",
                            "6 (HighDropRate)",
                            "7 (EnforcementMissing)",
                            "8 (RevealMissing)",
                            "9 (DeceptionMissing)",
                            "10 (AgentMissing)",
                            "11 (DetectionMissing)",
                            "12 (ControllerMissing)",
                            "13 (PartialPolicy)",
                            "14 (EnforcementPaused)"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "selected": {
                  "example": [
                    "AG-735de135-c5c1-4583-a0e2-4bf485caed2c",
                    "AG-222de135-b5b1-1213-2248-4bf485cae7dk"
                  ],
                  "type": "array",
                  "items": {}
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Request body",
        "required": true
      },
      "bulkSegmentationRulesRemoveLabelBody": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "apply_to": {
                  "description": "Rule side(s) to apply the change on",
                  "enum": [
                    "source",
                    "destination",
                    "both"
                  ],
                  "type": "string"
                },
                "negate_args": {
                  "description": "A selection filter definition (overrides the above selected parameter)",
                  "properties": {
                    "filters": {
                      "description": "A dictionary of filter keys and values",
                      "properties": {
                        "any_side": {
                          "description": "Any side by assets/processes/labels/label_groups/subnet/address_classification",
                          "format": "side_entity",
                          "type": "string"
                        },
                        "destination": {
                          "description": "Destination by assets/processes/labels/label_groups/subnet/address_classification",
                          "format": "side_entity",
                          "type": "string"
                        },
                        "port": {
                          "description": "Port to filter by",
                          "format": "1-65535",
                          "type": "integer"
                        },
                        "protocols": {
                          "description": "IP protocols (TCP/UDP) to filter by",
                          "enum": [
                            "TCP",
                            "UDP"
                          ],
                          "type": "string"
                        },
                        "ruleset": {
                          "description": "Ruleset to filter by",
                          "type": "string"
                        },
                        "search": {
                          "description": "Filter by comment contents or rules starting with a rule_id",
                          "type": "string"
                        },
                        "source": {
                          "description": "Source by assets/processes/labels/label_groups/subnet/address_classification",
                          "format": "side_entity",
                          "type": "string"
                        },
                        "state": {
                          "description": "Rule state to filter by",
                          "enum": [
                            "UNCHANGED",
                            "CREATED",
                            "MODIFIED",
                            "DELETED"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "rule_ids": {
                  "description": "List of rule ids to operate on",
                  "example": [
                    "56784022-2597-4474-bde5-be9f7e0c1420",
                    "92A84022-3001-2223-bde5-be9f7e0cab99"
                  ],
                  "type": "array",
                  "items": {}
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Request body",
        "required": true
      },
      "bulkSegmentationRulesRemoveProcessesBody": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "negate_args": {
                  "description": "A selection filter definition (overrides the above selected parameter)",
                  "properties": {
                    "filters": {
                      "description": "A dictionary of filter keys and values",
                      "properties": {
                        "any_side": {
                          "description": "Any side by assets/processes/labels/label_groups/subnet/address_classification",
                          "format": "side_entity",
                          "type": "string"
                        },
                        "destination": {
                          "description": "Destination by assets/processes/labels/label_groups/subnet/address_classification",
                          "format": "side_entity",
                          "type": "string"
                        },
                        "port": {
                          "description": "Port to filter by",
                          "format": "1-65535",
                          "type": "integer"
                        },
                        "protocols": {
                          "description": "IP protocols (TCP/UDP) to filter by",
                          "enum": [
                            "TCP",
                            "UDP"
                          ],
                          "type": "string"
                        },
                        "ruleset": {
                          "description": "Ruleset to filter by",
                          "type": "string"
                        },
                        "search": {
                          "description": "Filter by comment contents or rules starting with a rule_id",
                          "type": "string"
                        },
                        "source": {
                          "description": "Source by assets/processes/labels/label_groups/subnet/address_classification",
                          "format": "side_entity",
                          "type": "string"
                        },
                        "state": {
                          "description": "Rule state to filter by",
                          "enum": [
                            "UNCHANGED",
                            "CREATED",
                            "MODIFIED",
                            "DELETED"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "rule_ids": {
                  "description": "List of rule ids to operate on",
                  "example": [
                    "56784022-2597-4474-bde5-be9f7e0c1420",
                    "92A84022-3001-2223-bde5-be9f7e0cab99"
                  ],
                  "type": "array",
                  "items": {}
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Request body",
        "required": true
      }
    },
    "schemas": {
      "AffectedAsset": {
        "properties": {
          "country": {
            "example": "Israel",
            "type": "string"
          },
          "country_code": {
            "example": "IL",
            "type": "string"
          },
          "ip": {
            "example": "172.17.0.3",
            "type": "string"
          },
          "is_inner": {
            "example": true,
            "type": "boolean"
          },
          "labels": {
            "items": {
              "example": "source",
              "type": "string"
            },
            "type": "array"
          },
          "vm": {
            "$ref": "#/components/schemas/VM"
          },
          "vm_id": {
            "example": "b40db74f-5f2d-4cda-9c9b-c2cdd8158b1f",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Agent": {
        "properties": {
          "_id": {
            "example": "5a11c4aa20d9ac3fa6ff13cc",
            "type": "string"
          },
          "agent_id": {
            "example": "472470de-c76e-49a3-872d-114af6224c43",
            "format": "uuid",
            "type": "string"
          },
          "asset_id": {
            "example": "cae0382f-11dd-4cea-b574-b1b18e515ecc",
            "format": "uuid",
            "type": "string"
          },
          "build_commit": {
            "example": "1ec7ad828f764c8649f335ae44bebb45a12c6883",
            "type": "string"
          },
          "build_date": {
            "example": 1566500885000,
            "format": "timestamp",
            "type": "int"
          },
          "component_id": {
            "example": "AG-cae0382f-11dd-4cea-b574-b1b18e515ecc",
            "type": "string"
          },
          "configuration_reported_errors": {
            "properties": {
              "enforcementagent": {
                "properties": {
                  "agent_dns_enable": {
                    "example": "Agent doesn't support key",
                    "type": "string"
                  },
                  "agent_dns_rate_limit": {
                    "example": "Agent doesn't support key",
                    "type": "string"
                  }
                }
              }
            }
          },
          "configuration_reported_revision": {
            "example": 1566734543904,
            "type": "integer"
          },
          "display_name": {
            "example": "lin-lin-Agent1",
            "type": "string"
          },
          "doc_version": {
            "example": 57,
            "format": "int32",
            "type": "integer"
          },
          "first_seen": {
            "example": 1511113897992,
            "format": "timestamp",
            "type": "integer"
          },
          "health": {
            "properties": {
              "controller": {
                "properties": {
                  "aggregator": {
                    "properties": {
                      "cluster_id": {
                        "example": "default",
                        "type": "string"
                      },
                      "component_id": {
                        "example": "AGR-421D0F0F-8C6E-9AFC-F257-A4E43B51E07B",
                        "type": "string"
                      },
                      "hostname": {
                        "example": "gc-aggregator-172-16-100-50",
                        "type": "string"
                      }
                    }
                  },
                  "aggregator_component_id": {
                    "example": "AGR-421D0F0F-8C6E-9AFC-F257-A4E43B51E07B",
                    "type": "string"
                  },
                  "capabilities": {
                    "items": {
                      "properties": {
                        "is_ok": {
                          "example": false,
                          "type": "boolean"
                        },
                        "name": {
                          "example": "policy_derivation_type",
                          "type": "string"
                        },
                        "state": {
                          "example": 7,
                          "type": "int"
                        },
                        "text": {
                          "example": "Full layer enforcement",
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  },
                  "status": {
                    "enum": [
                      "UNKNOWN",
                      "INITIALIZING",
                      "RUNNING",
                      "STOPPED",
                      "ERROR"
                    ],
                    "example": "RUNNING",
                    "type": "string"
                  }
                }
              },
              "deception_agent": {
                "properties": {
                  "aggregator": {
                    "properties": {
                      "cluster_id": {
                        "example": "default",
                        "type": "string"
                      },
                      "component_id": {
                        "example": "AGR-421D0F0F-8C6E-9AFC-F257-A4E43B51E07B",
                        "type": "string"
                      },
                      "hostname": {
                        "example": "gc-aggregator-172-16-100-50",
                        "type": "string"
                      }
                    }
                  },
                  "aggregator_component_id": {
                    "example": "AGR-421D0F0F-8C6E-9AFC-F257-A4E43B51E07B",
                    "type": "string"
                  },
                  "capabilities": {
                    "items": {
                      "properties": {
                        "is_ok": {
                          "example": false,
                          "type": "boolean"
                        },
                        "name": {
                          "example": "policy_derivation_type",
                          "type": "string"
                        },
                        "state": {
                          "example": 7,
                          "type": "int"
                        },
                        "text": {
                          "example": "Full layer enforcement",
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  },
                  "status": {
                    "enum": [
                      "UNKNOWN",
                      "INITIALIZING",
                      "RUNNING",
                      "STOPPED",
                      "ERROR"
                    ],
                    "example": "RUNNING",
                    "type": "string"
                  }
                }
              },
              "enforcement_agent": {
                "properties": {
                  "aggregator": {
                    "properties": {
                      "cluster_id": {
                        "example": "default",
                        "type": "string"
                      },
                      "component_id": {
                        "example": "AGR-421D0F0F-8C6E-9AFC-F257-A4E43B51E07B",
                        "type": "string"
                      },
                      "hostname": {
                        "example": "gc-aggregator-172-16-100-50",
                        "type": "string"
                      }
                    }
                  },
                  "aggregator_component_id": {
                    "example": "AGR-421D0F0F-8C6E-9AFC-F257-A4E43B51E07B",
                    "type": "string"
                  },
                  "capabilities": {
                    "items": {
                      "properties": {
                        "is_ok": {
                          "example": false,
                          "type": "boolean"
                        },
                        "name": {
                          "example": "policy_derivation_type",
                          "type": "string"
                        },
                        "state": {
                          "example": 7,
                          "type": "int"
                        },
                        "text": {
                          "example": "Full layer enforcement",
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  },
                  "status": {
                    "enum": [
                      "UNKNOWN",
                      "INITIALIZING",
                      "RUNNING",
                      "STOPPED",
                      "ERROR"
                    ],
                    "example": "RUNNING",
                    "type": "string"
                  }
                }
              },
              "reveal_agent": {
                "properties": {
                  "aggregator": {
                    "properties": {
                      "cluster_id": {
                        "example": "default",
                        "type": "string"
                      },
                      "component_id": {
                        "example": "AGR-421D0F0F-8C6E-9AFC-F257-A4E43B51E07B",
                        "type": "string"
                      },
                      "hostname": {
                        "example": "gc-aggregator-172-16-100-50",
                        "type": "string"
                      }
                    }
                  },
                  "aggregator_component_id": {
                    "example": "AGR-421D0F0F-8C6E-9AFC-F257-A4E43B51E07B",
                    "type": "string"
                  },
                  "capabilities": {
                    "items": {
                      "properties": {
                        "is_ok": {
                          "example": false,
                          "type": "boolean"
                        },
                        "name": {
                          "example": "policy_derivation_type",
                          "type": "string"
                        },
                        "state": {
                          "example": 7,
                          "type": "int"
                        },
                        "text": {
                          "example": "Full layer enforcement",
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  },
                  "status": {
                    "enum": [
                      "UNKNOWN",
                      "INITIALIZING",
                      "RUNNING",
                      "STOPPED",
                      "ERROR"
                    ],
                    "example": "RUNNING",
                    "type": "string"
                  }
                }
              }
            }
          },
          "hostname": {
            "example": "SqlServer1",
            "type": "string"
          },
          "id": {
            "example": "5a11c4aa20d9ac3fa6ff13cc",
            "type": "string"
          },
          "installed_modules": {
            "items": {
              "enum": [
                "DECEPTION_AGENT",
                "REVEAL_AGENT",
                "ENFORCEMENT_AGENT",
                "DETECTION_AGENT",
                "CONTROLLER"
              ],
              "example": "DECEPTION_AGENT",
              "type": "string"
            },
            "type": "array"
          },
          "ip_addresses": {
            "items": {
              "example": "192.168.0.1",
              "type": "string"
            },
            "type": "array"
          },
          "is_agent_missing": {
            "example": false,
            "type": "boolean"
          },
          "is_configuration_dirty": {
            "example": false,
            "type": "boolean"
          },
          "is_missing": {
            "example": false,
            "type": "boolean"
          },
          "kernel": {
            "type": "string",
            "value": "4.4"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/LabelMinimal"
            },
            "type": "array"
          },
          "labels_groups": {
            "items": {
              "$ref": "#/components/schemas/LabelGroupMinimal"
            },
            "type": "array"
          },
          "last_seen": {
            "example": 1511183957542,
            "format": "timestamp",
            "type": "integer"
          },
          "not_monitored": {
            "example": false,
            "type": "boolean"
          },
          "os": {
            "enum": [
              "UNKNOWN",
              "WINDOWS",
              "LINUX",
              "HTTP",
              "SMBLURE",
              "SOLARIS"
            ],
            "example": "Windows",
            "type": "string"
          },
          "policy_revision": {
            "example": 35,
            "type": "int"
          },
          "status": {
            "enum": [
              "ONLINE",
              "OFFLINE"
            ],
            "example": "ONLINE",
            "type": "string"
          },
          "status_flags": {
            "items": {
              "properties": {
                "flag_type": {
                  "enum": [
                    "PollingMode",
                    "OutdatedPolicy",
                    "OutdatedConfiguration",
                    "NoRevealReceived",
                    "HighDropRate",
                    "AgentMissing",
                    "PartialPolicy",
                    "EnforcementPaused",
                    "NoRevealReported",
                    "RevealOffline",
                    "EnforcementOffline",
                    "RevealModuleError",
                    "EnforcementModuleError",
                    "DetectionModuleError",
                    "DeceptionModuleError",
                    "ControllerModuleError"
                  ],
                  "example": "Polling Mode",
                  "type": "string"
                },
                "last_seen_time": {
                  "example": true,
                  "type": "boolean"
                }
              }
            },
            "type": "array"
          },
          "supported_features": {
            "items": {
              "example": "FileLookup",
              "type": "string"
            },
            "type": "array"
          },
          "version": {
            "example": "2.6.18639",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgentBulkLabelResponse": {
        "properties": {
          "count_associated": {
            "description": "number of agents (assets) that had label added during the operation",
            "example": 20,
            "type": "integer"
          },
          "count_disassociated": {
            "description": "number of agents (assets) that had the label removed during the operation",
            "example": 30,
            "type": "integer"
          },
          "label": {
            "description": "For a Set operation, will hold the data of the actual label entry that was used",
            "properties": {
              "id": {
                "example": "735de135-c5c1-4583-a0e2-4bf485caed2c",
                "type": "string"
              },
              "key": {
                "example": "example-key",
                "type": "string"
              },
              "name": {
                "example": "example-key: example-value",
                "type": "string"
              },
              "value": {
                "example": "example-value",
                "type": "string"
              }
            },
            "type": "Label"
          }
        }
      },
      "AgentDiagnostics": {
        "properties": {
          "agents": {
            "items": {
              "$ref": "#/components/schemas/AgentDiagnosticsAgentEntry"
            },
            "type": "array"
          },
          "all_logs": {
            "$ref": "#/components/schemas/AgentDiagnosticsFile"
          },
          "created_by": {
            "example": "admin",
            "type": "string"
          },
          "creation_time": {
            "example": 1534409108740,
            "format": "timestamp",
            "type": "integer"
          },
          "id": {
            "example": "87d8a0a0-ee47-4170-a0b4-47de93f3041c",
            "format": "uuid",
            "type": "string"
          },
          "seconds_until_timeout": {
            "example": "49",
            "type": "integer"
          },
          "state": {
            "enum": [
              "RUNNING",
              "DONE",
              "ABORTED"
            ],
            "example": "DONE",
            "type": "string"
          },
          "total_used_storage": {
            "example": 46245,
            "type": "integer"
          },
          "verbose": {
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AgentDiagnosticsAgentEntry": {
        "properties": {
          "agent_id": {
            "example": "AG-735de135-c5c1-4583-a0e2-4bf485caed2c",
            "type": "string"
          },
          "agent_uuid": {
            "example": "08f44f94-47c5-4c36-9924-9487448eebf7",
            "type": "string"
          },
          "display_name": {
            "example": "lin-lin-Agent1",
            "type": "string"
          },
          "logs_file": {
            "$ref": "#/components/schemas/AgentDiagnosticsFile"
          },
          "temp_basic_logs": {
            "$ref": "#/components/schemas/AgentDiagnosticsFile"
          },
          "temp_verbose_logs": {
            "$ref": "#/components/schemas/AgentDiagnosticsFile"
          }
        },
        "type": "object"
      },
      "AgentDiagnosticsFile": {
        "properties": {
          "data": {
            "example": "5bd084d930c7960001ce398b",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgentInstallationProfileConfiguration": {
        "description": "Profile configuration <br /> Fields not included here will fallback to 'default' profile. <br /> Fields not included in 'default' profile will fallback to system defaults.\n",
        "example": {
          "revealagent": {
            "agent_log_debug": false
          }
        },
        "type": "object"
      },
      "AgentInstallationProfileDescription": {
        "description": "Profile description",
        "example": "Database servers profile",
        "type": "string"
      },
      "AgentInstallationProfileName": {
        "description": "Unique profile name.<br /> <br /> Limitations:<br /> - Allowed characters are: lowercase alphanumeric, '_' and '-' only.<br /> - Length should not exceed <i>cfg.CONF.management.max_agent_installation_profile_name_length</i>\n",
        "example": "db_server",
        "type": "string"
      },
      "AgentResetConfigurationProfilesResult": {
        "additionalProperties": {
          "description": "Number of agents that were reset per profile name",
          "type": "integer"
        },
        "example": {
          "db_server": 1,
          "default": 2
        },
        "type": "object"
      },
      "AgentResetConfigurationResult": {
        "properties": {
          "profiles": {
            "$ref": "#/components/schemas/AgentResetConfigurationProfilesResult"
          },
          "verbose": {
            "$ref": "#/components/schemas/AgentResetConfigurationVerboseResult"
          }
        },
        "required": [
          "profiles"
        ],
        "type": "object"
      },
      "AgentResetConfigurationVerboseResult": {
        "additionalProperties": {
          "description": "Further agent information per agent display name",
          "properties": {
            "agent_installation_profile": {
              "description": "The profile the agent was installed with",
              "type": "string"
            },
            "id": {
              "description": "Agent id",
              "type": "string"
            },
            "reset_installation_profile": {
              "description": "Profile to which the agent will be reset. <br /> If agent_installation_profile exists in the system, reset_installation_profile will match it. <br /> If agent_installation_profile does not exist in the system, this field will be the 'default' profile.\n",
              "type": "string"
            }
          },
          "required": [
            "id",
            "reset_installation_profile",
            "agent_installation_profile"
          ],
          "type": "object"
        },
        "description": "Returned only if number of agents to reset is lower or equal to <i>cfg.CONF.management.max_agents_for_detailed_reset_configuration_result</i>\n",
        "example": {
          "linux-sql-server": {
            "agent_installation_profile": "db_server",
            "id": "9008543c-a425-4229-9a08-48d58ba57b70",
            "reset_installation_profile": "db_server"
          },
          "linux-sql-server-test1": {
            "agent_installation_profile": "db_server_test_deleted",
            "id": "7328643c-a455-4229-3d98-48a58ca83b18",
            "reset_installation_profile": "default"
          },
          "linux-sql-server-test2": {
            "agent_installation_profile": "default",
            "id": "7328643c-a455-4229-3d98-48a58ca83b18",
            "reset_installation_profile": "default"
          }
        },
        "type": "object"
      },
      "AndLabels": {
        "properties": {
          "and_labels": {
            "items": {
              "$ref": "#/components/schemas/LabelMinimal"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiErrorResponse": {
        "properties": {
          "code": {
            "example": 4,
            "type": "integer"
          },
          "error": {
            "type": "string"
          },
          "message": {
            "example": "The limit parameter was set too high, please use a limit parameter of 1000 or below",
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "ApiErrorResponseLarge": {
        "properties": {
          "code": {
            "example": 4,
            "type": "integer"
          },
          "error": {
            "type": "string"
          },
          "message": {
            "example": "The limit parameter was set too high, please use a limit parameter of 10,000 or below",
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "Asset": {
        "properties": {
          "_id": {
            "example": "74238291-b85a-42fb-bac9-80c402abee04",
            "format": "uuid",
            "type": "string"
          },
          "active": {
            "example": true,
            "type": "boolean"
          },
          "bios_uuid": {
            "example": "422F1C5F-3389-9382-F995-E0AA4D06A8DC",
            "type": "string"
          },
          "comments": {
            "example": "IIS Server",
            "type": "string"
          },
          "doc_version": {
            "example": 57,
            "format": "int32",
            "type": "integer"
          },
          "first_seen": {
            "example": 1511035530994,
            "format": "timestamp",
            "type": "integer"
          },
          "full_name": {
            "example": "192.168.0.102\\winServer2",
            "type": "string"
          },
          "guest_agent_details": {
            "$ref": "#/components/schemas/GuestAgentDetails"
          },
          "hw_uuid": {
            "example": "e4fc7dad-9086-416e-b27f-5c0510289c6e",
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "example": "be40ab24-5805-48ed-90b1-1d3036f3be4f",
            "format": "uuid",
            "type": "string"
          },
          "ip_addresses": {
            "items": {
              "example": "192.168.0.1",
              "type": "string"
            },
            "type": "array"
          },
          "is_on": {
            "example": true,
            "type": "boolean"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/LabelMinimal"
            },
            "type": "array"
          },
          "last_guest_agent_details_update": {
            "example": 1511035530994,
            "format": "timestamp",
            "type": "integer"
          },
          "last_seen": {
            "example": 1511035530994,
            "format": "timestamp",
            "type": "integer"
          },
          "mac_addresses": {
            "items": {
              "example": "00:50:56:bb:2d:ab",
              "type": "string"
            },
            "type": "array"
          },
          "metadata": {
            "description": "Orchestration metadata",
            "items": {
              "example": [
                "power_state",
                "poweredOn"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "array"
          },
          "name": {
            "example": "winServer2",
            "type": "string"
          },
          "nics": {
            "items": {
              "$ref": "#/components/schemas/Nic"
            },
            "type": "array"
          },
          "orchestration_details": {
            "items": {
              "$ref": "#/components/schemas/OrchestrationDetail"
            },
            "type": "array"
          },
          "recent_domains": {
            "items": {
              "example": "domain.com",
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "enum": [
              "on",
              "off",
              "deleted"
            ],
            "type": "string"
          },
          "summary": {
            "properties": {
              "bad_reputation": {
                "example": 4,
                "format": "int32",
                "type": "integer"
              },
              "incidents_by_label": {
                "properties": {
                  "destination": {
                    "example": 8,
                    "format": "int32",
                    "type": "integer"
                  },
                  "source": {
                    "example": 4,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "incidents_by_severity": {
                "properties": {
                  "High": {
                    "example": 0,
                    "format": "int32",
                    "type": "integer"
                  },
                  "Low": {
                    "example": 0,
                    "format": "int32",
                    "type": "integer"
                  },
                  "Medium": {
                    "example": 0,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "integrity_violations": {
                "example": 4,
                "format": "int32",
                "type": "integer"
              },
              "lateral_movements": {
                "example": 0,
                "format": "int32",
                "type": "integer"
              },
              "network_scans": {
                "example": 4,
                "format": "int32",
                "type": "integer"
              },
              "policy_violations": {
                "example": 10,
                "format": "int32",
                "type": "integer"
              },
              "total_incidents_count": {
                "example": 12,
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "vm": {
            "properties": {
              "name": {
                "example": "Attacker2",
                "type": "string"
              },
              "orchestration_details": {
                "items": {
                  "$ref": "#/components/schemas/OrchestrationDetail"
                },
                "type": "array"
              },
              "tenant_name": {
                "example": "192.168.0.102",
                "type": "string"
              },
              "vm_id": {
                "example": "74238291-b85a-42fb-bac9-80c402abee04",
                "format": "uuid",
                "type": "string"
              }
            },
            "type": "object"
          },
          "vm_id": {
            "example": "74238291-b85a-42fb-bac9-80c402abee04",
            "format": "uuid",
            "type": "string"
          },
          "vm_name": {
            "example": "Attacker2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetLabel": {
        "properties": {
          "id": {
            "example": "f76a7bcc-0677-42f2-8ef4-707da6796bbb",
            "format": "uuid",
            "type": "string"
          },
          "labels": {
            "items": {
              "example": "40562ef8-7b74-4bcb-a101-b49a67232022",
              "type": "string"
            },
            "type": "array"
          },
          "metadata": {
            "example": {},
            "type": "object"
          },
          "name": {
            "example": "SqlServer1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetMinimal": {
        "properties": {
          "id": {
            "example": "461bf3a5-22b0-4693-8e8e-fc89807f39cc",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "example": "SqlServer1",
            "type": "string"
          },
          "nics": {
            "items": {
              "$ref": "#/components/schemas/Nic"
            },
            "type": "array"
          },
          "recent_domains": {
            "items": {
              "example": "mydomain.com",
              "type": "string"
            },
            "type": "array"
          },
          "tenant_name": {
            "example": "192.168.0.1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssignOptions": {
        "properties": {
          "text": {
            "description": "scope name",
            "example": "Boston worksite",
            "type": "string"
          },
          "value": {
            "description": "scope ID",
            "example": "735de135-c5c1-4583-a0e2-4bf485caed2c",
            "format": "uuid",
            "type": "string"
          }
        }
      },
      "Author": {
        "properties": {
          "description": {
            "description": "Author short description",
            "example": "Default administrator user",
            "type": "string"
          },
          "username": {
            "description": "Author username",
            "example": "admin",
            "type": "string"
          }
        },
        "required": [
          "username",
          "description"
        ],
        "type": "object"
      },
      "BlacklistResponse": {
        "properties": {
          "invalid": {
            "example": "[{\"key\": \"10.0.0.0\", \"tags\": [\"err_tag|1\", \"err_tag|2\"]}, {\"key\": \"10.0.0.1\", \"tags\": [\"err_tag|3\", \"err_tag|4\"]}]",
            "items": {
              "properties": {
                "key": {
                  "description": "value",
                  "type": "string"
                },
                "tags": {
                  "items": {
                    "description": "tag",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "invalid_count": {
            "example": 0,
            "type": "integer"
          },
          "publish_time": {
            "example": "39.306317091s",
            "type": "string"
          },
          "type": {
            "example": "ip",
            "type": "string"
          },
          "valid_count": {
            "example": 50452,
            "type": "integer"
          }
        }
      },
      "BulkAssignResponse": {
        "properties": {
          "assigned": {
            "description": "number of assigned",
            "example": 30,
            "type": "integer"
          },
          "failed": {
            "description": "number of assignment failures",
            "example": 20,
            "type": "integer"
          }
        }
      },
      "BulkLabelAdded": {
        "properties": {
          "Updated Labels": {
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CountResponse": {
        "properties": {
          "count": {
            "example": 422,
            "type": "integer"
          }
        }
      },
      "Criteria": {
        "properties": {
          "argument": {
            "example": "sql",
            "type": "string"
          },
          "field": {
            "example": "name",
            "type": "string"
          },
          "label_id": {
            "example": "14bcc4b0-93af-410f-b99a-61172f120d75",
            "type": "string"
          },
          "op": {
            "enum": [
              "STARTSWITH",
              "ENDSWITH",
              "EQUALS",
              "CONTAINS",
              "SUBNET",
              "WILDCARDS"
            ],
            "example": "STARTSWITH",
            "type": "string"
          },
          "source": {
            "enum": [
              "User",
              "Orchestration",
              "Agent"
            ],
            "example": "User",
            "name": "string"
          }
        },
        "type": "object"
      },
      "CriteriaList": {
        "properties": {
          "argument": {
            "example": "sql",
            "type": "string"
          },
          "case_sensitive": {
            "example": false,
            "type": "boolean"
          },
          "field": {
            "example": "name",
            "type": "string"
          },
          "matching_vms": {
            "items": {
              "properties": {
                "_id": {
                  "example": "15a2bad7-0fd2-415a-8193-d58c4380e2bb",
                  "format": "uuid",
                  "type": "string"
                },
                "name": {
                  "example": "SqlServer1",
                  "type": "string"
                }
              }
            },
            "type": "array"
          },
          "op": {
            "enum": [
              "STARTSWITH",
              "ENDSWITH",
              "EQUALS",
              "CONTAINS",
              "SUBNET",
              "WILDCARDS"
            ],
            "example": "STARTSWITH",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteStaleHashesResponse": {
        "properties": {
          "deleted_files": {
            "items": {
              "properties": {
                "path": {
                  "example": "C:\\Program Files\\MSSQL\\mssql_conf.ini",
                  "type": "string"
                },
                "template_id": {
                  "example": "a00db74f-5f2d-4cda-9c9b-c2cdd8158b11",
                  "format": "uuid",
                  "type": "string"
                },
                "template_title": {
                  "example": "MSSQL Installation",
                  "type": "string"
                }
              }
            },
            "type": "array"
          },
          "deleted_templates": {
            "items": {
              "properties": {
                "template_id": {
                  "example": "a00db74f-5f2d-4cda-9c9b-c2cdd8158b11",
                  "format": "uuid",
                  "type": "string"
                },
                "template_title": {
                  "example": "MSSQL Installation",
                  "type": "string"
                }
              }
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Event": {
        "properties": {
          "_id": {
            "example": "a120a1ba-15d1-4d10-8299-5c10f34975cb",
            "format": "uuid",
            "type": "string"
          },
          "description": {
            "example": "Scanner detected.",
            "type": "string"
          },
          "destinations": {
            "items": {
              "example": [
                443,
                "10.0.0.1"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "array"
          },
          "doc_version": {
            "example": 57,
            "format": "int32",
            "type": "integer"
          },
          "event_source": {
            "example": "DP-422FB8A7-D525-D1A4-B2B8-1ABAD6137A64",
            "type": "string"
          },
          "event_type": {
            "enum": [
              "DatapathRedirectEvent",
              "HoneypotRedirectEvent",
              "HoneypotSecurityEvent",
              "HoneypotSecurityNetworkEvent",
              "SystemEvent",
              "DatapathScanDetectionEvent",
              "DatapathCrashEvent",
              "HoneypotSystemEvent"
            ],
            "example": "DatapathScanDetectionEvent",
            "type": "string"
          },
          "id": {
            "example": "a120a1ba-15d1-4d10-8299-5c10f34975cb",
            "format": "uuid",
            "type": "string"
          },
          "incident_id": {
            "example": "4506a1ba-15d1-4d10-8299-5c10f34975cb",
            "format": "uuid",
            "type": "string"
          },
          "is_experimental": {
            "example": false,
            "type": "boolean"
          },
          "processed_time": {
            "example": 1512375007928,
            "format": "int64",
            "type": "integer"
          },
          "received_time": {
            "example": 1512375006000,
            "format": "int64",
            "type": "integer"
          },
          "severity": {
            "example": 40,
            "format": "int32",
            "type": "integer"
          },
          "source_ip": {
            "example": "127.0.0.1",
            "type": "string"
          },
          "source_vm": {
            "$ref": "#/components/schemas/VM"
          },
          "tag_refs": {
            "items": {
              "example": "aa96a1ba-15d1-4d10-8299-5c10f34975cb",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "time": {
            "example": 1512374896401,
            "format": "int64",
            "type": "integer"
          },
          "uuid": {
            "example": "a32a528c-293b-4185-80ec-652b435c1297",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Flow": {
        "properties": {
          "connection_types": {
            "example": [],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "destination_endpoint_id": {
            "example": "GROUP_Honeypot",
            "type": "string"
          },
          "destination_endpoint_type": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          },
          "destination_ports": {
            "items": {
              "example": 22,
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "id": {
            "example": "grp:666f6c6465723a203139322e3136382e302e313031__grp:47524f55505f486f6e6579706f74",
            "type": "string"
          },
          "in": {
            "example": "folder: 192.168.0.101",
            "type": "string"
          },
          "out": {
            "example": "GROUP_Honeypot",
            "type": "string"
          },
          "overlays": {
            "example": {},
            "type": "object"
          },
          "source_endpoint_id": {
            "example": "folder: 192.168.0.101",
            "type": "string"
          },
          "source_endpoint_type": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "example": "hpvm_flow",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Graph": {
        "properties": {
          "x": {
            "format": "int64",
            "type": "integer"
          },
          "y": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GroupsByDomainName": {
        "properties": {
          "guardicore.com": {
            "properties": {
              "groups": {
                "items": {
                  "properties": {
                    "id": {
                      "example": "S-ID-5-21-428309472094724092",
                      "type": "string"
                    },
                    "name": {
                      "example": "Guardicore Admins",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "orchestration_id": {
                "example": "f76a7bcc-0677-42f2-8ef4-707da6796bbb",
                "format": "uuid",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "GuestAgentDetails": {
        "properties": {
          "agent_type": {
            "enum": [
              "2 (Reveal Agent)",
              "7 (Datapath Visibility)",
              "11 (RouterModeDatapath)",
              "12 (DeceptionAgent)",
              "13 (EnforcementAgent)",
              "14 (DetectionAgent)",
              "15 (Controller)",
              "101 (KubernetesNode)",
              "102 (KubernetesPod)"
            ],
            "example": 2,
            "format": "int64",
            "type": "integer"
          },
          "agent_version": {
            "example": "2.6.17980",
            "type": "string"
          },
          "client_cert_ssl_cn_name": {
            "example": "gc-client-1d765c0634635b10",
            "type": "string"
          },
          "hardware": {
            "$ref": "#/components/schemas/Hardware"
          },
          "hostname": {
            "example": "winServer2",
            "type": "string"
          },
          "labels": {
            "items": {
              "example": "fe3ef6a8-858f-407d-bd6e-30fb9cc30522",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "example": "winServer2",
            "type": "string"
          },
          "network": {
            "items": {
              "properties": {
                "hardware_address": {
                  "example": "00:50:56:bb:2d:ab",
                  "type": "string"
                },
                "interface_name": {
                  "example": "eth0",
                  "type": "string"
                },
                "ip_addresses": {
                  "items": {
                    "properties": {
                      "address": {
                        "example": "192.168.0.1",
                        "type": "string"
                      },
                      "address_type": {
                        "enum": [
                          "4 (IPv4)",
                          "6 (IPv60"
                        ],
                        "example": 4,
                        "format": "int32",
                        "type": "integer"
                      },
                      "prefix_len": {
                        "example": 16,
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "os": {
            "enum": [
              "0 (Unknown)",
              "1 (Windows)",
              "2 (Linux)"
            ],
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "os_details": {
            "$ref": "#/components/schemas/OSDetails"
          },
          "supported_features": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "example": {
              "RevealAgent": [
                "FileLookup"
              ]
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Hardware": {
        "properties": {
          "architecture": {
            "example": "amd64",
            "type": "string"
          },
          "bios_uuid": {
            "example": "94706CA9-45D7-E411-0001-0000000031EF",
            "type": "string"
          },
          "hw_uuid": {
            "example": "e4fc7dad-9086-416e-b27f-5c0510289c6e",
            "format": "uuid",
            "type": "string"
          },
          "serial": {
            "example": "VMware-42 20 10 13 43 d3 13 79-7c a1 22 22 3a 4c 01 2f",
            "type": "string"
          },
          "vendor": {
            "example": "VMware Virtual Platform",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HashTuple": {
        "properties": {
          "hash": {
            "example": "d30870aa14a5c07698a9d82e05c9838ee133c5d9a4f15481c19434d45a942893",
            "type": "string"
          },
          "path": {
            "example": "/var/a.txt",
            "type": "string"
          },
          "template_id": {
            "example": "a00db74f-5f2d-4cda-9c9b-c2cdd8158b11",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Incident": {
        "properties": {
          "_cls": {
            "enum": [
              "Incident.NetworkVisibilityIncident",
              "Incident.NetworkScanIncident",
              "Incident.HoneypotIncident"
            ],
            "example": "Incident.NetworkVisibilityIncident",
            "type": "string"
          },
          "_id": {
            "example": "4506a1ba-15d1-4d10-8299-5c10f34975cb",
            "format": "uuid",
            "type": "string"
          },
          "affected_assets": {
            "items": {
              "$ref": "#/components/schemas/AffectedAsset"
            },
            "type": "array"
          },
          "closed_time": {
            "example": 1510979377066,
            "format": "int32",
            "type": "integer"
          },
          "concatenated_tags": {
            "items": {
              "properties": {
                "display_name": {
                  "example": "Internal",
                  "type": "string"
                },
                "tag_class": {
                  "example": "ENRICHER",
                  "type": "string"
                }
              }
            },
            "type": "array"
          },
          "destination_asset": {
            "properties": {
              "ip": {
                "example": "172.17.0.3",
                "type": "string"
              },
              "is_inner": {
                "example": true,
                "type": "boolean"
              },
              "labels": {
                "items": {
                  "example": "destination",
                  "type": "string"
                },
                "type": "array"
              },
              "vm": {
                "$ref": "#/components/schemas/VM"
              },
              "vm_id": {
                "example": "74238291-b85a-42fb-bac9-80c402abee04",
                "format": "uuid",
                "type": "string"
              }
            }
          },
          "destination_net": {
            "example": "many",
            "type": "string"
          },
          "destinations": {
            "items": {
              "properties": {
                "ip_int": {
                  "example": "1684300813",
                  "format": "int64",
                  "type": "integer"
                },
                "ports": {
                  "items": {
                    "example": "ARP",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "direction": {
            "enum": [
              "unidirectional",
              "bidirectional"
            ],
            "example": "unidirectional",
            "type": "string"
          },
          "doc_version": {
            "example": 59,
            "format": "int32",
            "type": "integer"
          },
          "end_time": {
            "example": 1504689940953,
            "format": "int64",
            "type": "integer"
          },
          "ended": {
            "example": true,
            "type": "boolean"
          },
          "enriched": {
            "example": true,
            "type": "boolean"
          },
          "events": {
            "items": {
              "$ref": "#/components/schemas/Event"
            },
            "type": "array"
          },
          "experimental_id": {
            "example": "925fd3c9-f933-482f-9eb1-61f61ba4bc3a",
            "format": "uuid",
            "type": "string"
          },
          "first_asset": {
            "properties": {
              "asset_id": {
                "example": "2.20.153.161",
                "type": "string"
              },
              "asset_type": {
                "enum": [
                  "IP",
                  "VM"
                ],
                "example": "IP",
                "type": "string"
              }
            },
            "type": "object"
          },
          "flow_ids": {
            "items": {
              "example": "17bf0add897bbb7a1bd55c24b9cc7ea5fb92ad6f2dd0be7704734accef4226e6__bd8d287246b85de5334d115adc61a4232fd1d904e6f57cf16c0f7d8adde3eb51__Tcp__80",
              "type": "string"
            },
            "type": "array"
          },
          "has_export": {
            "example": true,
            "type": "boolean"
          },
          "has_policy_violations": {
            "example": true,
            "type": "boolean"
          },
          "id": {
            "example": "4506a1ba-15d1-4d10-8299-5c10f34975cb",
            "format": "uuid",
            "type": "string"
          },
          "incident_group": {
            "items": {
              "properties": {
                "gid": {
                  "example": "a7f870fa-85ab-47fe-8156-f5e45e7208eb",
                  "type": "string"
                },
                "gname": {
                  "example": "GRP-a7f870fa",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "incident_type": {
            "example": "Reveal",
            "type": "string"
          },
          "iocs": {
            "items": {
              "properties": {
                "initiating_tags": {
                  "items": {
                    "example": "0736307a-8aef-4d42-b4dd-c89da42e9135",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                },
                "ioc_id": {
                  "example": "bfc2399e-9546-4d4a-8989-cf9bcf5426e2",
                  "format": "uuid",
                  "type": "string"
                },
                "related_tags": {
                  "items": {
                    "example": "3d7a9595-f293-4c54-addf-4fa22c29725e",
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                },
                "source": {
                  "example": "LoginsDetector.detect_successful_logins",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "is_experimental": {
            "example": true,
            "type": "boolean"
          },
          "labels": {
            "items": {
              "example": "source",
              "type": "string"
            },
            "type": "array"
          },
          "last_updated_time": {
            "example": 1504689940952,
            "format": "int64",
            "type": "integer"
          },
          "originl_id": {
            "example": "",
            "format": "uuid",
            "type": "string"
          },
          "policy_revision": {
            "example": 22,
            "format": "int32",
            "type": "integer"
          },
          "processed_eventS_count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "recommendations": {
            "items": {
              "$ref": "#/components/schemas/Recommendation"
            },
            "type": "array"
          },
          "reenrich_count": {
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "remote_index": {
            "example": "incidents__2017_12_03_00_00_00",
            "type": "string"
          },
          "second_asset": {
            "properties": {
              "asset_id": {
                "example": "2.20.153.161",
                "type": "string"
              },
              "asset_type": {
                "enum": [
                  "IP",
                  "VM"
                ],
                "example": "IP",
                "type": "string"
              }
            },
            "type": "object"
          },
          "sensor_name": {
            "example": "DP-422F8CE0-C6A1-D633-52C4-2EDE049F6094",
            "type": "string"
          },
          "sensor_type": {
            "enum": [
              "HONEYPOT",
              "DATAPATH_AGENT",
              "MITIGATION_AGENT",
              "VISIBILITY"
            ],
            "example": "VISIBILITY",
            "type": "string"
          },
          "severity": {
            "example": 40,
            "format": "int32",
            "type": "integer"
          },
          "similarity_calculated": {
            "example": false,
            "type": "boolean"
          },
          "source_asset": {
            "properties": {
              "ip": {
                "example": "172.17.0.1",
                "type": "string"
              },
              "is_inner": {
                "example": true,
                "type": "boolean"
              },
              "labels": {
                "items": {
                  "example": "source",
                  "type": "string"
                },
                "type": "array"
              },
              "vm": {
                "$ref": "#/components/schemas/VM"
              },
              "vm_id": {
                "example": "11338291-b85a-42fb-bac9-80c402abee04",
                "format": "uuid",
                "type": "string"
              }
            }
          },
          "source_ip": {
            "example": "10.0.0.1",
            "type": "string"
          },
          "source_vm": {
            "$ref": "#/components/schemas/VM"
          },
          "source_vm_id": {
            "example": "74238291-b85a-42fb-bac9-80c402abee04",
            "type": "string"
          },
          "start_time": {
            "example": 1504688829035,
            "format": "int64",
            "type": "integer"
          },
          "total_events_count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "affectedAsset"
        ],
        "type": "object"
      },
      "InsightFilter": {
        "description": "Filter used to select which agents will run the query",
        "properties": {
          "labels": {
            "description": "Run query only on agents in these labels. Use OrLabels format for this filter.",
            "properties": {
              "or_labels": {
                "items": {
                  "properties": {
                    "and_labels": {
                      "items": {
                        "example": "8ab96e10-d029-4ca3-870b-df85741819ba",
                        "format": "uuid",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "os": {
            "description": "Run query only on these operating systems. Empty defaults to all available options",
            "example": [
              "Windows",
              "Linux"
            ],
            "items": {
              "enum": [
                "Windows",
                "Linux"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InsightInfo": {
        "properties": {
          "creation_time": {
            "description": "Timestamp of the query's creation time",
            "example": 1602412945,
            "format": "timestamp",
            "type": "integer"
          },
          "id": {
            "description": "New query ID",
            "example": "12341234-1234-1234-12341234",
            "format": "uuid",
            "type": "string"
          },
          "query": {
            "description": "Actual query string",
            "example": "SELECT * FROM Routes;",
            "type": "string"
          },
          "remaining_time_secs": {
            "description": "Estimated number of seconds until all agents finish the query",
            "example": 15,
            "type": "integer"
          },
          "statistics": {
            "description": "How many agents are in each query status for this query",
            "properties": {
              "empty": {
                "example": 0,
                "type": "integer"
              },
              "failed": {
                "example": 2,
                "type": "integer"
              },
              "finished": {
                "example": 3,
                "type": "integer"
              },
              "pending": {
                "example": 10,
                "type": "integer"
              },
              "timed_out": {
                "example": 0,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "status": {
            "description": "Current query status",
            "enum": [
              "Pending",
              "In Progress",
              "Done",
              "Aborting",
              "Aborted"
            ],
            "type": "string"
          },
          "user": {
            "description": "Name of the user that run this query",
            "example": "admin",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InsightResultList": {
        "description": "A single result returned by an agent running Insight.<br> The result will include the agent's id and name and one or more values depending on the query's parameters\n",
        "properties": {
          "agent_id": {
            "example": "8ab96e10-d029-4ca3-870b-df85741819ba",
            "type": "string"
          },
          "agent_name": {
            "example": "ubuntu-20.4",
            "type": "string"
          },
          "query_parameter_1": {
            "example": "answer_1",
            "type": "string"
          },
          "query_parameter_2": {
            "example": "answer_2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IntegrityMonitorTemplate": {
        "properties": {
          "affected_asset_ids": {
            "description": "List of asset ids that will be validated against the template",
            "example": [
              "d4927512-d1f2-4fd1-85dc-0a5e39691326",
              "1bab8104-5127-415e-8550-75f76d355629"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "affected_label_ids": {
            "description": "List of label ids which assets will be validated against the template",
            "example": [
              "72ff2eb1-9dc4-459c-9cc7-4e789681b8b9",
              "45ab1b93-134c-42e7-9afc-319a6252dc17",
              "2b420ff1-50b5-46b1-a0de-24c077bf089f"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "comments": {
            "example": "Modified to support config files",
            "type": "string"
          },
          "enabled": {
            "example": true,
            "type": "boolean"
          },
          "files": {
            "items": {
              "properties": {
                "hashes": {
                  "items": {
                    "example": "3828a69ad73f636c290cbab20a2cb1920bb8fa04a17a18655f9165859086ea61",
                    "type": "string"
                  },
                  "type": "array"
                },
                "path": {
                  "example": "C:\\Program Files\\MSSQL\\mssql_conf.ini",
                  "type": "string"
                }
              }
            },
            "type": "array"
          },
          "hash_type": {
            "enum": [
              "SHA256"
            ],
            "example": "SHA256",
            "type": "string"
          },
          "title": {
            "description": "Template's title",
            "example": "MSSQL Installation",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IntegrityMonitorTemplateResponse": {
        "properties": {
          "_id": {
            "example": "b40db74f-5f2d-4cda-9c9b-c2cdd8158b1f",
            "format": "uuid",
            "type": "string"
          },
          "affected_assets": {
            "items": {
              "properties": {
                "vm": {
                  "$ref": "#/components/schemas/VMIntegrityMonitorTemplate"
                },
                "vm_id": {
                  "example": "b40db74f-5f2d-4cda-9c9b-c2cdd8158b1f",
                  "format": "uuid",
                  "type": "string"
                }
              }
            },
            "type": "array"
          },
          "affected_labels": {
            "items": {
              "properties": {
                "id": {
                  "example": "a00db74f-5f2d-4cda-9c9b-c2cdd8158b11",
                  "format": "uuid",
                  "type": "string"
                },
                "name": {
                  "example": "App: MsSQL",
                  "type": "string"
                }
              }
            },
            "type": "array"
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "comments": {
            "example": "Modified to support config files",
            "type": "string"
          },
          "creation_time": {
            "example": 1511271046249,
            "format": "timestamp",
            "type": "integer"
          },
          "doc_version": {
            "example": 56,
            "format": "int32",
            "type": "integer"
          },
          "enabled": {
            "example": true,
            "type": "boolean"
          },
          "files": {
            "items": {
              "properties": {
                "hashes": {
                  "items": {
                    "example": "3828a69ad73f636c290cbab20a2cb1920bb8fa04a17a18655f9165859086ea61",
                    "type": "string"
                  },
                  "type": "array"
                },
                "path": {
                  "example": "C:\\Program Files\\MSSQL\\mssql_conf.ini",
                  "type": "string"
                }
              }
            },
            "type": "array"
          },
          "hash_type": {
            "enum": [
              "SHA256"
            ],
            "example": "SHA256",
            "type": "string"
          },
          "id": {
            "example": "b40db74f-5f2d-4cda-9c9b-c2cdd8158b1f",
            "format": "uuid",
            "type": "string"
          },
          "last_change_time": {
            "example": 1511274734228,
            "format": "timestamp",
            "type": "integer"
          },
          "state": {
            "enum": [
              "UNCHANGED",
              "CREATED",
              "MODIFIED",
              "DELETED"
            ],
            "example": "UNCHANGED",
            "type": "string"
          },
          "title": {
            "example": "MSSQL Installation",
            "type": "string"
          }
        },
        "type": "object"
      },
      "KubernetesCluster": {
        "properties": {
          "daemonset_count": {
            "example": 100500,
            "type": "integer"
          },
          "first_seen": {
            "example": 1633624518294,
            "format": "timestamp",
            "type": "integer"
          },
          "id": {
            "example": "2a74aa15-8a8c-456a-be87-f88ef1bb4bde",
            "format": "uuid",
            "type": "string"
          },
          "modules_status": {
            "properties": {
              "enforcement": {
                "$ref": "#/components/schemas/KubernetesClusterModuleStatus"
              },
              "orchestration": {
                "$ref": "#/components/schemas/KubernetesClusterModuleStatus"
              },
              "reveal": {
                "$ref": "#/components/schemas/KubernetesClusterModuleStatus"
              }
            },
            "type": "object"
          },
          "name": {
            "example": "AKS-1",
            "type": "string"
          },
          "node_count": {
            "example": 100500,
            "type": "integer"
          },
          "status_flags": {
            "items": {
              "$ref": "#/components/schemas/KubernetesClusterStatusFlag"
            },
            "type": "array"
          },
          "type": {
            "example": "AKS",
            "type": "string"
          },
          "version": {
            "example": "v1.20.9",
            "type": "string"
          }
        },
        "type": "object"
      },
      "KubernetesClusterModuleStatus": {
        "properties": {
          "enabled": {
            "example": true,
            "type": "boolean"
          },
          "pending": {
            "enum": [
              "TURN_ON",
              "TURN_OFF"
            ],
            "examlpe": "TURN_ON",
            "type": "string"
          },
          "version": {
            "example": "v4.4.4.4",
            "type": "string"
          },
          "warning_level": {
            "enum": [
              "WARNING",
              "ERROR"
            ],
            "example": "WARNING",
            "type": "string"
          }
        },
        "type": "object"
      },
      "KubernetesClusterStatusFlag": {
        "properties": {
          "description": {
            "example": "Orchestration status is: Initializing",
            "type": "string"
          },
          "details": {
            "type": "object"
          },
          "flag_type": {
            "enum": [
              "orchestration error",
              "outdated configuration"
            ],
            "example": "orchestration error",
            "type": "string"
          },
          "raised_time": {
            "example": 1633624518294,
            "format": "timestamp",
            "type": "integer"
          },
          "severity": {
            "enum": [
              "WARNING",
              "ERROR"
            ],
            "example": "WARNING",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Label": {
        "properties": {
          "_id": {
            "example": "f76a7bcc-0677-42f2-8ef4-707da6796bbb",
            "format": "uuid",
            "type": "string"
          },
          "added_assets": {
            "items": {
              "properties": {
                "_id": {
                  "example": "9219fab0-e505-4987-903f-581260ddb9dc",
                  "format": "uuid",
                  "type": "string"
                },
                "name": {
                  "example": "vm-number-12",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "added_assets_counter": {
            "example": 2,
            "type": "integer"
          },
          "doc_version": {
            "example": 59,
            "format": "int32",
            "type": "integer"
          },
          "dynamic_criteria": {
            "items": {
              "$ref": "#/components/schemas/Criteria"
            },
            "type": "array"
          },
          "dynamic_criteria_counter": {
            "example": 3,
            "type": "integer"
          },
          "equal_criteria": {
            "items": {
              "$ref": "#/components/schemas/Criteria"
            },
            "type": "array"
          },
          "id": {
            "example": "f76a7bcc-0677-42f2-8ef4-707da6796bbb",
            "format": "uuid",
            "type": "string"
          },
          "implicit_criteria": {
            "items": {
              "$ref": "#/components/schemas/Criteria"
            },
            "type": "array"
          },
          "key": {
            "example": "App",
            "type": "string"
          },
          "matched_assets_counter": {
            "example": 3,
            "type": "integer"
          },
          "matching_assets": {
            "items": {
              "properties": {
                "_id": {
                  "example": "9219fab0-e505-4987-903f-581260ddb9dc",
                  "format": "uuid",
                  "type": "string"
                },
                "name": {
                  "example": "vm-number-12",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "rules_with_label": {
            "example": 1,
            "type": "integer"
          },
          "value": {
            "example": "MsSQL",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LabelGroup": {
        "properties": {
          "author_id": {
            "example": "5f39f26ea7859a9031961e87",
            "type": "string"
          },
          "creation_time": {
            "example": 1602492370411,
            "type": "integer"
          },
          "exclude_labels": {
            "items": {
              "items": {
                "example": "a106a1ba-15d1-4d10-8299-5c10f34975cb",
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "type": "array"
          },
          "id": {
            "example": "f76a7bcc-0677-42f2-8ef4-707da6796bbb",
            "format": "uuid",
            "type": "string"
          },
          "include_labels": {
            "items": {
              "items": {
                "example": "a106a1ba-15d1-4d10-8299-5c10f34975cb",
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "type": "array"
          },
          "key": {
            "example": "App",
            "type": "string"
          },
          "last_change_time": {
            "example": 1602492370411,
            "type": "integer"
          },
          "matched_assets_counter": {
            "example": 2,
            "type": "integer"
          },
          "matching_assets": {
            "items": {
              "properties": {
                "_id": {
                  "example": "2f60bc54-8386-42d5-b483-d40a946bb2da",
                  "type": "string"
                },
                "name": {
                  "example": "ubuntu-server-16.04-1",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "state": {
            "enum": [
              "UNCHANGED",
              "CREATED",
              "MODIFIED",
              "DELETED"
            ],
            "example": "CREATED"
          },
          "value": {
            "example": "MsSQL",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LabelGroupInput": {
        "properties": {
          "exclude_labels": {
            "$ref": "#/components/schemas/OrLabels"
          },
          "include_labels": {
            "$ref": "#/components/schemas/OrLabels"
          },
          "key": {
            "description": "Label group key",
            "example": "App",
            "type": "string"
          },
          "value": {
            "description": "Label group value",
            "example": "MsSQL",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "LabelGroupMinimal": {
        "properties": {
          "id": {
            "example": "1219d8a5-6902-4c48-a2d4-82f1806605cc",
            "format": "uuid",
            "type": "string"
          },
          "key": {
            "example": "App",
            "type": "string"
          },
          "name": {
            "example": "App: SqlServer",
            "type": "string"
          },
          "value": {
            "example": "SqlServer",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LabelList": {
        "properties": {
          "_id": {
            "example": "f76a7bcc-0677-42f2-8ef4-707da6796bbb",
            "format": "uuid",
            "type": "string"
          },
          "added_assets": {
            "items": {
              "$ref": "#/components/schemas/AssetLabel"
            },
            "type": "array"
          },
          "added_assets_counter": {
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "dynamic_criteria": {
            "items": {
              "$ref": "#/components/schemas/CriteriaList"
            },
            "type": "array"
          },
          "dynamic_criteria_counter": {
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "equal_criteria": {
            "items": {
              "$ref": "#/components/schemas/CriteriaList"
            },
            "type": "array"
          },
          "id": {
            "example": "f76a7bcc-0677-42f2-8ef4-707da6796bbb",
            "format": "uuid",
            "type": "string"
          },
          "implicit_criteria": {
            "items": {
              "$ref": "#/components/schemas/CriteriaList"
            },
            "type": "array"
          },
          "key": {
            "example": "App",
            "type": "string"
          },
          "matched_assets": {
            "items": {
              "$ref": "#/components/schemas/AssetLabel"
            },
            "type": "array"
          },
          "matched_assets_counter": {
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "rules_with_label": {
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "value": {
            "example": "MsSQL",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LabelMinimal": {
        "properties": {
          "id": {
            "example": "1219d8a5-6902-4c48-a2d4-82f1806605cc",
            "format": "uuid",
            "type": "string"
          },
          "key": {
            "example": "App",
            "type": "string"
          },
          "name": {
            "example": "App: SqlServer",
            "type": "string"
          },
          "value": {
            "example": "SqlServer",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Nic": {
        "properties": {
          "discovered_ip_addresses": {
            "items": {
              "example": "192.168.0.1",
              "type": "string"
            },
            "type": "array"
          },
          "ip_addresses": {
            "items": {
              "example": "192.168.0.1",
              "type": "string"
            },
            "type": "array"
          },
          "mac_address": {
            "example": "00:50:56:bb:2d:ab",
            "type": "string"
          },
          "network_id": {
            "example": "fe3ef6a8-858f-407d-bd6e-30fb9cc30522",
            "format": "uuid",
            "type": "string"
          },
          "network_name": {
            "example": "CommandsNet",
            "type": "string"
          },
          "network_orchestration_id": {
            "example": "dvportgroup-105",
            "type": "string"
          },
          "orchestration_details": {
            "items": {
              "$ref": "#/components/schemas/OrchestrationDetail"
            },
            "type": "array"
          },
          "switch_id": {
            "example": "dvs-102",
            "type": "string"
          },
          "vif_id": {
            "example": "0",
            "type": "string"
          },
          "vlan_id": {
            "example": 1001,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OSDetails": {
        "properties": {
          "num_of_processors": {
            "example": 4,
            "format": "int32",
            "type": "integer"
          },
          "os_display_name": {
            "example": "CentOS Linux 7 (Core)",
            "type": "string"
          },
          "os_guest_name": {
            "example": "winServer2",
            "type": "string"
          },
          "os_kernel_major": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          },
          "os_kernel_minor": {
            "example": 13,
            "format": "int32",
            "type": "integer"
          },
          "os_type": {
            "enum": [
              "0 (Unknown)",
              "1 (Windows)",
              "2 (Linux)"
            ],
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "os_version_name": {
            "example": "Windows Server 2008 R2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrLabels": {
        "properties": {
          "or_labels": {
            "items": {
              "$ref": "#/components/schemas/AndLabels"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "OrchestrationDetail": {
        "properties": {
          "orchestration_id": {
            "example": "7f43c9a2-e8b9-4ce7-a2d1-908bd5182d51",
            "type": "string"
          },
          "orchestration_obj_id": {
            "example": "vm-280588",
            "type": "string"
          },
          "orchestration_type": {
            "example": "vSphere",
            "type": "string"
          },
          "revision_id": {
            "example": 190709142948,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OrchestrationGroups": {
        "properties": {
          "groups": {
            "items": {
              "example": "S-ID-5-21-428309472094724092",
              "type": "string"
            },
            "type": "array"
          },
          "orchestration_id": {
            "example": "f76a7bcc-0677-42f2-8ef4-707da6796bbb",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaginatedInstallationProfile": {
        "properties": {
          "_id": {
            "description": "Unique profile identifier",
            "example": "b40db74f-5f2d-4cda-9c9b-c2cdd8158b1f",
            "format": "uuid",
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "author_id": {
            "description": "Profile author unique identifier",
            "example": "5bbde4d6fb0eb10007025b48",
            "type": "string"
          },
          "creation_time": {
            "description": "Profile creation timestamp",
            "example": 1511271046249,
            "format": "timestamp",
            "type": "integer"
          },
          "current_usage_count": {
            "description": "Number of agents installed with this profile",
            "type": "integer"
          },
          "description": {
            "$ref": "#/components/schemas/AgentInstallationProfileDescription"
          },
          "last_updated_time": {
            "description": "Profile last updated timestamp",
            "example": 1511301040001,
            "format": "timestamp",
            "type": "integer"
          },
          "name": {
            "$ref": "#/components/schemas/AgentInstallationProfileName"
          }
        },
        "required": [
          "_id",
          "name",
          "creation_time",
          "last_updated_time",
          "description",
          "author_id"
        ],
        "type": "object"
      },
      "PaginatedResponse": {
        "properties": {
          "current_page": {
            "example": 1,
            "type": "integer"
          },
          "db_query_time": {
            "example": "0.012 seconds",
            "type": "string"
          },
          "dict_mapping_time": {
            "example": "0.02 seconds",
            "type": "string"
          },
          "filters": {
            "type": "object"
          },
          "from": {
            "example": 0,
            "type": "integer"
          },
          "is_count_exact": {
            "example": true,
            "type": "boolean"
          },
          "objects_mapping_time": {
            "example": "0.002 seconds",
            "type": "string"
          },
          "results_in_page": {
            "example": 20,
            "type": "integer"
          },
          "sort": {
            "items": {
              "example": "name",
              "type": "string"
            },
            "type": "array"
          },
          "to": {
            "example": 20,
            "type": "integer"
          },
          "total_count": {
            "example": 53,
            "type": "integer"
          }
        }
      },
      "ProjectRuleRequest": {
        "properties": {
          "comments": {
            "example": "Nessus clients to server",
            "type": "string"
          },
          "destination": {
            "$ref": "#/components/schemas/ProjectRuleSide"
          },
          "ip_protocols": {
            "items": {
              "enum": [
                "TCP",
                "UDP"
              ],
              "example": "TCP",
              "type": "string"
            },
            "type": "array"
          },
          "port_ranges": {
            "items": {
              "properties": {
                "end": {
                  "example": 24,
                  "type": "number"
                },
                "start": {
                  "example": 18,
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "ports": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "restricted_rule": "boolean",
          "section": {
            "enum": [
              "ALLOW",
              "ALERT",
              "BLOCK",
              "OVERRIDE_ALLOW",
              "OVERRIDE_ALERT",
              "OVERRIDE_BLOCK"
            ],
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/ProjectRuleSide"
          }
        },
        "type": "object"
      },
      "ProjectRuleResponse": {
        "properties": {
          "comments": {
            "example": "Nessus clients to server",
            "type": "string"
          },
          "destination": {
            "$ref": "#/components/schemas/ProjectRuleSide"
          },
          "ip_protocols": {
            "items": {
              "enum": [
                "TCP",
                "UDP"
              ],
              "example": "TCP",
              "type": "string"
            },
            "type": "array"
          },
          "port_ranges": {
            "items": {
              "properties": {
                "end": {
                  "example": 24,
                  "type": "number"
                },
                "start": {
                  "example": 18,
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "ports": {
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "restricted_rule": "boolean",
          "section_id": {
            "example": "76091573-f4d3-485f-8277-63395adc47cc",
            "format": "uuid",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/ProjectRuleSide"
          }
        },
        "type": "object"
      },
      "ProjectRuleSide": {
        "properties": {
          "address_type": {
            "enum": [
              "Private",
              "Internet"
            ],
            "example": "Private",
            "type": "string"
          },
          "domains": {
            "items": {
              "example": "google.com",
              "type": "string"
            },
            "type": "array"
          },
          "labels": {
            "items": {
              "example": "{{label_variable_id}}",
              "type": "string"
            },
            "type": "array"
          },
          "processes": {
            "items": {
              "example": "SimpleHTTPServer",
              "type": "string"
            },
            "type": "array"
          },
          "subnets": {
            "example": "10.0.0.2/32",
            "type": "string"
          },
          "user_groups": {
            "example": "{{user_group_variable_id}}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectTemplateRequest": {
        "properties": {
          "api_version": {
            "example": "1.0",
            "type": "string"
          },
          "author": {
            "example": "yuval pruss",
            "type": "string"
          },
          "default_map": {
            "properties": {
              "filters": {
                "properties": {
                  "exclude": {
                    "description": "Filters to exclude in the map",
                    "type": "object"
                  },
                  "include": {
                    "description": "Filters to include in the map",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "grouping": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "open_selected_hierarchy": {
                "example": true,
                "type": "boolean"
              },
              "time_frame": {
                "enum": [
                  "TODAY",
                  "YESTERDAY",
                  "LAST_7_DAYS",
                  "LAST_14_DAYS",
                  "LAST_30_DAYS",
                  "THIS_MONTH",
                  "PREVIOUS_MONTH"
                ],
                "type": "string"
              },
              "use_scheduled_map": {
                "example": true,
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "hashtags": {
            "properties": {
              "hidden": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "visible": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "icon_url": {
            "example": "https://vulners.com/static/img/nessus.png",
            "format": "url",
            "type": "string"
          },
          "order_of_labels_hierarchy": {
            "example": [
              "Environment",
              "Application",
              "Role",
              "Zone"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "project_creation_format": {
            "example": "Create {{project_name}} to protect and reduce risk for {{nessus_servers}}",
            "type": "string"
          },
          "project_creation_format_secondary": {
            "description": "An alternative project creation format. Used when we want to add text that influences the regular creation format",
            "example": "Create {{project_name}} to protect and reduce risk within {{environment}} for {{nessus_servers}}",
            "type": "string"
          },
          "project_name": {
            "example": "Nessus Segmentation Policies",
            "type": "string"
          },
          "project_suggestion_format": {
            "example": "Create {{project_name}} on {{nessus_servers}}",
            "type": "string"
          },
          "project_title_format": {
            "example": "Create {{project_name}}",
            "type": "string"
          },
          "project_version": {
            "example": "1.0",
            "type": "string"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/ProjectRuleRequest"
            },
            "type": "array"
          },
          "support_labels_hierarchies": {
            "example": false,
            "type": "boolean"
          },
          "template_configuration": {
            "properties": {
              "add_all_map_flows_as_allow_rules": {
                "example": true,
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "user_configuration_defaults": {
            "properties": {
              "add_rules_for_individual_items": {
                "example": true,
                "type": "boolean"
              },
              "ignore_all_existing_allowed_flows": {
                "example": true,
                "type": "boolean"
              },
              "include_process_level": {
                "example": true,
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "variables": {
            "items": {
              "$ref": "#/components/schemas/Variable"
            },
            "type": "array"
          }
        },
        "required": [
          "api_version",
          "author",
          "project_name",
          "project_version",
          "rules",
          "default_map",
          "variables"
        ]
      },
      "ProjectTemplateResponse": {
        "properties": {
          "api_version": {
            "example": "1.0",
            "type": "string"
          },
          "author": {
            "example": "yuval pruss",
            "type": "string"
          },
          "auto_filled_variable_values": {
            "additionalProperties": {
              "type": "string"
            },
            "decription": "A mapping between the variable ids and their values",
            "type": "object"
          },
          "default_map": {
            "properties": {
              "filters": {
                "properties": {
                  "exclude": {
                    "description": "Filters to exclude in the map",
                    "type": "object"
                  },
                  "include": {
                    "description": "Filters to include in the map",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "grouping": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "open_selected_hierarchy": {
                "example": true,
                "type": "boolean"
              },
              "time_frame": {
                "enum": [
                  "TODAY",
                  "YESTERDAY",
                  "LAST_7_DAYS",
                  "LAST_14_DAYS",
                  "LAST_30_DAYS",
                  "THIS_MONTH",
                  "PREVIOUS_MONTH"
                ],
                "type": "string"
              },
              "use_scheduled_map": {
                "example": true,
                "type": "boolean"
              }
            },
            "required": [
              "use_scheduled_map"
            ],
            "type": "object"
          },
          "doc_version": {
            "example": 59,
            "format": "int32",
            "type": "integer"
          },
          "does_contains_diy_hashtag": {
            "example": true,
            "type": "boolean"
          },
          "does_contains_template_hashtag": {
            "example": true,
            "type": "boolean"
          },
          "hashtags": {
            "properties": {
              "hidden": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "visible": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "icon_url": {
            "example": "https://vulners.com/static/img/nessus.png",
            "format": "url",
            "type": "string"
          },
          "id": {
            "example": "3edd42a8-8410-40c1-81e2-28eda26462cc",
            "format": "uuid",
            "type": "string"
          },
          "label_suggestions": {
            "description": "Mapping between variable id and their label suggestion object",
            "type": "object"
          },
          "order_of_labels_hierarchy": {
            "example": [
              "Environment",
              "Application",
              "Role",
              "Zone"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "project_creation_format": {
            "example": "Create {{project_name}} to protect and reduce risk for {{nessus_servers}}",
            "type": "string"
          },
          "project_creation_format_secondary": {
            "description": "An alternative project creation format. Used when we want to add text that influences the regular creation format",
            "example": "Create {{project_name}} to protect and reduce risk within {{environment}} for {{nessus_servers}}",
            "type": "string"
          },
          "project_name": {
            "example": "Nessus Segmentation Policies",
            "type": "string"
          },
          "project_suggestion_format": {
            "example": "Create {{project_name}} on {{nessus_servers}}",
            "type": "string"
          },
          "project_title_format": {
            "example": "Create {{project_name}}",
            "type": "string"
          },
          "project_version": {
            "example": "1.0",
            "type": "string"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/ProjectRuleResponse"
            },
            "type": "array"
          },
          "support_labels_hierarchies": {
            "example": false,
            "type": "boolean"
          },
          "template_configuration": {
            "properties": {
              "add_all_map_flows_as_allow_rules": {
                "example": true,
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "user_configuration_defaults": {
            "properties": {
              "add_rules_for_individual_items": {
                "example": true,
                "type": "boolean"
              },
              "ignore_all_existing_allowed_flows": {
                "example": true,
                "type": "boolean"
              },
              "include_process_level": {
                "example": true,
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "variables": {
            "items": {
              "$ref": "#/components/schemas/Variable"
            },
            "type": "array"
          }
        }
      },
      "PublishRevisionInput": {
        "properties": {
          "comments": {
            "description": "Revision comments",
            "example": "Added microsegmentation for cluster A",
            "type": "string"
          },
          "reset_hit_count": {
            "description": "Reset the hit count of the rules in the revision after publish",
            "example": false,
            "type": "boolean"
          },
          "ruleset": {
            "description": "Specific ruleset to publish",
            "example": "Application Tier-Segmentation - App: Billing",
            "type": "string"
          }
        },
        "required": [
          "comments"
        ]
      },
      "Recommendation": {
        "properties": {
          "handle_template": {
            "enum": [
              "Snapshot VM",
              "Suspend VM",
              "Stop VM",
              "Disconnect Network Cards",
              "Block VM",
              "Quarantine File",
              "Execute Script",
              "Report IP to Firewall"
            ],
            "example": "Quarantine File",
            "type": "string"
          },
          "id": {
            "example": "2206a1ba-15d1-4d10-8299-5c10f34975cb",
            "format": "uuid",
            "type": "string"
          },
          "parts": {
            "items": {
              "properties": {
                "type": {
                  "enum": [
                    "text",
                    "expression",
                    "mute",
                    "bold"
                  ],
                  "example": "text",
                  "type": "string"
                },
                "value": {
                  "example": "Quarantine malicious file ",
                  "type": "string"
                }
              }
            },
            "type": "array"
          },
          "rule_id": {
            "example": "a106a1ba-15d1-4d10-8299-5c10f34975cb",
            "format": "uuid",
            "type": "string"
          },
          "rule_type": {
            "enum": [
              "FILES",
              "NETWORK",
              ""
            ],
            "example": "",
            "type": "string"
          },
          "type": {
            "enum": [
              "VMRecommendation",
              "NetworkVMRecommendation",
              "FileQuarantineRecommendation",
              "RansomwareVMRecommendation",
              "RansomwareNonVMRecommendation",
              "PanIpRecommendation"
            ],
            "example": "FileQuarantineRecommendation",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RevertRevisionInput": {
        "properties": {
          "reset_hit_count": {
            "description": "Reset the hit count of the rules in the revision after revert",
            "example": false,
            "type": "boolean"
          },
          "revision_number": {
            "description": "Revision number to revert to",
            "example": 7,
            "type": "number"
          }
        },
        "required": [
          "revision_number"
        ]
      },
      "Revision": {
        "properties": {
          "author": {
            "properties": {
              "description": {
                "example": "",
                "type": "string"
              },
              "id": {
                "example": "63xxxb9f325c48b2",
                "type": "string"
              },
              "username": {
                "example": "centra-user",
                "type": "string"
              }
            },
            "type": "object"
          },
          "author_id": {
            "example": "f76a7bcc-0677-42f2-8ef4-707da6796bbb",
            "format": "uuid",
            "type": "string"
          },
          "comments": {
            "example": "Modified rulesets: To public key infrastructure, To HealthService",
            "type": "string"
          },
          "creation_time": {
            "example": 1511271046249,
            "format": "timestamp",
            "type": "integer"
          },
          "revision_number": {
            "example": 144,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RevisionResponse": {
        "properties": {
          "revision": {
            "example": 5,
            "type": "number"
          }
        },
        "type": "object"
      },
      "Rule": {
        "properties": {
          "_id": {
            "example": "76091573-f4d3-485f-8277-63395adc47cc",
            "type": "string"
          },
          "action": {
            "enum": [
              "ALLOW",
              "ALERT",
              "BLOCK",
              "BLOCK_AND_ALERT",
              "ALLOW_AND_ENCRYPT"
            ],
            "example": "ALLOW",
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "author_id": {
            "example": "5a133e1620d9ac267786d9cc",
            "type": "string"
          },
          "comments": {
            "example": "SQL servers rule",
            "type": "string"
          },
          "creation_time": {
            "example": 1511271046249,
            "format": "timestamp",
            "type": "integer"
          },
          "destination": {
            "$ref": "#/components/schemas/RuleSide"
          },
          "doc_version": {
            "example": 56,
            "format": "int32",
            "type": "integer"
          },
          "enabled": {
            "example": true,
            "type": "boolean"
          },
          "exclude_port_ranges": {
            "items": {
              "properties": {
                "end": {
                  "example": 82,
                  "format": "int32",
                  "type": "integer"
                },
                "start": {
                  "example": 80,
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "exclude_ports": {
            "items": {
              "example": 22,
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "hit_count": {
            "example": 14,
            "type": "integer"
          },
          "hit_count_reset_time": {
            "example": 1511274734228,
            "format": "timestamp",
            "type": "integer"
          },
          "id": {
            "example": "74ca0f6f-6257-4eed-a115-36fbfb9904cc",
            "format": "uuid",
            "type": "string"
          },
          "ip_protocols": {
            "items": {
              "enum": [
                "TCP",
                "UDP"
              ],
              "example": "TCP",
              "type": "string"
            },
            "type": "array"
          },
          "last_change_time": {
            "example": 1511274734228,
            "format": "timestamp",
            "type": "integer"
          },
          "last_hit": {
            "example": 1511274734228,
            "format": "timestamp",
            "type": "integer"
          },
          "ordering": {
            "example": "1024.0",
            "type": "string"
          },
          "port_ranges": {
            "items": {
              "properties": {
                "end": {
                  "example": 82,
                  "format": "int32",
                  "type": "integer"
                },
                "start": {
                  "example": 80,
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "ports": {
            "items": {
              "example": 22,
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "recently_hit": {
            "example": true,
            "type": "boolean"
          },
          "ruleset_id": {
            "example": "5b8c6574-723a-454e-8b2a-4256c153a7cc",
            "format": "uuid",
            "type": "string"
          },
          "ruleset_name": {
            "example": "SQL",
            "type": "string"
          },
          "section_position": {
            "enum": [
              "ALLOW",
              "ALERT",
              "BLOCK",
              "OVERRIDE_ALLOW",
              "OVERRIDE_ALERT",
              "OVERRIDE_BLOCK"
            ],
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/RuleSide"
          },
          "state": {
            "enum": [
              "UNCHANGED",
              "CREATED",
              "MODIFIED",
              "DELETED"
            ],
            "example": "UNCHANGED",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RuleSide": {
        "properties": {
          "address_classification": {
            "enum": [
              "Private",
              "Internet"
            ],
            "example": "Private",
            "type": "string"
          },
          "asset_ids": {
            "items": {
              "example": "461bf3a5-22b0-4693-8e8e-fc89807f39cc",
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "assets": {
            "items": {
              "$ref": "#/components/schemas/AssetMinimal"
            },
            "type": "array"
          },
          "labels": {
            "$ref": "#/components/schemas/OrLabels"
          },
          "processes": {
            "items": {
              "example": "SimpleHTTPServer",
              "type": "string"
            },
            "type": "array"
          },
          "subnet": {
            "example": "10.0.0.2/32",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RulesBulkLabelResponse": {
        "properties": {
          "count_associated": {
            "description": "number of rules to which labels have been added during the operation",
            "example": 20,
            "type": "integer"
          },
          "count_disassociated": {
            "description": "number of rules from which labels have been removed during the operation",
            "example": 30,
            "type": "integer"
          },
          "label": {
            "description": "For a Replace operation, will hold the data of the actual label entry that was used",
            "properties": {
              "id": {
                "example": "735de135-c5c1-4583-a0e2-4bf485caed2c",
                "type": "string"
              },
              "key": {
                "example": "example-key",
                "type": "string"
              },
              "name": {
                "example": "example-key: example-value",
                "type": "string"
              },
              "value": {
                "example": "example-value",
                "type": "string"
              }
            },
            "type": "Label"
          }
        }
      },
      "RulesBulkProcessesResponse": {
        "properties": {
          "modified_count": {
            "description": "number of rules that were modified during the operation",
            "example": 30,
            "type": "integer"
          }
        }
      },
      "RulesBulkRulesetResponse": {
        "properties": {
          "inserted_count": {
            "description": "number of rules that were cloned during the operation",
            "example": 20,
            "type": "integer"
          },
          "modified_count": {
            "description": "number of rules that were modified during the operation",
            "example": 30,
            "type": "integer"
          },
          "ruleset": {
            "description": "Holds the name of the ruleset (limited in length) that was used",
            "example": "example-ruleset",
            "type": "string"
          }
        }
      },
      "RulesBulkWorksiteResponse": {
        "properties": {
          "inserted_count": {
            "description": "number of rules that were cloned during the operation",
            "example": 20,
            "type": "integer"
          },
          "modified_count": {
            "description": "number of rules that were modified during the operation",
            "example": 30,
            "type": "integer"
          },
          "worksite": {
            "description": "Holds the details of the worksite that was used",
            "properties": {
              "id": {
                "example": "735de135-c5c1-4583-a0e2-4bf485caed2c",
                "type": "string"
              },
              "name": {
                "example": "example-worksite",
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "SavedMap": {
        "properties": {
          "saved_map": {
            "$ref": "#/components/schemas/SavedMapList"
          }
        },
        "type": "object"
      },
      "SavedMapList": {
        "properties": {
          "_id": {
            "example": "f76a7bcc-0677-42f2-8ef4-707da6796bbb",
            "format": "uuid",
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "creation_time": {
            "example": 1511271046249,
            "format": "timestamp",
            "type": "integer"
          },
          "email_on_progress": {
            "example": true,
            "type": "boolean"
          },
          "end_time_filter": {
            "example": 1511301040001,
            "format": "timestamp",
            "type": "integer"
          },
          "error": {
            "example": "No flows found for this map",
            "type": "string"
          },
          "filters": {
            "properties": {
              "exclude": {
                "example": {
                  "ports": [
                    "22"
                  ]
                },
                "type": "object"
              },
              "include": {
                "example": {
                  "host": [
                    "esxi001.acme.org"
                  ]
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "id": {
            "example": "f76a7bcc-0677-42f2-8ef4-707da6796bbb",
            "format": "uuid",
            "type": "string"
          },
          "include_processes": {
            "example": true,
            "type": "boolean"
          },
          "included_label_ids": {
            "items": {
              "example": "616a7bcc-0677-42f2-8ef4-707da6796bbb",
              "type": "string"
            },
            "type": "array"
          },
          "is_storage_finalize": {
            "example": false,
            "type": "boolean"
          },
          "map_scope": {
            "properties": {
              "scope_label_ids": {
                "items": {
                  "example": "All",
                  "type": "string"
                },
                "type": "array"
              },
              "scope_labels": {
                "$ref": "#/components/schemas/OrLabels"
              },
              "scope_permissions": {
                "example": "NONE",
                "type": "string"
              }
            }
          },
          "map_size": {
            "enum": [
              "UNKNOWN",
              "SMALL",
              "MEDIUM",
              "LARGE"
            ],
            "example": "LARGE",
            "type": "string"
          },
          "map_type": {
            "enum": [
              "PUBLIC",
              "PRIVATE",
              "INCIDENT",
              "SCHEDULED"
            ],
            "example": "PUBLIC",
            "type": "string"
          },
          "name": {
            "example": "MySQL servers between 23/04/2018 and 30/04/2018",
            "type": "string"
          },
          "scheduled_map_settings": {
            "properties": {
              "end_time": {
                "example": 1566741600000,
                "format": "timestamp",
                "type": "integer"
              },
              "interval": {
                "example": "hourly",
                "type": "string"
              },
              "offset_from_interval": {
                "example": 0,
                "type": "integer"
              },
              "start_time": {
                "example": 1566738000000,
                "format": "timestamp",
                "type": "integer"
              }
            }
          },
          "schema_version": {
            "enum": [
              "NONE",
              "PROCESS_FULL_PATH"
            ],
            "example": "PROCESS_FULL_PATH",
            "type": "string"
          },
          "start_time_filter": {
            "example": 1511101040001,
            "format": "timestamp",
            "type": "integer"
          },
          "state": {
            "enum": [
              "READY",
              "IN_PROGRESS",
              "QUEUED",
              "CANCELED",
              "FAILED",
              "EMPTY",
              "PRECOMPUTING",
              "FINALIZING",
              "MIGRATING"
            ],
            "example": "EMPTY",
            "type": "string"
          },
          "storage_size_bytes": {
            "example": 324,
            "type": "intager"
          },
          "time_estimate": {
            "example": 300,
            "type": "integer"
          },
          "time_resolution": {
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "StaleHashesResponse": {
        "properties": {
          "_id": {
            "example": "a00db74f-5f2d-4cda-9c9b-c2cdd8158b11",
            "format": "uuid",
            "type": "string"
          },
          "hash": {
            "example": "d30870aa14a5c07698a9d82e05c9838ee133c5d9a4f15481c19434d45a942893",
            "type": "string"
          },
          "id": {
            "example": "a00db74f-5f2d-4cda-9c9b-c2cdd8158b11",
            "format": "uuid",
            "type": "string"
          },
          "path": {
            "example": "/var/a.txt",
            "type": "string"
          },
          "title": {
            "example": "MSSQL Installation",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SuccessfulProfileDeletionResult": {
        "properties": {
          "profile_deleted": {
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "profile_deleted"
        ],
        "type": "object"
      },
      "UserGroupsList": {
        "properties": {
          "_id": {
            "example": "f76a7bcc-0677-42f2-8ef4-707da6796bbb",
            "format": "uuid",
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "creation_time": {
            "example": 1534409108740,
            "format": "timestamp",
            "type": "integer"
          },
          "doc_version": {
            "example": 59,
            "format": "int32",
            "type": "integer"
          },
          "groups_by_domain_name": {
            "items": {
              "$ref": "#/components/schemas/GroupsByDomainName"
            },
            "type": "array"
          },
          "id": {
            "example": "f76a7bcc-0677-42f2-8ef4-707da6796bbb",
            "format": "uuid",
            "type": "string"
          },
          "last_change_time": {
            "example": 1534409108990,
            "format": "timestamp",
            "type": "integer"
          },
          "state": {
            "enum": [
              "UNCHANGED",
              "CREATED",
              "MODIFIED",
              "DELETED"
            ],
            "example": "UNCHANGED",
            "type": "string"
          },
          "title": {
            "example": "Guardicorians",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VM": {
        "properties": {
          "full_name": {
            "example": "192.168.0.102/Attacker2",
            "type": "string"
          },
          "id": {
            "example": "b40db74f-5f2d-4cda-9c9b-c2cdd8158b1f",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "example": "Attacker2",
            "type": "string"
          },
          "nics": {
            "items": {
              "$ref": "#/components/schemas/Nic"
            },
            "type": "array"
          },
          "orchestration_details": {
            "items": {
              "$ref": "#/components/schemas/OrchestrationDetail"
            },
            "type": "array"
          },
          "recent_domains": {
            "items": {
              "example": "mydomain.com",
              "type": "string"
            },
            "type": "array"
          },
          "tenant_name": {
            "example": "192.168.0.102",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VMIntegrityMonitorTemplate": {
        "properties": {
          "guest_agent_details": {
            "$ref": "#/components/schemas/GuestAgentDetails"
          },
          "name": {
            "example": "winServer2",
            "type": "string"
          },
          "nics": {
            "items": {
              "$ref": "#/components/schemas/Nic"
            },
            "type": "array"
          },
          "tenant_name": {
            "example": "192.168.0.102",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Variable": {
        "properties": {
          "configuration_id": {
            "type": "string"
          },
          "creation_format": {
            "example": "Create {{project_name}} to protect and reduce risk for {{variable_id}}",
            "type": "string"
          },
          "description": {
            "example": "Server machines running the nessusd process",
            "type": "string"
          },
          "id": {
            "example": "nessus_servers",
            "type": "string"
          },
          "is_mandatory_hierarchy": {
            "example": true,
            "type": "boolean"
          },
          "name": {
            "example": "Nessus Servers",
            "type": "string"
          },
          "required": {
            "example": true,
            "type": "boolean"
          },
          "tweak_format": {
            "example": "Secure the application within the specific {{variable_id}}",
            "type": "string"
          },
          "types": {
            "items": {
              "properties": {
                "fields": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "placeholders": {
                  "type": "object"
                },
                "type": {
                  "enum": [
                    "LABEL",
                    "USER_GROUP",
                    "DOMAIN",
                    "SUBNET",
                    "PRIVATE",
                    "INTERNET",
                    "ANY"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "required",
          "types"
        ],
        "type": "object"
      }
    }
  }
}